{"config":{"indexing":"full","lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Relax-and-Recover (ReaR) User Guide Documentation \u00b6 This is the home for https://relax-and-recover.org/rear-user-guide/ . The sources of the ReaR User Guide are at Github - where else? Use the navigation on the left-hand side to explore the different topics. Feel free to contribute to this project but please read the contributing guidelines . Use the navigation to the left. Not sure what you're looking for? \u2192 Get started !","title":"Relax-and-Recover (ReaR) User Guide Documentation"},{"location":"index.html#relax-and-recover_rear_user_guide_documentation","text":"This is the home for https://relax-and-recover.org/rear-user-guide/ . The sources of the ReaR User Guide are at Github - where else? Use the navigation on the left-hand side to explore the different topics. Feel free to contribute to this project but please read the contributing guidelines . Use the navigation to the left. Not sure what you're looking for? \u2192 Get started !","title":"Relax-and-Recover (ReaR) User Guide Documentation"},{"location":"basics/configuration.html","text":"Configuration \u00b6 There are two important variables that influence Relax-and-Recover and the rescue image. Set OUTPUT to your preferred boot method and define BACKUP for your favorite BACKUP strategy. Furthermore, the BACKUP scheme can be an internal one, meaning using tar or rsync , or an external one, meaning use a backup program of your choice, e.g. TSM, Legato, and so on. The configuration is performed by changing /etc/rear/local.conf or /etc/rear/site.conf . In most cases only these two settings are required. More complex scenarios examples will be available in the Scenarios chapter. Rescue media (OUTPUT) \u00b6 The OUTPUT variable defines where the rescue image should be sent to. Possible OUTPUT setting are: OUTPUT=RAMDISK : Copy the kernel and the initramfs containing the rescue system to a selected location. OUTPUT=ISO : Create a bootable ISO9660 image on disk as rear-$(hostname).iso OUTPUT=PXE : Create on a remote PXE/NFS server the required files (such as configuration file, kernel and initrd image) OUTPUT=OBDR : Create a bootable OBDR tape including the backup archive. Specify the OBDR tape device by using TAPE_DEVICE . OUTPUT=USB : Create a bootable USB disk. OUTPUT=RAWDISK : Create a bootable raw disk image on as rear-$(hostname).raw.gz . Supports UEFI boot if syslinux/EFI or Grub 2/EFI is installed. Supports Legacy BIOS boot if syslinux is installed. Supports UEFI/Legacy BIOS dual boot if syslinux and one of the supported EFI bootloaders are installed. Using OUTPUT_URL with ISO, RAMDISK or RAWDISK output methods \u00b6 When using OUTPUT=ISO , OUTPUT=RAMDISK or OUTPUT=RAWDISK you should provide the backup target location through the OUTPUT_URL variable. Possible OUTPUT_URL settings are: OUTPUT_URL=file:// : Write the ISO image to disk. The default is in /var/lib/rear/output/ . OUTPUT_URL=fish// : Write the ISO image using lftp and the FISH protocol. OUTPUT_URL=ftp:// : Write the ISO image using lftp and the FTP protocol. OUTPUT_URL=ftps:// : Write the ISO image using lftp and the FTPS protocol. OUTPUT_URL=hftp:// : Write the ISO image using lftp and the HFTP protocol. OUTPUT_URL=http:// : Write the ISO image using lftp and the HTTP (PUT) procotol. OUTPUT_URL=https:// : Write the ISO image using lftp and the HTTPS (PUT) protocol. OUTPUT_URL=nfs:// : Write the ISO image using nfs and the NFS protocol. OUTPUT_URL=sftp:// : Write the ISO image using lftp and the secure FTP (SFTP) protocol. OUTPUT_URL=rsync:// : Write the ISO image using rsync and the RSYNC protocol. OUTPUT_URL=sshfs:// : Write the image using sshfs and the SSH protocol. OUTPUT_URL=null : Do not copy the ISO image from /var/lib/rear/output/ to a remote output location. OUTPUT_URL=null is useful when another program (e.g. an external backup program) is used to save the ISO image from the local system to a remote place, or with BACKUP_URL=iso:///backup when the backup is included in the ISO image to avoid a (big) copy of the ISO image at a remote output location. In the latter case the ISO image must be manually saved from the local system to a remote place. OUTPUT_URL=null is only supported together with BACKUP=NETFS . The default boot option of the created ISO is boothd / \"boot from first harddisk\". If you want to change this, e.g. because you integrate REAR into some automation process, you can change the default using ISO_DEFAULT={manual,automatic,boothd} Backup/Restore strategy (BACKUP) \u00b6 The BACKUP setting defines our backup/restore strategy. The BACKUP can be handled via internal archive executable ( tar or rsync ) or by an external backup program (commercial or open source). Possible BACKUP settings are: BACKUP=TSM : Use IBM Tivoli Storage Manager programs BACKUP=DP : Use Micro Focus Data Protector programs BACKUP=FDRUPSTREAM : Use FDR/Upstream BACKUP=NBU : Use Symantec NetBackup programs BACKUP=NSR : Use EMC NetWorker (Legato) BACKUP=BACULA : Use Bacula programs BACKUP=BAREOS : Use Bareos fork of Bacula Note BAREOS_FILESET=Full : Only if you have more than one fileset defined for your clients backup jobs, you need to specify which to use for restore) BACKUP=GALAXY : Use CommVault Galaxy (5, probably 6) BACKUP=GALAXY7 : Use CommVault Galaxy (7 and probably newer) BACKUP=GALAXY10 : Use CommVault Galaxy 10 (or Simpana 10) BACKUP=BORG : Use BorgBackup (short Borg) a deduplicating backup program to restore the data. BACKUP=NETFS : Use Relax-and-Recover internal backup with tar or rsync (or similar). When using BACKUP=NETFS and BACKUP_PROG=tar there is an option to select BACKUP_TYPE=incremental or BACKUP_TYPE=differential to let ReaR make incremental or differential backups until the next full backup day e.g. via FULLBACKUPDAY=\"Mon\" is reached or when the last full backup is too old after FULLBACKUP_OUTDATED_DAYS has passed. Incremental or differential backup is currently only known to work with BACKUP_URL=nfs://server/path . Other BACKUP_URL schemes may work e.g. BACKUP_URL=usb:///dev/disk/by-label/REAR-000 BACKUP=REQUESTRESTORE : No backup, just ask user to somehow restore the filesystems. BACKUP=EXTERNAL : Use a custom strategy by providing backup and restore commands. BACKUP=DUPLICITY : Use duplicity to manage backup (see http://duplicity.nongnu.org). Additionally if duply (see http://duply.net) is also installed while generating the rescue images it is part of the image. BACKUP=RBME : Use Rsync Backup Made Easy (rbme) to restore the data. BACKUP=RSYNC : Use rsync to foresee in backup and restore of your system disks. BACKUP=BLOCKCLONE : Backup block devices using dd or ntfsclone Using NETFS as backup strategy (internal archive method) \u00b6 When using BACKUP=NETFS you should provide the backup target location through the BACKUP_URL variable. Possible BACKUP_URL settings are: BACKUP_URL=file:// : To backup to local disk, use BACKUP_URL=file:///directory/path/ BACKUP_URL=nfs:// : To backup to NFS disk, use BACKUP_URL=nfs://nfs-server-name/share/path BACKUP_URL=tape:// : To backup to tape device, use BACKUP_URL=tape:///dev/nst0 or alternatively, simply define TAPE_DEVICE=/dev/nst0 BACKUP_URL=cifs:// : To backup to a Samba share (CIFS), use BACKUP_URL=cifs://cifs-server-name/share/path+. To provide credentials for CIFS mounting use a _/etc/rear/cifs_ credentials file and define BACKUP_OPTIONS=\"cred=/etc/rear/cifs\"+ and pass along: username=_username_ password=_secret password_ domain=_domain_ BACKUP_URL=sshfs:// : To backup over the network with the help of sshfs. You need the fuse-sshfs package before you can use FUSE-Filesystem to access remote filesystems via SSH. An example of defining the BACKUP_URL could be: BACKUP_URL=sshfs://root@server/export/archives BACKUP_URL=usb:// : To backup to USB storage device, use BACKUP_URL=usb:///dev/disk/by-label/REAR-000 or use a real device node or a specific filesystem label. Alternatively, you can specify the device using USB_DEVICE=/dev/disk/by-label/REAR-000 . If you combine this with OUTPUT=USB you will end up with a bootable USB device. Note With USB we refer to all kinds of external block devices, like USB keys, USB disks, eSATA disks, ZIP drives. An USB device needs to be formatted before you can use it with ReaR. rear format has now in addition to the --efi switch a --bios switch. If none is given (i.e. by default) it will now do hybrid formatting with a BIOS boot partition (on GPT) and an EFI system partition. Optional settings: BACKUP_PROG=rsync : If you want to use rsync instead of tar (only for BACKUP=NETFS ). Do not confuse this with the BACKUP=RSYNC backup mechanism. NETFS_KEEP_OLD_BACKUP_COPY=true : If you want to keep the previous backup archive. Incremental or differential backup and NETFS_KEEP_OLD_BACKUP_COPY contradict each other so that NETFS_KEEP_OLD_BACKUP_COPY must not be 'true' in case of incremental or differential backup. TMPDIR=/bigdisk : Define this variable in /etc/rear/local.conf if directory /tmp is too small to contain the ISO image, e.g. when using OUTPUT=ISO BACKUP=NETFS BACKUP_URL=iso://backup ISO_MAX_SIZE=4500 OUTPUT_URL=nfs://lnx01/vol/lnx01/linux_images_dr The TMPDIR is picked up by the mktemp command to create the BUILD_DIR under /bigdisk/tmp/rear.XXXX Please be aware, that directory /bigdisk must exist, otherwise, rear will bail out when executing the mktemp command. The default value of TMPDIR is an empty string, therefore, by default BUILD_DIR is /tmp/rear.XXXX Another point of interest is the ISO_DIR variable to choose another location of the ISO image instead of the default location ( /var/lib/rear/output ). Using RSYNC as backup mechanism \u00b6 When using BACKUP=RSYNC you should provide the backup target location through the BACKUP_URL variable. Possible BACKUP_URL settings are: BACKUP_URL=rsync://root@server/export/archives BACKUP_URL=rsync://root@server::/export/archives","title":"Basic configuration"},{"location":"basics/configuration.html#configuration","text":"There are two important variables that influence Relax-and-Recover and the rescue image. Set OUTPUT to your preferred boot method and define BACKUP for your favorite BACKUP strategy. Furthermore, the BACKUP scheme can be an internal one, meaning using tar or rsync , or an external one, meaning use a backup program of your choice, e.g. TSM, Legato, and so on. The configuration is performed by changing /etc/rear/local.conf or /etc/rear/site.conf . In most cases only these two settings are required. More complex scenarios examples will be available in the Scenarios chapter.","title":"Configuration"},{"location":"basics/configuration.html#rescue_media_output","text":"The OUTPUT variable defines where the rescue image should be sent to. Possible OUTPUT setting are: OUTPUT=RAMDISK : Copy the kernel and the initramfs containing the rescue system to a selected location. OUTPUT=ISO : Create a bootable ISO9660 image on disk as rear-$(hostname).iso OUTPUT=PXE : Create on a remote PXE/NFS server the required files (such as configuration file, kernel and initrd image) OUTPUT=OBDR : Create a bootable OBDR tape including the backup archive. Specify the OBDR tape device by using TAPE_DEVICE . OUTPUT=USB : Create a bootable USB disk. OUTPUT=RAWDISK : Create a bootable raw disk image on as rear-$(hostname).raw.gz . Supports UEFI boot if syslinux/EFI or Grub 2/EFI is installed. Supports Legacy BIOS boot if syslinux is installed. Supports UEFI/Legacy BIOS dual boot if syslinux and one of the supported EFI bootloaders are installed.","title":"Rescue media (OUTPUT)"},{"location":"basics/configuration.html#using_output_url_with_iso_ramdisk_or_rawdisk_output_methods","text":"When using OUTPUT=ISO , OUTPUT=RAMDISK or OUTPUT=RAWDISK you should provide the backup target location through the OUTPUT_URL variable. Possible OUTPUT_URL settings are: OUTPUT_URL=file:// : Write the ISO image to disk. The default is in /var/lib/rear/output/ . OUTPUT_URL=fish// : Write the ISO image using lftp and the FISH protocol. OUTPUT_URL=ftp:// : Write the ISO image using lftp and the FTP protocol. OUTPUT_URL=ftps:// : Write the ISO image using lftp and the FTPS protocol. OUTPUT_URL=hftp:// : Write the ISO image using lftp and the HFTP protocol. OUTPUT_URL=http:// : Write the ISO image using lftp and the HTTP (PUT) procotol. OUTPUT_URL=https:// : Write the ISO image using lftp and the HTTPS (PUT) protocol. OUTPUT_URL=nfs:// : Write the ISO image using nfs and the NFS protocol. OUTPUT_URL=sftp:// : Write the ISO image using lftp and the secure FTP (SFTP) protocol. OUTPUT_URL=rsync:// : Write the ISO image using rsync and the RSYNC protocol. OUTPUT_URL=sshfs:// : Write the image using sshfs and the SSH protocol. OUTPUT_URL=null : Do not copy the ISO image from /var/lib/rear/output/ to a remote output location. OUTPUT_URL=null is useful when another program (e.g. an external backup program) is used to save the ISO image from the local system to a remote place, or with BACKUP_URL=iso:///backup when the backup is included in the ISO image to avoid a (big) copy of the ISO image at a remote output location. In the latter case the ISO image must be manually saved from the local system to a remote place. OUTPUT_URL=null is only supported together with BACKUP=NETFS . The default boot option of the created ISO is boothd / \"boot from first harddisk\". If you want to change this, e.g. because you integrate REAR into some automation process, you can change the default using ISO_DEFAULT={manual,automatic,boothd}","title":"Using OUTPUT_URL with ISO, RAMDISK or RAWDISK output methods"},{"location":"basics/configuration.html#backuprestore_strategy_backup","text":"The BACKUP setting defines our backup/restore strategy. The BACKUP can be handled via internal archive executable ( tar or rsync ) or by an external backup program (commercial or open source). Possible BACKUP settings are: BACKUP=TSM : Use IBM Tivoli Storage Manager programs BACKUP=DP : Use Micro Focus Data Protector programs BACKUP=FDRUPSTREAM : Use FDR/Upstream BACKUP=NBU : Use Symantec NetBackup programs BACKUP=NSR : Use EMC NetWorker (Legato) BACKUP=BACULA : Use Bacula programs BACKUP=BAREOS : Use Bareos fork of Bacula Note BAREOS_FILESET=Full : Only if you have more than one fileset defined for your clients backup jobs, you need to specify which to use for restore) BACKUP=GALAXY : Use CommVault Galaxy (5, probably 6) BACKUP=GALAXY7 : Use CommVault Galaxy (7 and probably newer) BACKUP=GALAXY10 : Use CommVault Galaxy 10 (or Simpana 10) BACKUP=BORG : Use BorgBackup (short Borg) a deduplicating backup program to restore the data. BACKUP=NETFS : Use Relax-and-Recover internal backup with tar or rsync (or similar). When using BACKUP=NETFS and BACKUP_PROG=tar there is an option to select BACKUP_TYPE=incremental or BACKUP_TYPE=differential to let ReaR make incremental or differential backups until the next full backup day e.g. via FULLBACKUPDAY=\"Mon\" is reached or when the last full backup is too old after FULLBACKUP_OUTDATED_DAYS has passed. Incremental or differential backup is currently only known to work with BACKUP_URL=nfs://server/path . Other BACKUP_URL schemes may work e.g. BACKUP_URL=usb:///dev/disk/by-label/REAR-000 BACKUP=REQUESTRESTORE : No backup, just ask user to somehow restore the filesystems. BACKUP=EXTERNAL : Use a custom strategy by providing backup and restore commands. BACKUP=DUPLICITY : Use duplicity to manage backup (see http://duplicity.nongnu.org). Additionally if duply (see http://duply.net) is also installed while generating the rescue images it is part of the image. BACKUP=RBME : Use Rsync Backup Made Easy (rbme) to restore the data. BACKUP=RSYNC : Use rsync to foresee in backup and restore of your system disks. BACKUP=BLOCKCLONE : Backup block devices using dd or ntfsclone","title":"Backup/Restore strategy (BACKUP)"},{"location":"basics/configuration.html#using_netfs_as_backup_strategy_internal_archive_method","text":"When using BACKUP=NETFS you should provide the backup target location through the BACKUP_URL variable. Possible BACKUP_URL settings are: BACKUP_URL=file:// : To backup to local disk, use BACKUP_URL=file:///directory/path/ BACKUP_URL=nfs:// : To backup to NFS disk, use BACKUP_URL=nfs://nfs-server-name/share/path BACKUP_URL=tape:// : To backup to tape device, use BACKUP_URL=tape:///dev/nst0 or alternatively, simply define TAPE_DEVICE=/dev/nst0 BACKUP_URL=cifs:// : To backup to a Samba share (CIFS), use BACKUP_URL=cifs://cifs-server-name/share/path+. To provide credentials for CIFS mounting use a _/etc/rear/cifs_ credentials file and define BACKUP_OPTIONS=\"cred=/etc/rear/cifs\"+ and pass along: username=_username_ password=_secret password_ domain=_domain_ BACKUP_URL=sshfs:// : To backup over the network with the help of sshfs. You need the fuse-sshfs package before you can use FUSE-Filesystem to access remote filesystems via SSH. An example of defining the BACKUP_URL could be: BACKUP_URL=sshfs://root@server/export/archives BACKUP_URL=usb:// : To backup to USB storage device, use BACKUP_URL=usb:///dev/disk/by-label/REAR-000 or use a real device node or a specific filesystem label. Alternatively, you can specify the device using USB_DEVICE=/dev/disk/by-label/REAR-000 . If you combine this with OUTPUT=USB you will end up with a bootable USB device. Note With USB we refer to all kinds of external block devices, like USB keys, USB disks, eSATA disks, ZIP drives. An USB device needs to be formatted before you can use it with ReaR. rear format has now in addition to the --efi switch a --bios switch. If none is given (i.e. by default) it will now do hybrid formatting with a BIOS boot partition (on GPT) and an EFI system partition. Optional settings: BACKUP_PROG=rsync : If you want to use rsync instead of tar (only for BACKUP=NETFS ). Do not confuse this with the BACKUP=RSYNC backup mechanism. NETFS_KEEP_OLD_BACKUP_COPY=true : If you want to keep the previous backup archive. Incremental or differential backup and NETFS_KEEP_OLD_BACKUP_COPY contradict each other so that NETFS_KEEP_OLD_BACKUP_COPY must not be 'true' in case of incremental or differential backup. TMPDIR=/bigdisk : Define this variable in /etc/rear/local.conf if directory /tmp is too small to contain the ISO image, e.g. when using OUTPUT=ISO BACKUP=NETFS BACKUP_URL=iso://backup ISO_MAX_SIZE=4500 OUTPUT_URL=nfs://lnx01/vol/lnx01/linux_images_dr The TMPDIR is picked up by the mktemp command to create the BUILD_DIR under /bigdisk/tmp/rear.XXXX Please be aware, that directory /bigdisk must exist, otherwise, rear will bail out when executing the mktemp command. The default value of TMPDIR is an empty string, therefore, by default BUILD_DIR is /tmp/rear.XXXX Another point of interest is the ISO_DIR variable to choose another location of the ISO image instead of the default location ( /var/lib/rear/output ).","title":"Using NETFS as backup strategy (internal archive method)"},{"location":"basics/configuration.html#using_rsync_as_backup_mechanism","text":"When using BACKUP=RSYNC you should provide the backup target location through the BACKUP_URL variable. Possible BACKUP_URL settings are: BACKUP_URL=rsync://root@server/export/archives BACKUP_URL=rsync://root@server::/export/archives","title":"Using RSYNC as backup mechanism"},{"location":"basics/getting-started.html","text":"Getting started with ReaR \u00b6 Relax-and-Recover (ReaR) is a DR tool written for GNU/Linux, but as we all know there are hundreds of GNU/Linux variants and we do our best to support the majorty of them. However, keep in mind we cannot please everybody. Software requirements \u00b6 Relax-and-Recover aims to have as little dependencies as possible, however over time certain capabilities were added using utilities and specific features, causing older distributions to fall out of support. We try to avoid this where practically possible and be conservative to add new dependencies. The most basic requirement for Relax-and-Recover is having bash , and ubiquitous Linux tools like: dd (coreutils) ethtool file grep gzip ip (iproute[2]) mount (util-linux-ng) ps (procps) sed ssh (openssh-clients) strings (binutils) tar ... Optionally, some use-cases require other tools: lsscsi and sg3_utils (for OBDR tape support) mkisofs or genisoimage (for ISO output support) syslinux (for ISO or USB output support) syslinux-extlinux (for USB support) ebiso (for SLES UEFI booting) In some cases having newer versions of tools may provide better support: syslinux >= 4.00 (provides menu support) parted In case we are using BACKUP=NETFS with nfs or cifs we might need also: nfs-client cifs-utils Distribution support \u00b6 As a project our aim is not to exclude any distribution from being supported, however (as already noted) some older distributions fell out of support over time and there is little interest from the project or the community to spend the effort to add this support. On the other hand there is a larger demand for a tool like Relax-and-Recover from the Enterprise Linux distributions, and as a result more people are testing and contributing to support those distributions. Currently we aim to support the following distributions by testing them regularly: Red Hat Enterprise Linux and derivatives: RHEL6, RHEL7 and RHEL8 SUSE Linux Enterprise Server 12 and 15 Ubuntu LTS: 17, 18, 20 Distributions dropped as supported: Ubuntu LTS <17 Fedora <29 RHEL 3, 4 and 5 SLES <12 openSUSE <11 Debian <8 Distributions known to be 'unsupported' are: Ubuntu LTS 8.04 (as it does not implement grep -P ) Known limitations \u00b6 Relax-and-Recover offers a lot of flexibility in various use-cases, however it does have some limitations under certain circumstances: Relax-and-Recover depends on the software of the running system. When recovering this system to newer hardware, it is possible that the hardware support of the original system does not support the newer hardware. Relax-and-Recover supports recovering to different hardware, but it cannot always automatically adapt to this new environment. In such cases it requires a manual intervention to e.g. modify the disklayout.conf to indicate the number of controller, disks or specific custom desires during restore reduce the partition-sizes/LV-sizes when restoring to smaller storage pull network-media or configure the network interfaces manually Depending on your back-up strategy you may have to perform actions, like: insert the required tape(s) perform commands to restore the backup Installation \u00b6 You can find the RPM and DEB packages from our web site at https://relax-and-recover.org/download/ The latest stable versions of Fedora and SLES can be installed via yum (on RHEL 6 and 7), or via dnf (on RHEL 8) or zypper (on SLES). However, keep in mind, when you download ReaR from the vendors repositories that the version of ReaR is not always the latest version and will vary from the upstream version. Furthermore, if you have problems with the vendors version of ReaR please contact the vendor directly via their support channels. If required the vendor will contact us via the upstream channels (through our GitHub issues). On our download pages you will find two sections (stable and snapshot versions) of ReaR packages. Select the stable section if you want to play it safe, or the snapshot section if you have issues with a stable version as the snapshot versions are nightly rebuild and may or may not contain your fixes. Please check the current issues submitted at GitHub to check if your problem has already been reported. From downloaded RPM packages \u00b6 Simply install (or update) the provided packages using the command: rpm -Uhv rear-2.6-1.el8.x86_64.rpm You can test your installation by running rear dump : [root@system ~]# rear dump System definition: ARCH = Linux-x86_64 OS = GNU/Linux OS_VENDOR = RedHatEnterpriseServer OS_VERSION = 8.2 From DEB packages \u00b6 On a Debian system (or Ubuntu) you can download the DEB packages from our download page and install it with the command: dpkg -i rear*.deb On Debian (Ubuntu) use the following command to install missing dependencies: apt-get -f install From source \u00b6 The latest and greatest sources are available at GitHub location : https://github.com/rear/rear To make local copy with our github repository just type: git clone git@github.com:rear/rear.git File locations \u00b6 Remember the general configuration file is found at /usr/share/rear/conf/default.conf . In that file you find all variables used by rear which can be overruled by redefining these in the /etc/rear/site.conf or /etc/rear/local.conf files. Please do not modify the default.conf file itself, but use the site.conf or local.conf for this purpose. Note Important note about the configuration files inside ReaR. Treat these as Bash scripts! ReaR will source these configuration files, and therefore, if you make any syntax error against Bash scripting rules ReaR will break. Test your configuration changes If you modify the /etc/rear/local.conf or any other configuration file you can simply test for syntax errors by executing the following command: bash -n /etc/rear/local.conf","title":"Getting started with ReaR"},{"location":"basics/getting-started.html#getting_started_with_rear","text":"Relax-and-Recover (ReaR) is a DR tool written for GNU/Linux, but as we all know there are hundreds of GNU/Linux variants and we do our best to support the majorty of them. However, keep in mind we cannot please everybody.","title":"Getting started with ReaR"},{"location":"basics/getting-started.html#software_requirements","text":"Relax-and-Recover aims to have as little dependencies as possible, however over time certain capabilities were added using utilities and specific features, causing older distributions to fall out of support. We try to avoid this where practically possible and be conservative to add new dependencies. The most basic requirement for Relax-and-Recover is having bash , and ubiquitous Linux tools like: dd (coreutils) ethtool file grep gzip ip (iproute[2]) mount (util-linux-ng) ps (procps) sed ssh (openssh-clients) strings (binutils) tar ... Optionally, some use-cases require other tools: lsscsi and sg3_utils (for OBDR tape support) mkisofs or genisoimage (for ISO output support) syslinux (for ISO or USB output support) syslinux-extlinux (for USB support) ebiso (for SLES UEFI booting) In some cases having newer versions of tools may provide better support: syslinux >= 4.00 (provides menu support) parted In case we are using BACKUP=NETFS with nfs or cifs we might need also: nfs-client cifs-utils","title":"Software requirements"},{"location":"basics/getting-started.html#distribution_support","text":"As a project our aim is not to exclude any distribution from being supported, however (as already noted) some older distributions fell out of support over time and there is little interest from the project or the community to spend the effort to add this support. On the other hand there is a larger demand for a tool like Relax-and-Recover from the Enterprise Linux distributions, and as a result more people are testing and contributing to support those distributions. Currently we aim to support the following distributions by testing them regularly: Red Hat Enterprise Linux and derivatives: RHEL6, RHEL7 and RHEL8 SUSE Linux Enterprise Server 12 and 15 Ubuntu LTS: 17, 18, 20 Distributions dropped as supported: Ubuntu LTS <17 Fedora <29 RHEL 3, 4 and 5 SLES <12 openSUSE <11 Debian <8 Distributions known to be 'unsupported' are: Ubuntu LTS 8.04 (as it does not implement grep -P )","title":"Distribution support"},{"location":"basics/getting-started.html#known_limitations","text":"Relax-and-Recover offers a lot of flexibility in various use-cases, however it does have some limitations under certain circumstances: Relax-and-Recover depends on the software of the running system. When recovering this system to newer hardware, it is possible that the hardware support of the original system does not support the newer hardware. Relax-and-Recover supports recovering to different hardware, but it cannot always automatically adapt to this new environment. In such cases it requires a manual intervention to e.g. modify the disklayout.conf to indicate the number of controller, disks or specific custom desires during restore reduce the partition-sizes/LV-sizes when restoring to smaller storage pull network-media or configure the network interfaces manually Depending on your back-up strategy you may have to perform actions, like: insert the required tape(s) perform commands to restore the backup","title":"Known limitations"},{"location":"basics/getting-started.html#installation","text":"You can find the RPM and DEB packages from our web site at https://relax-and-recover.org/download/ The latest stable versions of Fedora and SLES can be installed via yum (on RHEL 6 and 7), or via dnf (on RHEL 8) or zypper (on SLES). However, keep in mind, when you download ReaR from the vendors repositories that the version of ReaR is not always the latest version and will vary from the upstream version. Furthermore, if you have problems with the vendors version of ReaR please contact the vendor directly via their support channels. If required the vendor will contact us via the upstream channels (through our GitHub issues). On our download pages you will find two sections (stable and snapshot versions) of ReaR packages. Select the stable section if you want to play it safe, or the snapshot section if you have issues with a stable version as the snapshot versions are nightly rebuild and may or may not contain your fixes. Please check the current issues submitted at GitHub to check if your problem has already been reported.","title":"Installation"},{"location":"basics/getting-started.html#from_downloaded_rpm_packages","text":"Simply install (or update) the provided packages using the command: rpm -Uhv rear-2.6-1.el8.x86_64.rpm You can test your installation by running rear dump : [root@system ~]# rear dump System definition: ARCH = Linux-x86_64 OS = GNU/Linux OS_VENDOR = RedHatEnterpriseServer OS_VERSION = 8.2","title":"From downloaded RPM packages"},{"location":"basics/getting-started.html#from_deb_packages","text":"On a Debian system (or Ubuntu) you can download the DEB packages from our download page and install it with the command: dpkg -i rear*.deb On Debian (Ubuntu) use the following command to install missing dependencies: apt-get -f install","title":"From DEB packages"},{"location":"basics/getting-started.html#from_source","text":"The latest and greatest sources are available at GitHub location : https://github.com/rear/rear To make local copy with our github repository just type: git clone git@github.com:rear/rear.git","title":"From source"},{"location":"basics/getting-started.html#file_locations","text":"Remember the general configuration file is found at /usr/share/rear/conf/default.conf . In that file you find all variables used by rear which can be overruled by redefining these in the /etc/rear/site.conf or /etc/rear/local.conf files. Please do not modify the default.conf file itself, but use the site.conf or local.conf for this purpose. Note Important note about the configuration files inside ReaR. Treat these as Bash scripts! ReaR will source these configuration files, and therefore, if you make any syntax error against Bash scripting rules ReaR will break. Test your configuration changes If you modify the /etc/rear/local.conf or any other configuration file you can simply test for syntax errors by executing the following command: bash -n /etc/rear/local.conf","title":"File locations"},{"location":"basics/history.html","text":"A bit of history \u00b6 Relax-and-Recover (ReaR) was not the first project in its kind. Around the year 2000 there were two major Open Source Linux Disaster Recovery projects available: Make CD-ROM Recovery (mkcdrec) - first released in November 2000 by Gratien D'haese who was the only author. In 2012 Gratien officially stopped working on mkCDrec as he spent all his time on developing ReaR. Mondo Rescue - first released somewere in 1999 (need to verify this) by Hugo Rabson who was the original author, but afterwards the lead was taken over by Bruno Cornec (and he still is up to today). The Linux Disaster Recovery project mkCDrec underwent a complete rewrite by Gratien D'haese and Schlomo Shapiro in 2006 and as such Relax-and-Recover (ReaR) was born. Rear 1.7.25 (mid 2010) was the real break through for ReaR as the amount of downloads went sky high since SuSe added it to its HA portfololio. A while later Rear 1.17.2 was added to the core of RedHat RHEL portofolio as well. Since then we have no clue anymore how many people are using ReaR on a daily basis (or weekly) as SLES and RHEL have there own branches of ReaR in their distro's. When I remember other funny things I will add it to this history page.","title":"Bit of History"},{"location":"basics/history.html#a_bit_of_history","text":"Relax-and-Recover (ReaR) was not the first project in its kind. Around the year 2000 there were two major Open Source Linux Disaster Recovery projects available: Make CD-ROM Recovery (mkcdrec) - first released in November 2000 by Gratien D'haese who was the only author. In 2012 Gratien officially stopped working on mkCDrec as he spent all his time on developing ReaR. Mondo Rescue - first released somewere in 1999 (need to verify this) by Hugo Rabson who was the original author, but afterwards the lead was taken over by Bruno Cornec (and he still is up to today). The Linux Disaster Recovery project mkCDrec underwent a complete rewrite by Gratien D'haese and Schlomo Shapiro in 2006 and as such Relax-and-Recover (ReaR) was born. Rear 1.7.25 (mid 2010) was the real break through for ReaR as the amount of downloads went sky high since SuSe added it to its HA portfololio. A while later Rear 1.17.2 was added to the core of RedHat RHEL portofolio as well. Since then we have no clue anymore how many people are using ReaR on a daily basis (or weekly) as SLES and RHEL have there own branches of ReaR in their distro's. When I remember other funny things I will add it to this history page.","title":"A bit of history"},{"location":"basics/introduction.html","text":"Introduction \u00b6 Relax-and-Recover (ReaR) is the leading Open Source bare metal disaster recovery solution. It is a modular framework with many ready-to-go workflows for common situations. Note Relax-and-Recover (ReaR) software package has been added to the core of Red Hat's Enterprise Linux and SuSe did the same for their SLES Operating Systems. Furthermore, Debian and Ubuntu also provide packages of ReaR to download from their repositories. However, be aware if you are using one of these vendors ReaR package it might not be the latest packages the upstream provides on their download page . On the other hand, if you want to have support from your vendor directly then only use the ReaR package they provide. If there is a serious bug then the vendors will open an issue with the upstream project. Relax-and-Recover produces a bootable image which can recreate the system's original storage layout. Once that is done it initiates a restore from backup. Since the storage layout can be modified prior to recovery, and disimilar hardware and virtualization is supported, Relax-and-Recover offers the flexibility to be used for complex system migrations. Currently Relax-and-Recover supports various boot media (incl. ISO, PXE, OBDR tape, USB or eSATA storage), a variety of network protocols (incl. sftp, ftp, http, nfs, cifs) as well as a multitude of backup strategies (incl. IBM TSM, Micro Focus Data Protector, Symantec NetBackup, EMC NetWorker [Legato], SEP Sesam, Galaxy [Simpana], Bacula, Bareos, RBME, rsync, duplicity, Borg). Relax-and-Recover was designed to be easy to set up, requires no maintenance and is there to assist when disaster strikes. Its setup-and-forget nature removes any excuse for not having a disaster recovery solution implemented. Recovering from disaster is made very straight-forward by a 2-step recovery process so that it can be executed by operational teams when required. When used interactively (e.g. when used for migrating systems), menus help make decisions to restore to a new (hardware) environment. Extending and integrating Relax-and-Recover into complex environments is made possible by its modular framework. Consistent logging and optionally extended output help understand the concepts behind Relax-and-Recover, troubleshoot during initial configuration and help debug during integration. If you have time to watch an introduction presentation about Relax-and-Recover then we can recommend the following presentation given by Gratien D'haese during the OpenSuSe Conference (of 2015). OSEM 2015, Relax-and-Recover simplifies Linux Disaster Recovery Professional services and support are available. Relax-and-Recover project \u00b6 The support and development of the Relax-and-Recover project takes place on Github: Relax-and-Recover website Github project In case you have questions, ideas or feedback about this document, you can contact the development team on the Relax-and-Recover mailinglist at: rear-users@lists.relax-and-recover.org. Note Note that you have to be subscribed to be able to send mails to the Relax-and-Recover mailinglist. You can subscribe to the list at: http://lists.relax-and-recover.org/mailman/listinfo/rear-users Design concepts \u00b6 Based on experience from previous projects, a set of design principles were defined, and improved over time: Focus on easy and automated disaster recovery Modular design, focused on system administrators For Linux (and possibly Unix operating systems) Few external dependencies (Bash and standard Unix tools) Easy to use and easy to extend Easy to integrate with real backup software (Open Source and commercial solutions) The goal is to make Relax-and-Recover as least demanding as possible, it will require only the applications necessary to fulfill the job Relax-and-Recover is configured (and designed) for. Furthermore, Relax-and-Recover should be platform independent and ideally install just as a set of scripts that utilizes everything that the Linux operating system provides. Features and functionality \u00b6 Relax-and-Recover has a wide range of features: HP SmartArray and CCISS driver integration Software RAID integration Disk layout change detection for monitoring One-Button-Disaster-Recovery (OBDR) tape support DRBD filesystem support Bacula or Bareos tape support Multiple DR images per system on single USB storage device USB ext3/ext4 support GRUB[2] bootloader re-implementation UEFI support ebiso support (needed by SLES UEFI ISO booting) Add Relax-and-Recover entry to local GRUB configuration (optional) Nagios and webmin integration Syslinux boot menu Storing rescue/backup logfile on rescue media Restoring to different hardware (of the same hardware architecture) Red Hat Enterprise Linux support (included derivated Operating Systems) SuSe SLES support Debian and Ubuntu support Various usability improvements Serial console support auto-detected Lockless workflows USB udev integration to trigger mkrescue on inserting USB device Migrate UUID from disks and MAC addressed from network interfaces Integrates with Disaster Recovery Linux Manager (DRLM) Data deduplication with Borg as backend Block device level backup/restore Multipath support for SAN devives See the full list of new features on our Release Notes","title":"Introduction"},{"location":"basics/introduction.html#introduction","text":"Relax-and-Recover (ReaR) is the leading Open Source bare metal disaster recovery solution. It is a modular framework with many ready-to-go workflows for common situations. Note Relax-and-Recover (ReaR) software package has been added to the core of Red Hat's Enterprise Linux and SuSe did the same for their SLES Operating Systems. Furthermore, Debian and Ubuntu also provide packages of ReaR to download from their repositories. However, be aware if you are using one of these vendors ReaR package it might not be the latest packages the upstream provides on their download page . On the other hand, if you want to have support from your vendor directly then only use the ReaR package they provide. If there is a serious bug then the vendors will open an issue with the upstream project. Relax-and-Recover produces a bootable image which can recreate the system's original storage layout. Once that is done it initiates a restore from backup. Since the storage layout can be modified prior to recovery, and disimilar hardware and virtualization is supported, Relax-and-Recover offers the flexibility to be used for complex system migrations. Currently Relax-and-Recover supports various boot media (incl. ISO, PXE, OBDR tape, USB or eSATA storage), a variety of network protocols (incl. sftp, ftp, http, nfs, cifs) as well as a multitude of backup strategies (incl. IBM TSM, Micro Focus Data Protector, Symantec NetBackup, EMC NetWorker [Legato], SEP Sesam, Galaxy [Simpana], Bacula, Bareos, RBME, rsync, duplicity, Borg). Relax-and-Recover was designed to be easy to set up, requires no maintenance and is there to assist when disaster strikes. Its setup-and-forget nature removes any excuse for not having a disaster recovery solution implemented. Recovering from disaster is made very straight-forward by a 2-step recovery process so that it can be executed by operational teams when required. When used interactively (e.g. when used for migrating systems), menus help make decisions to restore to a new (hardware) environment. Extending and integrating Relax-and-Recover into complex environments is made possible by its modular framework. Consistent logging and optionally extended output help understand the concepts behind Relax-and-Recover, troubleshoot during initial configuration and help debug during integration. If you have time to watch an introduction presentation about Relax-and-Recover then we can recommend the following presentation given by Gratien D'haese during the OpenSuSe Conference (of 2015). OSEM 2015, Relax-and-Recover simplifies Linux Disaster Recovery Professional services and support are available.","title":"Introduction"},{"location":"basics/introduction.html#relax-and-recover_project","text":"The support and development of the Relax-and-Recover project takes place on Github: Relax-and-Recover website Github project In case you have questions, ideas or feedback about this document, you can contact the development team on the Relax-and-Recover mailinglist at: rear-users@lists.relax-and-recover.org. Note Note that you have to be subscribed to be able to send mails to the Relax-and-Recover mailinglist. You can subscribe to the list at: http://lists.relax-and-recover.org/mailman/listinfo/rear-users","title":"Relax-and-Recover project"},{"location":"basics/introduction.html#design_concepts","text":"Based on experience from previous projects, a set of design principles were defined, and improved over time: Focus on easy and automated disaster recovery Modular design, focused on system administrators For Linux (and possibly Unix operating systems) Few external dependencies (Bash and standard Unix tools) Easy to use and easy to extend Easy to integrate with real backup software (Open Source and commercial solutions) The goal is to make Relax-and-Recover as least demanding as possible, it will require only the applications necessary to fulfill the job Relax-and-Recover is configured (and designed) for. Furthermore, Relax-and-Recover should be platform independent and ideally install just as a set of scripts that utilizes everything that the Linux operating system provides.","title":"Design concepts"},{"location":"basics/introduction.html#features_and_functionality","text":"Relax-and-Recover has a wide range of features: HP SmartArray and CCISS driver integration Software RAID integration Disk layout change detection for monitoring One-Button-Disaster-Recovery (OBDR) tape support DRBD filesystem support Bacula or Bareos tape support Multiple DR images per system on single USB storage device USB ext3/ext4 support GRUB[2] bootloader re-implementation UEFI support ebiso support (needed by SLES UEFI ISO booting) Add Relax-and-Recover entry to local GRUB configuration (optional) Nagios and webmin integration Syslinux boot menu Storing rescue/backup logfile on rescue media Restoring to different hardware (of the same hardware architecture) Red Hat Enterprise Linux support (included derivated Operating Systems) SuSe SLES support Debian and Ubuntu support Various usability improvements Serial console support auto-detected Lockless workflows USB udev integration to trigger mkrescue on inserting USB device Migrate UUID from disks and MAC addressed from network interfaces Integrates with Disaster Recovery Linux Manager (DRLM) Data deduplication with Borg as backend Block device level backup/restore Multipath support for SAN devives See the full list of new features on our Release Notes","title":"Features and functionality"},{"location":"development/github-pr.html","text":"How to make a pull request with GitHub \u00b6 Create a GitHub account \u00b6 You can skip this section if you are already a member of GitHub - meaning you have an account on GitHub. If that is not the case, then first create an account on GitHub . Fork the ReaR repository \u00b6 If you never, ever, forked a respository on GitHub then you should first read \" Fork a repository \" page on GutHub. To make a fork of ReaR first open your browser and go to the ReaR Github code page . If you are not yet logged in on Github then first do a sign in and then make a fork by clicking on the fork symbol in the upper right corner - see The forking process takes a couple of seconds and you go directly to the forked repository /rear. Clone the ReaR repository \u00b6 From that moment on you can create a clone of the forked repository to your local system. Copy/paste the URL of the SSH section and use that in a Linux window: $ git clone git@github.com:YOURNAME/rear.git $ cd rear Once that is done you have to make your local ReaR repository aware that is is linked to the upstream master if you want to be able to make pull requests in alter phase: $ git remote add upstream git@github.com:rear/rear.git $ git checkout master $ git fetch upstream $ git merge upstream/master Make your working branch of the ReaR repository \u00b6 At this point your local ReaR repository YOURNAME/rear is completely synced with the upstream master and now you are ready a create a working branch for a fix for an issue or new feature, e.g. issue2152-prep-bacula $ git checkout -b issue2152-prep-bacula upstream/master Branch 'issue2152-prep-bacula' set up to track remote branch 'master' from 'upstream'. Switched to a new branch 'issue2152-prep-bacula' git branch * issue2152-prep-bacula master In this ReaR repository you are the boss and are working completely independ from the upstream master branch. You can always verify if this branch is linked with your origin and not with the upstream: $ git remote -v origin git@github.com:gdha/rear.git (fetch) origin git@github.com:gdha/rear.git (push) upstream git@github.com:rear/rear.git (fetch) upstream git@github.com:rear/rear.git (push) Make your modifications in the code and make sure that you tested it out before making a pull request. After some time you have all changes in place and you are ready to commit these into your own branch: $ git status On branch issue2152-prep-bacula Your branch is up to date with 'upstream/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: conf/default.conf modified: prep/BACULA/default/400_prep_bacula.sh modified: prep/BACULA/default/450_check_BACULA_client_configured.sh modified: prep/BACULA/default/500_check_BACULA_bconsole_results.sh modified: verify/BACULA/default/050_check_requirements.sh modified: verify/BACULA/default/100_start_bacula-fd.sh no changes added to commit (use \"git add\" and/or \"git commit -a\") Commit the modified files into your branch and make sure that you add your signature with the option -s : $ git commit -a -s -m '#2152: make bacula aware of different location of config files' [issue2152-prep-bacula d6681f2e] #2152: make bacula aware of different location of config files 6 files changed, 38 insertions(+), 17 deletions(-) $ git push upstream issue2152-prep-bacula Counting objects: 18, done. Delta compression using up to 8 threads. Compressing objects: 100% (15/15), done. Writing objects: 100% (18/18), 2.06 KiB | 2.06 MiB/s, done. Total 18 (delta 10), reused 0 (delta 0) remote: Resolving deltas: 100% (10/10), completed with 10 local objects. remote: remote: Create a pull request for 'issue2152-prep-bacula' on GitHub by visiting: remote: https://github.com/rear/rear/pull/new/issue2152-prep-bacula remote: To github.com:rear/rear.git * [new branch] issue2152-prep-bacula -> issue2152-prep-bacula Once that went fine open your browser on the GitHub page of ReaR and you will see the following: Just click on the \"Compare & pull request\" button which will bring you to the following screen: Please fill in the requested information as good as possible so that the ReaR developers and maintainers understand clearly where to PR is about. When you are done with a clear description you can press the \"Create pull request\" button. From that moment on your PR request is in the hand of the ReaR maintainers who will help you to correct missing stuff or provide some enhancements tips and so on. Therefore, it could be that you still have to make a few modifications until all parties are happy with the PR. Once there is an agreement to merge the PR one of the ReaR maintainers will perform the PR into the upstream code of ReaR and you're done at that moment and you may delete your working branch, in this example issue2152-prep-bacula, e.g. $ git checkout master $ git branch issue2152-prep-bacula -d","title":"Make a pull request with GitHub"},{"location":"development/github-pr.html#how_to_make_a_pull_request_with_github","text":"","title":"How to make a pull request with GitHub"},{"location":"development/github-pr.html#create_a_github_account","text":"You can skip this section if you are already a member of GitHub - meaning you have an account on GitHub. If that is not the case, then first create an account on GitHub .","title":"Create a GitHub account"},{"location":"development/github-pr.html#fork_the_rear_repository","text":"If you never, ever, forked a respository on GitHub then you should first read \" Fork a repository \" page on GutHub. To make a fork of ReaR first open your browser and go to the ReaR Github code page . If you are not yet logged in on Github then first do a sign in and then make a fork by clicking on the fork symbol in the upper right corner - see The forking process takes a couple of seconds and you go directly to the forked repository /rear.","title":"Fork the ReaR repository"},{"location":"development/github-pr.html#clone_the_rear_repository","text":"From that moment on you can create a clone of the forked repository to your local system. Copy/paste the URL of the SSH section and use that in a Linux window: $ git clone git@github.com:YOURNAME/rear.git $ cd rear Once that is done you have to make your local ReaR repository aware that is is linked to the upstream master if you want to be able to make pull requests in alter phase: $ git remote add upstream git@github.com:rear/rear.git $ git checkout master $ git fetch upstream $ git merge upstream/master","title":"Clone the ReaR repository"},{"location":"development/github-pr.html#make_your_working_branch_of_the_rear_repository","text":"At this point your local ReaR repository YOURNAME/rear is completely synced with the upstream master and now you are ready a create a working branch for a fix for an issue or new feature, e.g. issue2152-prep-bacula $ git checkout -b issue2152-prep-bacula upstream/master Branch 'issue2152-prep-bacula' set up to track remote branch 'master' from 'upstream'. Switched to a new branch 'issue2152-prep-bacula' git branch * issue2152-prep-bacula master In this ReaR repository you are the boss and are working completely independ from the upstream master branch. You can always verify if this branch is linked with your origin and not with the upstream: $ git remote -v origin git@github.com:gdha/rear.git (fetch) origin git@github.com:gdha/rear.git (push) upstream git@github.com:rear/rear.git (fetch) upstream git@github.com:rear/rear.git (push) Make your modifications in the code and make sure that you tested it out before making a pull request. After some time you have all changes in place and you are ready to commit these into your own branch: $ git status On branch issue2152-prep-bacula Your branch is up to date with 'upstream/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: conf/default.conf modified: prep/BACULA/default/400_prep_bacula.sh modified: prep/BACULA/default/450_check_BACULA_client_configured.sh modified: prep/BACULA/default/500_check_BACULA_bconsole_results.sh modified: verify/BACULA/default/050_check_requirements.sh modified: verify/BACULA/default/100_start_bacula-fd.sh no changes added to commit (use \"git add\" and/or \"git commit -a\") Commit the modified files into your branch and make sure that you add your signature with the option -s : $ git commit -a -s -m '#2152: make bacula aware of different location of config files' [issue2152-prep-bacula d6681f2e] #2152: make bacula aware of different location of config files 6 files changed, 38 insertions(+), 17 deletions(-) $ git push upstream issue2152-prep-bacula Counting objects: 18, done. Delta compression using up to 8 threads. Compressing objects: 100% (15/15), done. Writing objects: 100% (18/18), 2.06 KiB | 2.06 MiB/s, done. Total 18 (delta 10), reused 0 (delta 0) remote: Resolving deltas: 100% (10/10), completed with 10 local objects. remote: remote: Create a pull request for 'issue2152-prep-bacula' on GitHub by visiting: remote: https://github.com/rear/rear/pull/new/issue2152-prep-bacula remote: To github.com:rear/rear.git * [new branch] issue2152-prep-bacula -> issue2152-prep-bacula Once that went fine open your browser on the GitHub page of ReaR and you will see the following: Just click on the \"Compare & pull request\" button which will bring you to the following screen: Please fill in the requested information as good as possible so that the ReaR developers and maintainers understand clearly where to PR is about. When you are done with a clear description you can press the \"Create pull request\" button. From that moment on your PR request is in the hand of the ReaR maintainers who will help you to correct missing stuff or provide some enhancements tips and so on. Therefore, it could be that you still have to make a few modifications until all parties are happy with the PR. Once there is an agreement to merge the PR one of the ReaR maintainers will perform the PR into the upstream code of ReaR and you're done at that moment and you may delete your working branch, in this example issue2152-prep-bacula, e.g. $ git checkout master $ git branch issue2152-prep-bacula -d","title":"Make your working branch of the ReaR repository"},{"location":"legal/contributing/index.html","text":"Introduction \u00b6 We welcome and encourage community contributions to Relax-and-Recover (ReaR) User Guide Documentation. Where to start? \u00b6 The best way to directly collaborate with the project contributors is through GitHub: https://github.com/rear/rear-user-guide If you want to contribute to our documentation by either fixing a typo or creating a page, please open a GitHub pull request . If you want to raise an issue such as a defect, an enhancement request or a general issue, please open a GitHub issue . If you want us to write or enhance the user guide you can subscribe to our ReaR Subscription program. Before you start writing, we recommend discussing your plans through a GitHub issue, especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your contribution, and help you find out if someone else is working on the same thing. Note that all submissions from all contributors get reviewed. After a pull request is made, other contributors will offer feedback. If the patch passes review, a maintainer will accept it with a comment. When a pull request fails review, the author is expected to update the pull request to address the issue until it passes review and the pull request merges successfully. At least one review from a maintainer is required for all patches. Mastering Markdown \u00b6 All articles of this user guide are written in Markdown, therefore, please get acquanted with the Markdown language and if you want to highlight special code see also the \" syntax highlighting in markdown \" page. Developer's Certificate of Origin \u00b6 All contributions must include acceptance of the DCO: Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660 York Street, Suite 102, San Francisco, CA 94110 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Sign your work \u00b6 To accept the DCO, simply add this line to each commit message with your name and email address ( git commit -s will do this for you): Signed-off-by: Jane Example <jane@example.com> For legal reasons, no anonymous or pseudonymous contributions are accepted. Submitting Pull Requests \u00b6 We encourage and support contributions from the community. No fix is too small. We strive to process all pull requests as soon as possible and with constructive feedback. If your pull request is not accepted at first, please try again after addressing the feedback you received. To make a pull request you will need a GitHub account. For help, see GitHub's documentation on forking and pull requests. On the Relax-and-Recover development page under the contibuting section you find an example on how to make a fork of the ReaR User Guide on GitHub.","title":"Contributing"},{"location":"legal/contributing/index.html#introduction","text":"We welcome and encourage community contributions to Relax-and-Recover (ReaR) User Guide Documentation.","title":"Introduction"},{"location":"legal/contributing/index.html#where_to_start","text":"The best way to directly collaborate with the project contributors is through GitHub: https://github.com/rear/rear-user-guide If you want to contribute to our documentation by either fixing a typo or creating a page, please open a GitHub pull request . If you want to raise an issue such as a defect, an enhancement request or a general issue, please open a GitHub issue . If you want us to write or enhance the user guide you can subscribe to our ReaR Subscription program. Before you start writing, we recommend discussing your plans through a GitHub issue, especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your contribution, and help you find out if someone else is working on the same thing. Note that all submissions from all contributors get reviewed. After a pull request is made, other contributors will offer feedback. If the patch passes review, a maintainer will accept it with a comment. When a pull request fails review, the author is expected to update the pull request to address the issue until it passes review and the pull request merges successfully. At least one review from a maintainer is required for all patches.","title":"Where to start?"},{"location":"legal/contributing/index.html#mastering_markdown","text":"All articles of this user guide are written in Markdown, therefore, please get acquanted with the Markdown language and if you want to highlight special code see also the \" syntax highlighting in markdown \" page.","title":"Mastering Markdown"},{"location":"legal/contributing/index.html#developers_certificate_of_origin","text":"All contributions must include acceptance of the DCO: Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660 York Street, Suite 102, San Francisco, CA 94110 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.","title":"Developer's Certificate of Origin"},{"location":"legal/contributing/index.html#sign_your_work","text":"To accept the DCO, simply add this line to each commit message with your name and email address ( git commit -s will do this for you): Signed-off-by: Jane Example <jane@example.com> For legal reasons, no anonymous or pseudonymous contributions are accepted.","title":"Sign your work"},{"location":"legal/contributing/index.html#submitting_pull_requests","text":"We encourage and support contributions from the community. No fix is too small. We strive to process all pull requests as soon as possible and with constructive feedback. If your pull request is not accepted at first, please try again after addressing the feedback you received. To make a pull request you will need a GitHub account. For help, see GitHub's documentation on forking and pull requests. On the Relax-and-Recover development page under the contibuting section you find an example on how to make a fork of the ReaR User Guide on GitHub.","title":"Submitting Pull Requests"},{"location":"legal/license/index.html","text":"Creative Commons Legal Code CC0 1.0 Universal CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER. Statement of Purpose The laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\"). Certain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others. For these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights. 1. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following: i. the right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work; ii. moral rights retained by the original author(s) and/or performer(s); iii. publicity and privacy rights pertaining to a person's image or likeness depicted in a Work; iv. rights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below; v. rights protecting the extraction, dissemination, use and reuse of data in a Work; vi. database rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and vii. other similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof. 2. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose. 3. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose. 4. Limitations and Disclaimers. a. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document. b. Affirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law. c. Affirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work. d. Affirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.","title":"License"},{"location":"releasenotes/index.html","text":"Release Notes of Relax-and-Recover (ReaR) \u00b6 Release Notes of ReaR 2.7 (released in July 2022) Release Notes of ReaR 2.6 (released in June 2020) Known problems and work-arounds","title":"Release Notes"},{"location":"releasenotes/index.html#release_notes_of_relax-and-recover_rear","text":"Release Notes of ReaR 2.7 (released in July 2022) Release Notes of ReaR 2.6 (released in June 2020) Known problems and work-arounds","title":"Release Notes of Relax-and-Recover (ReaR)"},{"location":"releasenotes/knownproblems.html","text":"Known Problems and Workarounds \u00b6 Usage of an alternative configuration directory is different in mkbackup or recover mode \u00b6 Using rear -v -c /etc/rear/mydir mkbackup works fine in production, but when you try (once booted from rescue image) rear -v -c /etc/rear/mydir recover it will fail. Do the following in recover mode The configuration files are copied to /etc/rear/ into the rescue image, so you need to type: rear -v recover See issue #512 Is there a possibility to add btrfs subvolume to a rsync backup \u00b6 Workaround: At present (release 1.18) there is no workaround in place. If you happen to know how this could be fixed then add your ideas to issue #417 UEFI ISO booting does not work on openSUSE 12.x, or SLES 11/12 \u00b6 Workaround: At present (release 1.18.x and higher) genisoimage cannot produce ISO images that can boot via UEFI on an openSUSE distribution (and also SLES). However, use the ebiso package instead to create UEFI ISO images on SLES. System reconfiguration still has some weaknesses. \u00b6 this has to be tested before relying on it, there are too many unknowns involved so that we cannot guarantee anything in this area. It has been developed mostly as a P2V tool to migrate HP servers to VMware Vms hard disks need to be at least of the same size and amount as in the original system, ATM this is a simple 1:1 mapping of old to new disks, there is no removal of RAID groups or merging of smaller disks onto a bigger one or making stuff smaller. any use of /dev/disk/by-path or /dev/disk/by-id is untested and will most likely not work. In some cases Relax-and-Recover will print a warning, but we are not able to detect all cases. Typically this leads to unbootable systems or bad /etc/fstab files If SELinux is not disabled during backup (variable \u00b6 BACKUP_SELINUX_DISABLE= in /etc/rear/local.conf ) then we might see errors in the rear-$(hostname).log file such as: tar: var/cache/yum/i386/15/updates/packages: Cannot setfilecon: No such file or directory Workaround: Make sure the BACKUP_URL destination understands extended attributes (CIFS is out of the question and NFS is problematic). When using local disks (or external USB devices) make sure the proper mount options are given in the BACKUP_OPTIONS variable, e.g.: BACKUP_OPTIONS=\"rw,relatime,seclabel,user_xattr,acl,barrier=1,data=ordered\" Note BACKUP_SELINUX_DISABLE=1 variable has been introduced in the /usr/share/rear/conf/default.conf file to disable SELinux while the backup is running (default setting). ERROR: FindStorageDrivers called but STORAGE_DRIVERS is empty \u00b6 Above error message might be seen after a fresh installation of the GNU/Linux kernel. ReaR got confused between the running kernel version number and the actual fresh kernel available. Workaround: Reboot your server before using ReaR again, which is a good practice anyway after upgrading the GNU/Linux kernel.","title":"Known Problems and Workarounds"},{"location":"releasenotes/knownproblems.html#known_problems_and_workarounds","text":"","title":"Known Problems and Workarounds"},{"location":"releasenotes/knownproblems.html#usage_of_an_alternative_configuration_directory_is_different_in_mkbackup_or_recover_mode","text":"Using rear -v -c /etc/rear/mydir mkbackup works fine in production, but when you try (once booted from rescue image) rear -v -c /etc/rear/mydir recover it will fail. Do the following in recover mode The configuration files are copied to /etc/rear/ into the rescue image, so you need to type: rear -v recover See issue #512","title":"Usage of an alternative configuration directory is different in mkbackup or recover mode"},{"location":"releasenotes/knownproblems.html#is_there_a_possibility_to_add_btrfs_subvolume_to_a_rsync_backup","text":"Workaround: At present (release 1.18) there is no workaround in place. If you happen to know how this could be fixed then add your ideas to issue #417","title":"Is there a possibility to add btrfs subvolume to a rsync backup"},{"location":"releasenotes/knownproblems.html#uefi_iso_booting_does_not_work_on_opensuse_12x_or_sles_1112","text":"Workaround: At present (release 1.18.x and higher) genisoimage cannot produce ISO images that can boot via UEFI on an openSUSE distribution (and also SLES). However, use the ebiso package instead to create UEFI ISO images on SLES.","title":"UEFI ISO booting does not work on openSUSE 12.x, or SLES 11/12"},{"location":"releasenotes/knownproblems.html#system_reconfiguration_still_has_some_weaknesses","text":"this has to be tested before relying on it, there are too many unknowns involved so that we cannot guarantee anything in this area. It has been developed mostly as a P2V tool to migrate HP servers to VMware Vms hard disks need to be at least of the same size and amount as in the original system, ATM this is a simple 1:1 mapping of old to new disks, there is no removal of RAID groups or merging of smaller disks onto a bigger one or making stuff smaller. any use of /dev/disk/by-path or /dev/disk/by-id is untested and will most likely not work. In some cases Relax-and-Recover will print a warning, but we are not able to detect all cases. Typically this leads to unbootable systems or bad /etc/fstab files","title":"System reconfiguration still has some weaknesses."},{"location":"releasenotes/knownproblems.html#if_selinux_is_not_disabled_during_backup_variable","text":"BACKUP_SELINUX_DISABLE= in /etc/rear/local.conf ) then we might see errors in the rear-$(hostname).log file such as: tar: var/cache/yum/i386/15/updates/packages: Cannot setfilecon: No such file or directory Workaround: Make sure the BACKUP_URL destination understands extended attributes (CIFS is out of the question and NFS is problematic). When using local disks (or external USB devices) make sure the proper mount options are given in the BACKUP_OPTIONS variable, e.g.: BACKUP_OPTIONS=\"rw,relatime,seclabel,user_xattr,acl,barrier=1,data=ordered\" Note BACKUP_SELINUX_DISABLE=1 variable has been introduced in the /usr/share/rear/conf/default.conf file to disable SELinux while the backup is running (default setting).","title":"If SELinux is not disabled during backup (variable"},{"location":"releasenotes/knownproblems.html#error_findstoragedrivers_called_but_storage_drivers_is_empty","text":"Above error message might be seen after a fresh installation of the GNU/Linux kernel. ReaR got confused between the running kernel version number and the actual fresh kernel available. Workaround: Reboot your server before using ReaR again, which is a good practice anyway after upgrading the GNU/Linux kernel.","title":"ERROR: FindStorageDrivers called but STORAGE_DRIVERS is empty"},{"location":"releasenotes/rear26.html","text":"Release Notes for Relax-and-Recover version 2.6 \u00b6 This document contains the release notes for the open source project Relax-and-Recover. Relax-and-Recover website GitHub project Product Features \u00b6 The following features are supported by the most recent releases of Relax-and-Recover. Anything labeled as ( New ) was added as the most recent release. New functionality for previous releases can be seen in the next chapter that details each release. The most recent release of Relax-and-Recover is supported on most GNU/Linux based systems with kernel 2.6 or higher. It provides the following functionality: Hot maintenance capability. A recovery/rescue image can be made online while the system is running Command line interface. Relax-and-Recover does not require a graphical interface to run, neither in creation mode, nor in recovery mode (console is enough) Support included for most common file systems, such as ext2, ext3, and ext4. Other filesystems like reiserfs, jfs, xfs, and btrfs are also implemented, but are less tested. (Feedback is appreciated) Selected Hardware RAID and (eg. HP SmartArray) and mirroring solutions (eg. DRBD) are supported NVME and mmcblk disks are supported LVM root volumes are supported Multipath support for SAN storage UEFI support (including UEFI USB booting) Integrates with internal backup programs such as: GNU tar (BACKUP=NETFS, BACKUP_PROG=tar) GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=incremental, FULLBACKUPDAY=\"Mon\") for using incremental backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=differential, FULLBACKUPDAY=\"Mon\") for using differential backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar with openssl encryption (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_PROG_CRYPT_ENABLED=1) rsync on local devices (BACKUP=NETFS, BACKUP_PROG=rsync), such USB and local disks rsync over the network (BACKUP=RSYNC, BACKUP_PROG=rsync) Multiple backup methods ( read the documentation ) Any partition (e.g. a Windows partition) via BACKUP=BLOCKCLONE. See the documention about BLOCKCLONE BACKUP=ZYPPER is SLES12 only ( Experimental ) BACKUP=YUM is for RedHat architectures ony ( Experimental ) Integrates with external backup solutions such as: Tivoli Storage Manager (BACKUP=TSM) Data Protector (BACKUP=DP) Symantec NetBackup (BACKUP=NBU) Galaxy 5, 6, and 7 (BACKUP=GALAXY) Galaxy 10 [Commvault Simpana] (BACKUP=GALAXY10) Bacula (BACKUP=BACULA) Bareos (BACKUP=BAREOS) (A fork of Bacula) Rsync Backup Made Easy (BACKUP=RBME) Duplicity/Duply (BACKUP=DUPLICITY) EMC Networker, also known as Legato (BACKUP=NSR) EMC Avamar (BACKUP=AVA) SEP Sesam (BACKUP=SESAM) FDR/Upstream (BACKUP=FDRUPSTREAM) Novastor NovaBACKUP DC (BACKUP=NBKDC) Borg Backup (BACKUP=BORG) Rubrik Cloud Data Management (BACKUP=CDM) ( New ) Integrates with Disaster Recovery Linux Manager (DRLM) Udev support (except for some really ancient udev versions) which is the base for many important features: kernel drivers for network cards and storage adapters are loaded via udev deal with network persistent names in udev rules firmware loading persistent storage device names (though Relax-and-Recover does nothing with this) Systemd support for the more recent Linux distributions System migration and reconfiguration ('MIGRATION_MODE') facilitate recovery on hardware, that is not the same as the original system network and storage drivers are adjusted map hard disks if they do not match (e.g. hda -> sda) remap network MAC addresses use another IP address, or using dhcp via templates or from kernel command line rebuild the initial ramdisk if needed (for new storage drivers) migration to SAN storaged Support backup software: Bacula, both locally attached tapes (with bextract) and network-based backups. Also, in combination with OBDR tapes. Create OBDR tapes with method mkbackup and put the backup onto the tape to have a single-tape bootable recovery solution Label the OBDR tape with the method format to avoid accidental overwrites with OBDR Create bootable disk (eSATA, USB ...) medium with the backup included: BACKUP_URL=usb:///dev/device Together with OUTPUT=USB we have a complete solution on hard disks (booting of it and restoring data). DHCP client support (IPv4 and IPv6). Dhcp client activation can be forced via the variable USE_DHCLIENT=yes (define in /etc/rear/local.conf ). It is also possible to force DHCP at boot time with kernel option dhcp USE_STATIC_NETWORKING=y , will cause statically configured network settings to be applied even when USE_DHCLIENT is in effect Save layout and compare layouts for automation of making Relax-and-Recover snapshots (checklayout option) External USB booting uses extlinux (instead of syslinux), and therefore, the USB disk must first be formatted with an ext2, ext3, ext4 or btrfs based file system VLAN tagging, teaming and bridge support Add timestamp of ReaR run with rc code to the syslog or messages file; sending mail report is also possible The possibility to backup any partition (in particular a Windows partition) via the BACKUP type BLOCKCLONE Unattended ReaR recovery has been improved Improved security model related to SSH keys SSH_FILES='avoid_sensitive_files' (see details in /usr/share/rear/conf/default.conf ) SSH_UNPROTECTED_PRIVATE_KEYS='no' (see details in /usr/share/rear/conf/default.conf ) Note Features marked Experimental are prone to change with future releases. ReaR release 2.6 (June 2020) \u00b6 New features, bigger enhancements, and possibly backward incompatible changes: Initial preliminary first basic support for IBM Z architecture \"s390x\" (a.k.a. \"z Systems\", formerly \"System/390\", simply called \"s390\") : Currently primarily for Red Hat and SUSE enterprise systems so that interested users can try out early how far things work in their particular IBM Z environments and provide feedback preferably plus needed fixes, adaptions, and enhancements to ReaR upstream at https://github.com/rear/rear (issues #2137 #2142). New BACKUP=CDM method to support Rubrik Cloud Data Management (CDM): The Rubrik CDM backup and restore method for ReaR allows Rubrik CDM to perform bare metal recovery of Linux systems. It does this by including the Rubrik CDM RBS agent files in the ReaR recovery system so that during rear recover the Rubrik CDM RBS agent can be used to restore from Rubrik CDM (issue #2248). New use-case for BLOCKCLONE backup method with the \"multiple backups\" approach for a more complex LUKS setup with different passphrases or keys: The usual support for LUKS-encrypted filesystems means that during reare recover a new encrypted filesystem will be created with new encryption keys. To recover the exact LUKS setup including its keys from the original system it is now possible to use the \"multiple backups\" approach by first ignoring the encrypted filesystem during the \"base system\" phase, and then using a second BLOCKCLONE phase with a dd image that contains the encrypted filesystem. The new config variable BLOCKCLONE_TRY_UNMOUNT is needed here: It will try to unmount the encrypted filesystem before creating its image and before restoring it (issue #2200). Initial draft implementation of the new 'mountonly' workflow to use ReaR as rescue system, therein mount the filesystems of the target system so that one can manually repair it. This is described in doc/user-guide/04-scenarios.adoc (issue #2247). Enable creation of non consecutive partitions. parted is not capable of creating non-consecutive partitions. To still be able to do so, the trick consists in creating dummy partitions to fill the gaps between partition numbers. Allocation of these dummy partitions is done from the end of the target partition, because parted is not capable of resizing a partition from the beginning (issues #2081 #1793 #1771 #1681). Improved handling of partition label type for multipath disks plus including of multipath disks in backup (unless AUTOEXCLUDE_MULTIPATH is true). Now the partition label type for multipath devices (same as is already done for normal disks) is stored in 'multipath' entries in disklayout.conf so that the syntax of those entries changed and that new syntax is now documented in doc/user-guide/06-layout-configuration.adoc (issues #2234 #2236). The config variable WAIT_SECS default value was aligned with the USER_INPUT_TIMEOUT default value so that now the default timeout for user input is always 300 seconds. The former WAIT_SECS default value of 30 seconds was too short because the 'read -t' timeout interrupts ongoing user input. The timeout must be sufficiently long for the user to read and understand the possibly unexpected user input request message and then some more time to make a decision what to enter and finally even more time to enter the right value (issue #2257). Enhanced default AUTOEXCLUDE_PATH=( /media /run /mnt /tmp ) to automatically exclude temporarily mounted things (e.g. USB devices) because mountpoints for temporarily mounted things are usually sub-directories below /media /run (like /run/media) /mnt and /tmp (issue #2239). Now we have CLONE_ALL_USERS_GROUPS=\"true\" by default. See the explanation in default.conf what that means. (issue #2345) Replaced grub-mkimage with more sophisticated grub-mkstandalone when building GRUB2 image for using GRUB2 as recovery system UEFI bootloader (issue #2293). Details (mostly in chronological order - newest topmost): \u00b6 Added DHCP auto-configuration for Network Manager (Ubuntu 20.04 Desktop): While ReaR supports DHCP auto-detection during 'rear mkrescue' of some DHCP setups, the Network Manager flavor on Ubuntu 20.04 Desktop was not supported so DHCP for the recovery system was not auto-enabled there (issue #2427). OPALPBA (OUTPUT=RAWDISK): Workaround for EFI firmware glitch which prevents booting the real OS after unlocking SEDs. Symptom: Boot hangs when Grub hands over control to the Linux kernel. Seen on an HPE ML10Gen9 server. The workaround is to add and remove a UEFI 'next boot' entry (essentially a no-op) which should convince the EFI firmware to use the boot order to determine the effective boot entry for the next boot (issue #2425). Update default.conf: Describe LUKS_CRYPTSETUP_OPTIONS usage with some examples (issue #2389). Overhauled how SSH config files are parsed for 'IdentityFile' values to find (and remove) unprotected SSH keys in the recovery system. Now \"find ./etc/ssh\" ensures that SSH 'Include' config files e.g. in /etc/ssh/ssh_config.d/ are also parsed (issue #2421). Update default.conf: Describe usage of non-quoted globbing patterns like VAR+=( /directory/ ) versus quoted globbing patterns like VAR+=( '/directory/ ' ) and also describe how to prepend to an array in contrast to append to it (issue #2417). When creating md5sums of the files in the recovery system be safe against blanks or special characters in file names by using appropriate options for all commands in the pipe (issues #2407 #1372). Evaluate OUTPUT_LFTP_OPTIONS at the beginning of lftp operations. Before OUTPUT_LFTP_OPTIONS had been evaluated after connection to destination host was established which prohibited using OUTPUT_LFTP_OPTIONS also for connection specific settings. Now OUTPUT_LFTP_OPTIONS is moved to the beginning of lftp command before any other lftp command is executed (issue #2410). For BACKUP=BORG implemented pagination when selecting the Borg archive to restore from: During \"rear recover\" all Borg archives are shown. In case of a long list only the last items had been visble to the user. Now pagination happens with a configurable number of Borg archives, see BORGBACKUP_RESTORE_ARCHIVES_SHOW_MAX in default.conf (issue #2408). For BACKUP=BORG updated generated locale filename from \"rear.UTF-8\" to \"en_US.UTF-8\" (issue #2402). Use plain ${COPY_AS_IS[*]} instead of quoted \"${COPY_AS_IS[@]}\" in the tar command call that copies things into the recovery system to ensure \"things work as usually expected\" for any methods that are used to add elements to the COPY_AS_IS array and better explain in default.conf how COPY_AS_IS works, in particular that symlinks cannot be followed and that files or directories that contain blanks or other $IFS characters cannot be specified (issue #2405). For RAWDISK output add distribution-specific GRUB2 module 'linuxefi.mod' otherwise GRUB2 could not boot a UEFI rescue medium on Ubuntu 18.04 or 20.04 (issue #2419). ReaR was using hard-coded set of Grub2 modules for UEFI boot-loader. New GRUB2_MODULES_UEFI and GRUB2_MODULES_UEFI_LOAD config variables for installing GRUB2 as recovery system UEFI bootloader so that user can add or remove GRUB2 modules as needed (issues #2283 #2293 #2392). No longer load GRUB2 modules efi_gop and efi_uga in function create_grub2_cfg : In the create_grub2_cfg function in lib/bootloader-functions.sh do no longer enfore loading the GRUB2 modules efi_gop and efi_uga because loading only the module all_video is sufficient and fail-safe because moddep.lst contains \"all_video: efi_gop efi_uga\" (issue #2388). No longer load video_bochs and video_cirrus by the create_grub2_cfg function. In the create_grub2_cfg function in usr/share/rear/lib/bootloader-functions.sh that is used in case of UEFI to set up GRUB2 as bootloader for the recovery system do no longer let GRUB2 load the modules video_bochs and video_cirrus because those are not available as GRUB2 modules in case of UEFI (x86_64-efi) and the generic \"insmod all_video\" that is still there should be sufficient for GRUB2 (issue #2388). Allow to boot original system from Grub menu (UEFI): This change adds following: Possibility to boot original system for UEFI boot with OUTPUT=NETFS and OUTPUT=USB (similarly to non UEFI ReaR rescue system). Replaces grub-mkimage for building of Grub2 boot image for OUTPUT=USB with build_bootx86_efi() (grub-mkstandalone). Replaces separate Grub configuration for OUTPUT=USB with create_grub2_cfg(). Using build_bootx86_efi() and create_grub2_cfg() in OUTPUT=USB will unify process of Grub boot image creation with OUTPUT=NETFS. (issue #2326) Replace grub-mkimage with more sophisticated grub-mkstandalone when building GRUB2 image for using GRUB2 as recovery system UEFI bootloader (issue #2293). When transferring ReaR recovery system ISO, create also destination directory structure (including parents). This is useful because when destination directory structure does not exist (or is incomplete), Lftp puts files into first available directory in OUTPUT_URL scheme (issue #2401). Have CLONE_ALL_USERS_GROUPS=\"true\" by default and explain it in default.conf (issue #2345). New OUTPUT_LFTP_OPTIONS config variable for lftp custom parameters (issue #2384). Update 950_check_missing_programs.sh: When checking for required programs also test for \"basename program\" because when required programs are specified with absolute path those programs appears in the ReaR recovery system in /bin/ so testing their original path would falsely fail during \"rear recover\" (issue #2206). New prep/USB/ /350_safeguard_error_out.sh safeguard scripts to let \"rear mkrescue/mkbackup\" error out in case of false usage of OUTPUT=USB on non PC-compatible (non-i386/x86/x86_64) architectures because with OUTPUT=USB on those architectures the USB medium cannot be booted (for those architectures there are no scripts that install a bootloader) and documented that in the OUTPUT=USB section in default.conf (issues #2348 #2396). Error out for unsupported workflows in any case: Before init/default/050_check_rear_recover_mode.sh did only error out when in the recovery system an unsupported workflow should be run. Now it also errors out when on the normal/original system an unsupported workflow that is likely destructive (in particular recover layoutonly restoreonly finalizeonly and mountonly) should be run (issues #2387 #2395). Improve BorgBackup (short: Borg) integration into ReaR: Several improvements e.g. error handling, output to logfile etc. (issue #2382). In backup/NETFS/default/500_make_backup.sh add \"bs=1M\" to SPLIT_COMMAND=\"dd of=$backuparchive bs=1M\" to let 'dd' read and write up to 1MiB at a time to speed up things for example from only 500KiB/s (with the 'dd' default of 512 bytes) via a 100MBit network connection to about its full capacity (issue #2369). Error out during \"rear mkrescue/mkbackup\" when LUKS version 2 is used because LUKS version 2 is not suppported. When LUKS version 2 is used it fails at least to determine the hash value so we use an empty hash value as a simple test if gathering crypt information was successful and error out if not. (issues #2204 #2381) Auto-detect DHCP client with systemd-networkd plus completely overhauled and simplified code in prep/GNU/Linux/210_include_dhclient.sh with resulting simplification of skel/default/etc/scripts/system-setup.d/58-start-dhclient.sh (issue #2375). Filter out duplicate entries in COPY_AS_IS but keep the ordering of the elements i.e. only the first occurrence of an element is kept. Also remove duplicates in the copy_as_is_filelist_file with 'sort -u' because here the ordering does not matter. (issue #2377) Update 250_find_all_libs.sh: Removed unreliably working code that intends to filter out duplicates in the LIBS and COPS_AS_IS arrays via echo \"${ARRAY[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ' that fails when array elements contain spaces so better code should be used e.g. like printf '%s\\n' \"${ARRAY[@]}\" | awk '!seen[$0]++' but filtering out duplicates is not needed and by the way cleaned up the whole script a bit. (issue #2377) Skip Longhorn Engine replica devices (issue #2373). Update 400_prep_yum.sh: For BACKUP=YUM error out if BACKUP_PROG_CRYPT_ENABLED is set because BACKUP=YUM does not support backup encryption (issue #2374). Fail-safe patching of etc/ssh/sshd_config in the recovery system to ensure the needed ReaR settings/overrides actually apply. For example if etc/ssh/sshd_config contains a Match section at the end of the file e.g. appending \"PermitRootLogin yes\" will not be effective as a global setting but only in the Match section. Therefore now the needed ReaR settings are inserted at the beginning and all subsequent entries of that kind are disabled (commented out) to ensure that the ReaR global setting is the only one that is effective. (issue #2362) Run what was build/default/985_fix_broken_links.sh now earlier as build/default/490_fix_broken_links.sh before files get modified in recovery system because otherwise e.g. if etc/ssh/sshd_config is a symbolic link build/default/500_ssh_setup.sh will fail to apply patches (issue #2360). Use simpler and more fail-safe syntax ARRAY+=( additional elements ) everywhere (issue #2364). Update 58-start-dhclient.sh: Fixed issue #2354. Added usr/share/rear/restore/OPALPBA/ directory to pass the test for $SHARE_DIR/restore/$BACKUP in prep/default/035_valid_backup_methods.sh because the mkopalpba workflow uses the nonexistent BACKUP method OPALPBA to create a PBA image (issue #2351). Fix OPALPBA: Could not change password on multiple SEDs at once. \"rear opaladmin changePW\" (when used without any extra argument or with multiple arguments) is meant to change the disk password on multiple self-encrypting drives in a single invocation. However, it stopped after successfully changing the password on the first drive and the password of subsequent drives had not been changed. (issue #2349) Update 035_valid_backup_methods.sh: Simplified prep/default/035_valid_backup_methods.sh to make it work more predictable and fail-safe (issue #2353). Have a hardcoded '-iso-level 3' option in output/ISO/Linux-ppc64le/820_create_iso_image.sh because it is also hardcoded in output/ISO/Linux-i386/820_create_iso_image.sh and it seems to also work in general on PPC64LE architecture (issue #2344). Update default.conf: Adapt the explanation in default.conf how ISO_MAX_SIZE works (issue #2347). Cleaned up and enhanced the ISO_MAX_SIZE implementation in backup/NETFS/default/500_make_backup.sh to make it in particular more safe against erroneous settings of the ISO_MAX_SIZE variable (issue #2344). Added required NFS users for proper rpcbind startup: Usually 'rpcuser' is used but 'rpc' is used in RHEL7.x and '_rpc' is used in Debian 10 (issues #2341 #2342 #2250) Cleaned up and enhanced 320_migrate_network_configuration_files.sh plus some bugfixes where the old code presumably did not work. (issues #2310 #2313 #2312) Update 890_finish_checks.sh: In the WARNING message at the end of \"rear recover\" when no bootloader could be installed also mention usr/share/rear/finalize/Linux-ppc64le/660_install_grub2.sh as an example script how one could install a bootloader on POWER architecture. Furthermore since finalize/default/110_bind_mount_proc_sys_dev_run.sh it is no longer needed to manually mount /proc. (issues #2339 #2045) Update 095_exclude_non_essential_files.sh: Added also /usr/lib/grub2 and /usr/share/grub2 to COPY_AS_IS_EXCLUDE because since openSUSE Leap 15.1 things were moved from /usr/lib/grub2/ to /usr/share/grub2/ (issue #2338). Update 270_create_grub2_efi_bootloader.sh: Test for Grub 2 EFI components directories /usr/lib/grub/x86_64-efi and now also for /usr/lib/grub2/x86_64-efi or /usr/share/grub2/x86_64-efi because since openSUSE Leap 15.1 things were moved from /usr/lib/grub2/ to /usr/share/grub2/ (issue #2338). Update uefi-functions.sh: Use /usr/ /grub /x86_64-efi/partmap.lst instead of /usr/lib/grub*/x86_64-efi/partmap.lst because since openSUSE Leap 15.1 things were moved from /usr/lib/grub2/ to /usr/share/grub2/ (issue #2338). Update 630_install_grub.sh and 650_install_elilo.sh: Show the actual missing directory in the Error message (issue #2337). Moved backup/default/005_valid_backup_methods.sh to prep/default/035_valid_backup_methods.sh to also check for valid backup methods during \"rear mkrescue\" because for most external backup methods only \"rear mkrescue\" is used, cf. the section \"BACKUP SOFTWARE INTEGRATION\" in 'man rear' (issue #2337). Changes to Data Protector branding, adjustment required to support the new Data Protector 10.x agent with Secure Socket Communication. Fixed some problems related to SessionID format and problems with object names like host type vs. file system backup (issue #2335). Hard-coded root home directory string (\"/root\") was replaced with $ROOT_HOME_DIR that is the eeal home directory of root user (issue #2334). Make USE_DHCLIENT and USE_STATIC_NETWORKING more fail-safe in ReaR recovery system (issue #2325). For FDR backups, if the path for $FDRUPSTREAM_DATA_PATH does not exist, then create it. This change is FDR specific for s390 and is only in effect if ZVM_NAMING is \"Y\" (issue #2320). Overhauled rescue/default/010_merge_skeletons.sh: Made 010_merge_skeletons.sh behave more reliably. Now it errors out when things really went wrong. Now is is also supported that both a $skel_dir directory (e.g. usr/share/rear/skel/default/) plus a $skel_dir.tar.gz (e.g. usr/share/rear/skel/default.tar.gz) exist and then both get copied into the recovery system, first the directory and then the tar.gz so that via the tar.gz files from the $skel_dir directory could be overwritten if needed. (issues #2307 #2317) Added $FDRUPSTREAM_DATA_PATH/rear to $COPY_AS_IS_EXCLUDE_FDRUPSTREAM (issue #2318). Added documentation about possible (dirty) workarounds for needed bind9-export libraries for CentOS 7.7 and 8.0 which is somewhat related to Rubrik-CDM (issues #2266 #2284). Enhanced recovery system BIOS boot default settings for USB and ISO: For OUTPUT=ISO the user can now explicitly specify what to boot by default when booting the ISO on BIOS systems via ISO_DEFAULT=\"boothd0\" to boot from the first disk and ISO_DEFAULT=\"boothd1\" to boot from the second disk. For OUTPUT=USB the user can now explicitly specify what to boot by default when booting the disk on BIOS systems via USB_BIOS_BOOT_DEFAULT=\"boothd0\" to boot from the first disk. The default USB_BIOS_BOOT_DEFAULT=\"\" boots the second disk. (issues #2276 #2303) Remove outdated /root/rear-DATE-TIMESTAMP.log symlinks. Before creating the current symlink to the current log file test all files that match the file name pattern of such symlinks and remove those already existing (old) symlinks where its now outdated symlink target is the current log file (issue #2301). Initial preliminary first basic support for IBM Z architecture \"s390x\" (a.k.a. \"z Systems\", formerly \"System/390\", simply called \"s390\") : Currently primarily for Red Hat and SUSE enterprise systems so that interested users can try out early how far things work in their particular IBM Z environments and provide feedback preferably plus needed fixes, adaptions, and enhancements to ReaR upstream at https://github.com/rear/rear (issues #2137 #2142). Improved 'is_multipath_path' function to be more fail safe that now tests (via \"multipath -l\" output) if multipath is used. Additionally have 'lsblk' output as disklayout.conf header comments to make it easier to understand the values in the subsequent entries. Furthermore added 'xdd' to the PROGS array because sometimes a tool to display binary files is required in the recovery system. (issue #2298). Error out during \"rear mkrescue\" in case of insufficient LVM tools: Overhauled layout/save/GNU/Linux/220_lvm_layout.sh where now the exit code of the \"lvm ...\" calls are checked and it errors out if one fails in particular to avoid that entries in disklayout.conf are missing or broken when too old LVM tools are used that do not support the needed options of those \"lvm ...\" calls. Also in layout/save/default/950_verify_disklayout_file.sh a simple test was added to verify that the 'lvm...' entries in disklayout.conf look syntactically correct. Furthermore in 06-layout-configuration.adoc in the \"Disk layout file syntax\" section the exact same syntax for the \"lvm...\" entries is now listed as the headers of the \"lvm...\" entries in disklayout.conf are. (issues #2259 #2291) Fixed missing delete_dummy_partitions_and_resize_real_ones calls: Use same code as for disks for multipath devices (these are just regular disks), including MBR erasing and partition creation and cleanup : create_multipath() cannot call create_disk() because create_disk() verifies that the device is a block device, which it isn't with multipath because it's a symlink to a device mapper instead. Make sure new code handling re-creation of partitions and cleanup is used because Software Raid can have partitions since these are virtual disks. (issue #2281) Moved 'route' back from REQUIRED_PROGS to PROGS. ReaR uses 'ip route' everywhere so 'route' is not actually required. As 'route' is no longer always installed nowadays, having it in REQUIRED_PROGS lets ReaR falsely error out on such systems (issues #1961 #1652). Update 990_verify_rootfs.sh: Use a FDRUPSTREAM-specific LD_LIBRARY_PATH to find FDR libraries (issue #2296). Do not run 'ldd' on untrusted files to mitigate possible ldd security issues because some versions of ldd may directly execute the file (see \"man ldd\") which happens as user 'root' during \"rear mkrescue\". The new TRUSTED_FILE_OWNERS user config array contains user names that are trusted owners of files where RequiredSharedObjects calls ldd (cf. COPY_AS_IS) and where a ldd test is run inside the recovery system that tests all binaries for 'not found' libraries. Furthermore use '2>>/dev/$DISPENSABLE_OUTPUT_DEV' at more places to avoid that the \"rear -D mkrescue\" log file size would grow from about 5 MiB to about 17 MiB so that now that log file size even shrinked to about 2 MiB. (issue #2279) Initial draft implementation of the new 'mountonly' workflow to use ReaR as rescue system, therein mount the filesystems of the target system so that one can manually repair it. This is described in doc/user-guide/04-scenarios.adoc (issue #2247). Feature RAWDISK and OPALPBA improvements: RAWDISK: include additional Grub modules from /boot/grub (and /boot/grub2) which had formerly been missing. OPALPBA: improve Plymouth boot animation on Ubuntu, provide integration capabilities for other distros. RAWDISK: add support for distros which use 'grub2' naming. (issue #2275) Improved check for missing libraries in 990_verify_rootfs.sh so that now also libraries are checked that are no executables plus skipped the ldd test for firmware files (issue #2279). Update default.conf: More explanatory comment in default.conf how COPY_AS_IS versus LIBS, PROGS, and REQUIRED_PROGS are meant to be used (issue #2278). Accommodate logs from multiple FDR/Upstream services. Users may run multiple FDR/Upstream services on a single machine. This code change allows ReaR to copy FDR/Upstream logs from the recovery environment to the restored system for all running services. Previously the code was expecting to find only one set of logs and reports in the FDR/Upstream installation directory. For several years now, logs and reports have been stored in a new location ($FDRUPSTREAM_DATA_PATH), so we check here instead (issue #2251). Update format-workflow.sh: Set EXIT_FAIL_MESSAGE=0 before exiting in \"rear format -- --help\" to avoid the \"rear format failed, check ...rear...log for details\" message that is pointless in this case. Added alternative for 'poweroff.com' that is 'poweroff.c32' on RHEL8 (issue #2238). Removed unnecessary line that sets NSRSERVER in layout/save/NSR/default/650_check_iso_recoverable.sh which prevented setting NSRSERVER in local.conf (issue #2162). Enhanced default AUTOEXCLUDE_PATH=( /media /run /mnt /tmp ) plus explanatory comment in default.conf how AUTOEXCLUDE_PATH works (issues #2239 #2261). Use is_true() for AUTOEXCLUDE_MULTIPATH and cleanup of the get_partition_number function that now errors out with BugError in cases that are likely a bug in ReaR (issues #2245 #2260). Do not abort in case of invalid user input but retry if possible. When input values can be (syntactically) validated there is now a retry loop until the user provided valid input (or intentionally aborts) except those cases where it was not possible to implement validation when it is unknown what is valid for third-party tools (issue #2253). Removed '2>/dev/null' redirection where possible: Some general cleanup for ReaR 2.6. in all scripts by removing '2>/dev/null' where it makes sense and replacing '&>/dev/null' by '1>/dev/null' where it makes sense or also removing '&>/dev/null' where that seems to be better (issue #1395). By the way verify/TSM/default/390_request_point_in_time_restore_parameters.sh and verify/NBU/default/390_request_point_in_time_restore_parameters.sh have been somewhat overhauled but both scripts still abort 'rear recover' when the user did an invalid date or time input (issue #2253). Fix including of multipath disks in backup: The AUTOEXCLUDE_DISKS logic traverses filesystems and tries to determine the associated underlying disks that should be kept. When having a filesystem fs:/A that is present on a multipath device MP and the root filesystem fs:/ that is present on a normal disk D, the code first established that fs:/A depends on fs:/ resulting in marking D as used and then short-circuited processing of multipath devices. This resulted in MP not being considered as a used device and removed from the backup. The problem is fxed by removing the short-circuit logic in find_disk_and_multipath() so multipath devices get processed too unless AUTOEXCLUDE_MULTIPATH is true (issue #2236). Improve handling of partition label type for multipath disks: When recording information about a multipath disk, ReaR did not store information about its partition label type in the 'multipath' entry in disklayout.conf. The recovery code tried to automatically detect the label type using a heuristic that depends on GPT partition names. The logic would incorrectly detect the device as having the MBR label type instead of GPT if one of the partition names was exactly \"primary\", \"extended\" or \"logical\". The problem is solved by explicitly storing the partition label type for multipath devices (same as is already done for normal disks) so that the syntax of the 'multipath' entries in disklayout.conf is changed and that new syntax is now documented in doc/user-guide/06-layout-configuration.adoc The recovery code is accordingly updated to utilize this information (issue #2234). In doc/user-guide/16-Rubrik-CDM.adoc updated links to SUSE documentation: Replaced the outdated link https://www.suse.com/documentation/sle-ha-12/book_sleha/data/cha_ha_rear.html that gets redirected to a not really helpful standard fallback page by the currently valid URL for the most recent SLE-HA-15-SP1 https://documentation.suse.com/sle-ha/15-SP1/html/SLE-HA-all/cha-ha-rear.html because meanwhile the SUSE documentation was moved to its own server. The more general and more comprehensive documentation URL https://en.opensuse.org/SDB:Disaster_Recovery is kept and listed topmost (issue #2255). Added explanatory comments to default.conf about backup restore that may fail for things like BACKUP_PROG_COMPRESS_OPTIONS=(\"--zstd\") due to missing zstd binaries in the ReaR recovery system probably also for --lzip --lzma --lzop (issue #2241). New BACKUP=CDM method for Rubrik Cloud Data Management (CDM) see doc/user-guide/16-Rubrik-CDM.adoc (issues #2248 #2249). In verify/NETFS/default/050_start_required_nfs_daemons.sh all kind of '2>/dev/null' (i.e. also '&>/dev/null') are removed (so that '&>/dev/null' is replaced by '1>/dev/null') because in general '2>/dev/null' is unhelpful because it needlessly suppresses error messages in the log that would be helpful to see when something fails (issues #2250 #1395). Update 06-layout-configuration.adoc: Changed section title from \"Including/Excluding components\" to only \"Excluding components\". The latter avoids possible misunderstanding that there would be a config variable to explicitly include something but \"including\" here describes only to disable autoecludes (issue #2229). Update default.conf: At AUTOEXCLUDE_DISKS removed the comment Explicitly excluding/including devices is generally a safer option because it is not acually helpful and even misleading because there is currently no config variable to explicitly include devices (issue #2229). Do not keep the build dir when ReaR is run noninteractively by additional special values for the KEEP_BUILD_DIR config variable, see its desctiption in default.conf (issue #2218). Fix LVM2 thin pool recreation logic / use of vgcfgrestore is broken: Removing forcibly (with '--force' passed twice) seems to work for now. But our use of vgcfgrestore is probably not appropriate at all. It works by chance. Typically, it works only for Linear volumes, and won't probably for Caches and Raid hierarchies or when there are existing Snapshots on the system. The only proper solution is perhaps stop relying on vgcfgrestore at all, but then we are not capable of restoring volume groups and logical volumes with all properties from original system (issue #2222). Use mountpoint instead of mount | grep (issue #2225). Updated default.conf: Replaced ARRAY=( \"${ARRAY[@]}\" additional elements ) with simpler and more fail safe ARRAY+=( additional elements ) (related to issues #2223 #2220). Append to the CLONE_USERS and CLONE_GROUPS arrays by using += instead of expanding the previous value to an empty element which then causes problems later (issues #2223 #699). Update 900_clone_users_and_groups.sh: Skip empty user and group values (issue #2220). New use-case for BLOCKCLONE backup method for complex LUKS-encrypted filesystems by usinng the \"multiple backups\" approach with a second BLOCKCLONE phase with a dd image that contains the encrypted filesystem where unmounting the encrypted filesystem before creating its image and before restoring it has to be done via the new config variable BLOCKCLONE_TRY_UNMOUNT (issue #2200). Fixed when ReaR does not detect an uncompressed kernel that is named 'vmlinux' (instead of 'vmlinuz'). Added $BACKUP_OPTIONS to the line with mount_url in 800_copy_to_tftp.sh and 810_create_pxelinux_cfg.sh otherwise in case of OUTPUT=PXE mounting the NFS will fail. UEFI: Search for Grub2 modules in /usr/lib/grub /x86_64-efi and not in /boot. On Fedora and RHEL systems, Grub2 UEFI modules live in /usr/lib/grub /x86_64-efi, not /boot, unless grub2-install is executed, but executing this tool is not needed with UEFI. On SUSE systems, Grub2 UEFI modules also live in /usr/lib/grub /x86_64-efi but there is also a copy in /boot, so it's not needed searching in /boot at all. Additionally, only UEFI modules should be looked for, so /boot cannot be searched but only /boot/grub2/x86_64-efi (similarly /usr/lib/grub /x86_64-efi, not just /usr/lib/grub*), otherwise we could get some false positives on dual boot systems (UEFI + Legacy), since modules for Legacy will also match, which is wrong (issues #2199 #2001). RAWDISK and TCG Opal 2 Self-Encrypting Disks: Add Secure Boot support (issue #2166). Avoid that disklayout.conf contains duplicate 'lvmvol' lines: Create the 'lvmvol' lines commented out when multiple segments exist for a given LV. This is not an issue unless Migration Mode is used. In such case, using 'lvcreate' commands already does best effort and loses LV information (issues #2194 #2187). Additionally do not overload the kval variable (that is intended for passing options to lvcreate) by adding extra keys to it, which are not supported by lvcreate. Introduce another variable infokval for this purpose and print those unsupported and purely informational keys only in comments (issue #2196). Apply layout mappings also to other relevant files via layout/prepare/default/320_apply_mappings.sh In migration mode apply the disk layout mappings not only to disklayout.conf but also to other files that are also used to migrate the disk layout, namely VAR_DIR/layout/config/df.txt and /etc/rear/rescue.conf Additionally re-read the BTRFS_SUBVOLUME_SLES_SETUP variable from /etc/rear/rescue.conf because its value could have been migrated to a new value (issue #2181). In the function apply_layout_mappings (therein in its \"step 3\") treat leftover temporary replacement words (like _REAR1_ ) as an error only if they are in a non-comment line (issue #2183). When 420_autoresize_last_partitions.sh resizes the last partition on a GPT disk it leaves 33 LBA blocks at the end of the disk so that 420_autoresize_last_partitions.sh produces a fully correct disklayout.conf file where no further automated adjustments by a subsequent script like 100_include_partition_code.sh are done (issue #2182). Error out when DHCLIENT_BIN and DHCLIENT6_BIN are empty and USE_DHCLIENT is set (issue #2184). In build/default/990_verify_rootfs.sh skip the ldd test for kernel modules because in general running ldd on kernel modules does not make sense and sometimes running ldd on kernel modules causes needless errors because sometimes that segfaults (issue #2177). Bacula: Fixed 'bconsole' prompt not displaying at all when doing a recover (issue #2173). Fixed that the EFI Boot Manager cannot be installed when the system has a NVMe SSD, because the device name is resolved as /dev/nvme0n1p rather than /dev/nvme0n1 so for NVMe devices the trailing 'p' in the Disk value as in /dev/nvme0n1p that is derived from /dev/nvme0n1p1 needs to be stripped to get /dev/nvme0n1 (issues #2160 #1564). Changed double quotes (\") to single quotes(') in documentation related to BORG_PASSPHRASE variable. Double quotes will not avoid expanding of variable when '$' sign is used inside pass phrase string, which can lead to unsuccessful opening of Borg archive (issue #2205). More fail safe BACKUP_PROG_CRYPT_KEY handling: Use double quotes \"$BACKUP_PROG_CRYPT_KEY\" so that the BACKUP_PROG_CRYPT_KEY value can contain spaces. Escape special regexp characters in the BACKUP_PROG_CRYPT_KEY value when it is used as a regexp in grep or sed. Use single quotes BACKUP_PROG_CRYPT_KEY='my_passphrase' in the documentation examples so that the BACKUP_PROG_CRYPT_KEY value can contain special characters (except single quote). Recommend in default.conf to not use special characters in the BACKUP_PROG_CRYPT_KEY value to be to be on the safe side against things breaking in unexpected weird ways when certain code in ReaR is not yet safe against arbitrary special characters in values (issues #2157 #1372). Avoid that the BACKUP_PROG_CRYPT_KEY value appears in a log file in particular when 'rear' is run in debugscript mode where 'set -x' is set by redirecting STDERR to /dev/null for those confidential commands that use the BACKUP_PROG_CRYPT_KEY value, cf. the comment of the UserInput function how to keep things confidential when 'rear' is run in debugscript mode (issues #2155 #2156). Fix when recovery fails on LUKS-encrypted filesystem using simple password because only the first 2 parameters in /etc/crypttab are mandatory (issue #2151). Generic enhancements for IBM Z (s390) to support 'dasd' disks and SUSE specific enhancements to install during \"rear recover\" the special GRUB2 plus ZIPL bootloader on SLES12 and later via the new finalize/SUSE_LINUX/s390/660_install_grub2_and_zipl.sh script (issues #2137 #2150). Cleanup of the OUTPUT=RAMDISK code. Overhauled 900_copy_ramdisk.sh as architecture independent new script output/RAMDISK/default/900_copy_ramdisk.sh that replaces output/RAMDISK/Linux-i386/900_copy_ramdisk.sh and overhauled conf/templates/RESULT_usage_RAMDISK.txt plus better description of OUTPUT=RAMDISK and RESULT_FILES in default.conf (issue #2148). Enable creation of non consecutive partitions (issues #2081 #1793 #1771 #1681). The new SUSE-specific script finalize/SUSE_LINUX/i386/675_install_shim.sh calls 'shim-install' inside chroot on the recreated target system and uses boot/grub2/grub.cfg as input to recreate two needed (identical) EFI files /boot/grub2/x86_64-efi/core.efi and /boot/efi/EFI/opensuse/grubx64.efi (issue #2116). Fixed that output/default/950_copy_result_files.sh falsely errors out when an output method OUTPUT=FOO is used where there is no matching usr/share/rear/conf/templates/RESULT_usage_FOO.txt because when it is missing it is no sufficient reason to error out. Furthermore now 950_copy_result_files.sh is skipped when RESULT_FILES is empty because that means there is no actual output and then it is not needed to only copy VERSION README and LOGFILE to the output location (issue #2147). System and Software Requirements \u00b6 Relax-and-Recover works on GNU/Linux kernel with version 2.6 and higher. For lower kernel versions Relax-and-Recover cannot be used, and for these systems, mkcdrec is still a good alternative. As Relax-and-Recover has been solely written in the bash language we need the bash shell which is standard available on all GNU/Linux based systems. The default backup program Relax-and-Recover uses is GNU/tar which is also standard available. Relax-and-Recover is known to work well on x86, x86_64 and ppc64(le) based architectures. Relax-and-Recover has also been ported to ia64 and arm architectures, but these are less tested. Use the ' rear validate ' command after every successful DR test please and mail us the results. Choosing the best compression algorithm \u00b6 The default backup program with Relax-and-Recover is ( BACKUP_PROG=tar ) GNU tar and the default compression used with tar is gzip . However, is using gzip the best choice? We have done some tests and published the results. See Relax-and-Recover compression tests Support \u00b6 Relax-and-Recover (ReaR) is an Open Source project under GPL v3 license which means it is free to use and modify. However, the creators of ReaR have spend many, many hours in development and support. We will only give free of charge support in our free time (and when work/home balance allows it). That does not mean we let our user basis in the cold as we do deliver support as a service (not free of charge). Supported and Unsupported Operating Systems \u00b6 We try to keep our wiki page Test Matrix rear 2.6 up-to-date with feedback we receive from the community. ReaR-2.6 is supported on the following Linux based operating systems: Fedora 29, 30, 31, and 32 RHEL 6, 7, and 8 CentOS 6, 7, and 8 Scientific Linux 6 and 7 SLES 12 and 15 openSUSE Leap 15.x Debian 8, and 9 Ubuntu 16, 17, and 18 ReaR-2.6 dropped official support for the following Linux based operating systems: Fedora < 29 RHEL < 6 CentOS < 6 Scientific Linux < 6 SLES < 12 openSUSE Leap 42.x and before (i.e. openSUSE <= 13) openSUSE Tumbleweed Debian < 8 Ubuntu < 16 Usually ReaR-2.6 should also work on newer versions of the above listed supported Linux based operating systems but sometimes arbitrary failures can happen when software that is used by ReaR (like partitioning tools, filesystem tools, bootloader tools, ISO image creating tools, networking tools, and so on) changes in not fully backward compatible ways or when there are innovations of the basic system (like kernel, storage, bootloader, init, networking, and so on) that are not yet supported by ReaR. In theory ReaR-2.6 should work on openSUSE Tumbleweed but in practice arbitrary failures could happen at any time because the Tumbleweed distribution is a pure rolling release version of openSUSE containing the latest stable versions of all software (cf. https://en.opensuse.org/Portal:Tumbleweed) so arbitrary changes of any software are possible at any time that could arbitrarily break how ReaR works. ReaR-2.6 may still work for SLES 11 and openSUSE Leap 42.x or even earlier openSUSE versions but it is no longer sufficiently well tested there so arbitrary regressions could appear. ReaR 2.6, ReaR-2.5, and ReaR-2.4 (and probably also some earlier versions) are known to no longer work reasonably well for the following Linux based operating systems: RHEL 5 (and probably also CentOS 5): See issue #1766 SLES 9 and 10: See issue #1842 If you require support for unsupported Linux operating systems you must acquire a ReaR support contract . Requests to port ReaR to another operating system (not Linux) can only be achieved with serious sponsoring. Supported and Unsupported Architectures \u00b6 ReaR-2.6 is supported on: Intel x86 type of processors AMD x86 type of processors PPC64 processors PPC64LE processors ReaR-2.6 may or may not work on: Intel Itanium processors ARM type of processors IBM Z \"s390x\" type of processors ReaR-2.6 does not support: old PPC (32bit) processors If you feel the need to get a fully functional ReaR working on one of the above mentioned type of processors please buy consultancy from one of our official developers. Supported ReaR versions \u00b6 ReaR has a long history (since 2006) and we cannot support all released versions. If you have a problem we urge you to install the latest stable ReaR version or the development version (available on GitHub) before submitting an issue. However, we do understand that it is not always possible to install on hundreds of systems the latest version so we are willing to support previous versions of ReaR if you buy a support contract. Why do we change our policy? We cannot handle the big support requests anymore and we must give paid projects priority, therefore, we urge our customers to buy a support contract for one or more systems. You buy time with our core developers.","title":"Release Notes ReaR 2.6"},{"location":"releasenotes/rear26.html#release_notes_for_relax-and-recover_version_26","text":"This document contains the release notes for the open source project Relax-and-Recover. Relax-and-Recover website GitHub project","title":"Release Notes for Relax-and-Recover version 2.6"},{"location":"releasenotes/rear26.html#product_features","text":"The following features are supported by the most recent releases of Relax-and-Recover. Anything labeled as ( New ) was added as the most recent release. New functionality for previous releases can be seen in the next chapter that details each release. The most recent release of Relax-and-Recover is supported on most GNU/Linux based systems with kernel 2.6 or higher. It provides the following functionality: Hot maintenance capability. A recovery/rescue image can be made online while the system is running Command line interface. Relax-and-Recover does not require a graphical interface to run, neither in creation mode, nor in recovery mode (console is enough) Support included for most common file systems, such as ext2, ext3, and ext4. Other filesystems like reiserfs, jfs, xfs, and btrfs are also implemented, but are less tested. (Feedback is appreciated) Selected Hardware RAID and (eg. HP SmartArray) and mirroring solutions (eg. DRBD) are supported NVME and mmcblk disks are supported LVM root volumes are supported Multipath support for SAN storage UEFI support (including UEFI USB booting) Integrates with internal backup programs such as: GNU tar (BACKUP=NETFS, BACKUP_PROG=tar) GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=incremental, FULLBACKUPDAY=\"Mon\") for using incremental backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=differential, FULLBACKUPDAY=\"Mon\") for using differential backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar with openssl encryption (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_PROG_CRYPT_ENABLED=1) rsync on local devices (BACKUP=NETFS, BACKUP_PROG=rsync), such USB and local disks rsync over the network (BACKUP=RSYNC, BACKUP_PROG=rsync) Multiple backup methods ( read the documentation ) Any partition (e.g. a Windows partition) via BACKUP=BLOCKCLONE. See the documention about BLOCKCLONE BACKUP=ZYPPER is SLES12 only ( Experimental ) BACKUP=YUM is for RedHat architectures ony ( Experimental ) Integrates with external backup solutions such as: Tivoli Storage Manager (BACKUP=TSM) Data Protector (BACKUP=DP) Symantec NetBackup (BACKUP=NBU) Galaxy 5, 6, and 7 (BACKUP=GALAXY) Galaxy 10 [Commvault Simpana] (BACKUP=GALAXY10) Bacula (BACKUP=BACULA) Bareos (BACKUP=BAREOS) (A fork of Bacula) Rsync Backup Made Easy (BACKUP=RBME) Duplicity/Duply (BACKUP=DUPLICITY) EMC Networker, also known as Legato (BACKUP=NSR) EMC Avamar (BACKUP=AVA) SEP Sesam (BACKUP=SESAM) FDR/Upstream (BACKUP=FDRUPSTREAM) Novastor NovaBACKUP DC (BACKUP=NBKDC) Borg Backup (BACKUP=BORG) Rubrik Cloud Data Management (BACKUP=CDM) ( New ) Integrates with Disaster Recovery Linux Manager (DRLM) Udev support (except for some really ancient udev versions) which is the base for many important features: kernel drivers for network cards and storage adapters are loaded via udev deal with network persistent names in udev rules firmware loading persistent storage device names (though Relax-and-Recover does nothing with this) Systemd support for the more recent Linux distributions System migration and reconfiguration ('MIGRATION_MODE') facilitate recovery on hardware, that is not the same as the original system network and storage drivers are adjusted map hard disks if they do not match (e.g. hda -> sda) remap network MAC addresses use another IP address, or using dhcp via templates or from kernel command line rebuild the initial ramdisk if needed (for new storage drivers) migration to SAN storaged Support backup software: Bacula, both locally attached tapes (with bextract) and network-based backups. Also, in combination with OBDR tapes. Create OBDR tapes with method mkbackup and put the backup onto the tape to have a single-tape bootable recovery solution Label the OBDR tape with the method format to avoid accidental overwrites with OBDR Create bootable disk (eSATA, USB ...) medium with the backup included: BACKUP_URL=usb:///dev/device Together with OUTPUT=USB we have a complete solution on hard disks (booting of it and restoring data). DHCP client support (IPv4 and IPv6). Dhcp client activation can be forced via the variable USE_DHCLIENT=yes (define in /etc/rear/local.conf ). It is also possible to force DHCP at boot time with kernel option dhcp USE_STATIC_NETWORKING=y , will cause statically configured network settings to be applied even when USE_DHCLIENT is in effect Save layout and compare layouts for automation of making Relax-and-Recover snapshots (checklayout option) External USB booting uses extlinux (instead of syslinux), and therefore, the USB disk must first be formatted with an ext2, ext3, ext4 or btrfs based file system VLAN tagging, teaming and bridge support Add timestamp of ReaR run with rc code to the syslog or messages file; sending mail report is also possible The possibility to backup any partition (in particular a Windows partition) via the BACKUP type BLOCKCLONE Unattended ReaR recovery has been improved Improved security model related to SSH keys SSH_FILES='avoid_sensitive_files' (see details in /usr/share/rear/conf/default.conf ) SSH_UNPROTECTED_PRIVATE_KEYS='no' (see details in /usr/share/rear/conf/default.conf ) Note Features marked Experimental are prone to change with future releases.","title":"Product Features"},{"location":"releasenotes/rear26.html#rear_release_26_june_2020","text":"New features, bigger enhancements, and possibly backward incompatible changes: Initial preliminary first basic support for IBM Z architecture \"s390x\" (a.k.a. \"z Systems\", formerly \"System/390\", simply called \"s390\") : Currently primarily for Red Hat and SUSE enterprise systems so that interested users can try out early how far things work in their particular IBM Z environments and provide feedback preferably plus needed fixes, adaptions, and enhancements to ReaR upstream at https://github.com/rear/rear (issues #2137 #2142). New BACKUP=CDM method to support Rubrik Cloud Data Management (CDM): The Rubrik CDM backup and restore method for ReaR allows Rubrik CDM to perform bare metal recovery of Linux systems. It does this by including the Rubrik CDM RBS agent files in the ReaR recovery system so that during rear recover the Rubrik CDM RBS agent can be used to restore from Rubrik CDM (issue #2248). New use-case for BLOCKCLONE backup method with the \"multiple backups\" approach for a more complex LUKS setup with different passphrases or keys: The usual support for LUKS-encrypted filesystems means that during reare recover a new encrypted filesystem will be created with new encryption keys. To recover the exact LUKS setup including its keys from the original system it is now possible to use the \"multiple backups\" approach by first ignoring the encrypted filesystem during the \"base system\" phase, and then using a second BLOCKCLONE phase with a dd image that contains the encrypted filesystem. The new config variable BLOCKCLONE_TRY_UNMOUNT is needed here: It will try to unmount the encrypted filesystem before creating its image and before restoring it (issue #2200). Initial draft implementation of the new 'mountonly' workflow to use ReaR as rescue system, therein mount the filesystems of the target system so that one can manually repair it. This is described in doc/user-guide/04-scenarios.adoc (issue #2247). Enable creation of non consecutive partitions. parted is not capable of creating non-consecutive partitions. To still be able to do so, the trick consists in creating dummy partitions to fill the gaps between partition numbers. Allocation of these dummy partitions is done from the end of the target partition, because parted is not capable of resizing a partition from the beginning (issues #2081 #1793 #1771 #1681). Improved handling of partition label type for multipath disks plus including of multipath disks in backup (unless AUTOEXCLUDE_MULTIPATH is true). Now the partition label type for multipath devices (same as is already done for normal disks) is stored in 'multipath' entries in disklayout.conf so that the syntax of those entries changed and that new syntax is now documented in doc/user-guide/06-layout-configuration.adoc (issues #2234 #2236). The config variable WAIT_SECS default value was aligned with the USER_INPUT_TIMEOUT default value so that now the default timeout for user input is always 300 seconds. The former WAIT_SECS default value of 30 seconds was too short because the 'read -t' timeout interrupts ongoing user input. The timeout must be sufficiently long for the user to read and understand the possibly unexpected user input request message and then some more time to make a decision what to enter and finally even more time to enter the right value (issue #2257). Enhanced default AUTOEXCLUDE_PATH=( /media /run /mnt /tmp ) to automatically exclude temporarily mounted things (e.g. USB devices) because mountpoints for temporarily mounted things are usually sub-directories below /media /run (like /run/media) /mnt and /tmp (issue #2239). Now we have CLONE_ALL_USERS_GROUPS=\"true\" by default. See the explanation in default.conf what that means. (issue #2345) Replaced grub-mkimage with more sophisticated grub-mkstandalone when building GRUB2 image for using GRUB2 as recovery system UEFI bootloader (issue #2293).","title":"ReaR release 2.6 (June 2020)"},{"location":"releasenotes/rear26.html#details_mostly_in_chronological_order_-_newest_topmost","text":"Added DHCP auto-configuration for Network Manager (Ubuntu 20.04 Desktop): While ReaR supports DHCP auto-detection during 'rear mkrescue' of some DHCP setups, the Network Manager flavor on Ubuntu 20.04 Desktop was not supported so DHCP for the recovery system was not auto-enabled there (issue #2427). OPALPBA (OUTPUT=RAWDISK): Workaround for EFI firmware glitch which prevents booting the real OS after unlocking SEDs. Symptom: Boot hangs when Grub hands over control to the Linux kernel. Seen on an HPE ML10Gen9 server. The workaround is to add and remove a UEFI 'next boot' entry (essentially a no-op) which should convince the EFI firmware to use the boot order to determine the effective boot entry for the next boot (issue #2425). Update default.conf: Describe LUKS_CRYPTSETUP_OPTIONS usage with some examples (issue #2389). Overhauled how SSH config files are parsed for 'IdentityFile' values to find (and remove) unprotected SSH keys in the recovery system. Now \"find ./etc/ssh\" ensures that SSH 'Include' config files e.g. in /etc/ssh/ssh_config.d/ are also parsed (issue #2421). Update default.conf: Describe usage of non-quoted globbing patterns like VAR+=( /directory/ ) versus quoted globbing patterns like VAR+=( '/directory/ ' ) and also describe how to prepend to an array in contrast to append to it (issue #2417). When creating md5sums of the files in the recovery system be safe against blanks or special characters in file names by using appropriate options for all commands in the pipe (issues #2407 #1372). Evaluate OUTPUT_LFTP_OPTIONS at the beginning of lftp operations. Before OUTPUT_LFTP_OPTIONS had been evaluated after connection to destination host was established which prohibited using OUTPUT_LFTP_OPTIONS also for connection specific settings. Now OUTPUT_LFTP_OPTIONS is moved to the beginning of lftp command before any other lftp command is executed (issue #2410). For BACKUP=BORG implemented pagination when selecting the Borg archive to restore from: During \"rear recover\" all Borg archives are shown. In case of a long list only the last items had been visble to the user. Now pagination happens with a configurable number of Borg archives, see BORGBACKUP_RESTORE_ARCHIVES_SHOW_MAX in default.conf (issue #2408). For BACKUP=BORG updated generated locale filename from \"rear.UTF-8\" to \"en_US.UTF-8\" (issue #2402). Use plain ${COPY_AS_IS[*]} instead of quoted \"${COPY_AS_IS[@]}\" in the tar command call that copies things into the recovery system to ensure \"things work as usually expected\" for any methods that are used to add elements to the COPY_AS_IS array and better explain in default.conf how COPY_AS_IS works, in particular that symlinks cannot be followed and that files or directories that contain blanks or other $IFS characters cannot be specified (issue #2405). For RAWDISK output add distribution-specific GRUB2 module 'linuxefi.mod' otherwise GRUB2 could not boot a UEFI rescue medium on Ubuntu 18.04 or 20.04 (issue #2419). ReaR was using hard-coded set of Grub2 modules for UEFI boot-loader. New GRUB2_MODULES_UEFI and GRUB2_MODULES_UEFI_LOAD config variables for installing GRUB2 as recovery system UEFI bootloader so that user can add or remove GRUB2 modules as needed (issues #2283 #2293 #2392). No longer load GRUB2 modules efi_gop and efi_uga in function create_grub2_cfg : In the create_grub2_cfg function in lib/bootloader-functions.sh do no longer enfore loading the GRUB2 modules efi_gop and efi_uga because loading only the module all_video is sufficient and fail-safe because moddep.lst contains \"all_video: efi_gop efi_uga\" (issue #2388). No longer load video_bochs and video_cirrus by the create_grub2_cfg function. In the create_grub2_cfg function in usr/share/rear/lib/bootloader-functions.sh that is used in case of UEFI to set up GRUB2 as bootloader for the recovery system do no longer let GRUB2 load the modules video_bochs and video_cirrus because those are not available as GRUB2 modules in case of UEFI (x86_64-efi) and the generic \"insmod all_video\" that is still there should be sufficient for GRUB2 (issue #2388). Allow to boot original system from Grub menu (UEFI): This change adds following: Possibility to boot original system for UEFI boot with OUTPUT=NETFS and OUTPUT=USB (similarly to non UEFI ReaR rescue system). Replaces grub-mkimage for building of Grub2 boot image for OUTPUT=USB with build_bootx86_efi() (grub-mkstandalone). Replaces separate Grub configuration for OUTPUT=USB with create_grub2_cfg(). Using build_bootx86_efi() and create_grub2_cfg() in OUTPUT=USB will unify process of Grub boot image creation with OUTPUT=NETFS. (issue #2326) Replace grub-mkimage with more sophisticated grub-mkstandalone when building GRUB2 image for using GRUB2 as recovery system UEFI bootloader (issue #2293). When transferring ReaR recovery system ISO, create also destination directory structure (including parents). This is useful because when destination directory structure does not exist (or is incomplete), Lftp puts files into first available directory in OUTPUT_URL scheme (issue #2401). Have CLONE_ALL_USERS_GROUPS=\"true\" by default and explain it in default.conf (issue #2345). New OUTPUT_LFTP_OPTIONS config variable for lftp custom parameters (issue #2384). Update 950_check_missing_programs.sh: When checking for required programs also test for \"basename program\" because when required programs are specified with absolute path those programs appears in the ReaR recovery system in /bin/ so testing their original path would falsely fail during \"rear recover\" (issue #2206). New prep/USB/ /350_safeguard_error_out.sh safeguard scripts to let \"rear mkrescue/mkbackup\" error out in case of false usage of OUTPUT=USB on non PC-compatible (non-i386/x86/x86_64) architectures because with OUTPUT=USB on those architectures the USB medium cannot be booted (for those architectures there are no scripts that install a bootloader) and documented that in the OUTPUT=USB section in default.conf (issues #2348 #2396). Error out for unsupported workflows in any case: Before init/default/050_check_rear_recover_mode.sh did only error out when in the recovery system an unsupported workflow should be run. Now it also errors out when on the normal/original system an unsupported workflow that is likely destructive (in particular recover layoutonly restoreonly finalizeonly and mountonly) should be run (issues #2387 #2395). Improve BorgBackup (short: Borg) integration into ReaR: Several improvements e.g. error handling, output to logfile etc. (issue #2382). In backup/NETFS/default/500_make_backup.sh add \"bs=1M\" to SPLIT_COMMAND=\"dd of=$backuparchive bs=1M\" to let 'dd' read and write up to 1MiB at a time to speed up things for example from only 500KiB/s (with the 'dd' default of 512 bytes) via a 100MBit network connection to about its full capacity (issue #2369). Error out during \"rear mkrescue/mkbackup\" when LUKS version 2 is used because LUKS version 2 is not suppported. When LUKS version 2 is used it fails at least to determine the hash value so we use an empty hash value as a simple test if gathering crypt information was successful and error out if not. (issues #2204 #2381) Auto-detect DHCP client with systemd-networkd plus completely overhauled and simplified code in prep/GNU/Linux/210_include_dhclient.sh with resulting simplification of skel/default/etc/scripts/system-setup.d/58-start-dhclient.sh (issue #2375). Filter out duplicate entries in COPY_AS_IS but keep the ordering of the elements i.e. only the first occurrence of an element is kept. Also remove duplicates in the copy_as_is_filelist_file with 'sort -u' because here the ordering does not matter. (issue #2377) Update 250_find_all_libs.sh: Removed unreliably working code that intends to filter out duplicates in the LIBS and COPS_AS_IS arrays via echo \"${ARRAY[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ' that fails when array elements contain spaces so better code should be used e.g. like printf '%s\\n' \"${ARRAY[@]}\" | awk '!seen[$0]++' but filtering out duplicates is not needed and by the way cleaned up the whole script a bit. (issue #2377) Skip Longhorn Engine replica devices (issue #2373). Update 400_prep_yum.sh: For BACKUP=YUM error out if BACKUP_PROG_CRYPT_ENABLED is set because BACKUP=YUM does not support backup encryption (issue #2374). Fail-safe patching of etc/ssh/sshd_config in the recovery system to ensure the needed ReaR settings/overrides actually apply. For example if etc/ssh/sshd_config contains a Match section at the end of the file e.g. appending \"PermitRootLogin yes\" will not be effective as a global setting but only in the Match section. Therefore now the needed ReaR settings are inserted at the beginning and all subsequent entries of that kind are disabled (commented out) to ensure that the ReaR global setting is the only one that is effective. (issue #2362) Run what was build/default/985_fix_broken_links.sh now earlier as build/default/490_fix_broken_links.sh before files get modified in recovery system because otherwise e.g. if etc/ssh/sshd_config is a symbolic link build/default/500_ssh_setup.sh will fail to apply patches (issue #2360). Use simpler and more fail-safe syntax ARRAY+=( additional elements ) everywhere (issue #2364). Update 58-start-dhclient.sh: Fixed issue #2354. Added usr/share/rear/restore/OPALPBA/ directory to pass the test for $SHARE_DIR/restore/$BACKUP in prep/default/035_valid_backup_methods.sh because the mkopalpba workflow uses the nonexistent BACKUP method OPALPBA to create a PBA image (issue #2351). Fix OPALPBA: Could not change password on multiple SEDs at once. \"rear opaladmin changePW\" (when used without any extra argument or with multiple arguments) is meant to change the disk password on multiple self-encrypting drives in a single invocation. However, it stopped after successfully changing the password on the first drive and the password of subsequent drives had not been changed. (issue #2349) Update 035_valid_backup_methods.sh: Simplified prep/default/035_valid_backup_methods.sh to make it work more predictable and fail-safe (issue #2353). Have a hardcoded '-iso-level 3' option in output/ISO/Linux-ppc64le/820_create_iso_image.sh because it is also hardcoded in output/ISO/Linux-i386/820_create_iso_image.sh and it seems to also work in general on PPC64LE architecture (issue #2344). Update default.conf: Adapt the explanation in default.conf how ISO_MAX_SIZE works (issue #2347). Cleaned up and enhanced the ISO_MAX_SIZE implementation in backup/NETFS/default/500_make_backup.sh to make it in particular more safe against erroneous settings of the ISO_MAX_SIZE variable (issue #2344). Added required NFS users for proper rpcbind startup: Usually 'rpcuser' is used but 'rpc' is used in RHEL7.x and '_rpc' is used in Debian 10 (issues #2341 #2342 #2250) Cleaned up and enhanced 320_migrate_network_configuration_files.sh plus some bugfixes where the old code presumably did not work. (issues #2310 #2313 #2312) Update 890_finish_checks.sh: In the WARNING message at the end of \"rear recover\" when no bootloader could be installed also mention usr/share/rear/finalize/Linux-ppc64le/660_install_grub2.sh as an example script how one could install a bootloader on POWER architecture. Furthermore since finalize/default/110_bind_mount_proc_sys_dev_run.sh it is no longer needed to manually mount /proc. (issues #2339 #2045) Update 095_exclude_non_essential_files.sh: Added also /usr/lib/grub2 and /usr/share/grub2 to COPY_AS_IS_EXCLUDE because since openSUSE Leap 15.1 things were moved from /usr/lib/grub2/ to /usr/share/grub2/ (issue #2338). Update 270_create_grub2_efi_bootloader.sh: Test for Grub 2 EFI components directories /usr/lib/grub/x86_64-efi and now also for /usr/lib/grub2/x86_64-efi or /usr/share/grub2/x86_64-efi because since openSUSE Leap 15.1 things were moved from /usr/lib/grub2/ to /usr/share/grub2/ (issue #2338). Update uefi-functions.sh: Use /usr/ /grub /x86_64-efi/partmap.lst instead of /usr/lib/grub*/x86_64-efi/partmap.lst because since openSUSE Leap 15.1 things were moved from /usr/lib/grub2/ to /usr/share/grub2/ (issue #2338). Update 630_install_grub.sh and 650_install_elilo.sh: Show the actual missing directory in the Error message (issue #2337). Moved backup/default/005_valid_backup_methods.sh to prep/default/035_valid_backup_methods.sh to also check for valid backup methods during \"rear mkrescue\" because for most external backup methods only \"rear mkrescue\" is used, cf. the section \"BACKUP SOFTWARE INTEGRATION\" in 'man rear' (issue #2337). Changes to Data Protector branding, adjustment required to support the new Data Protector 10.x agent with Secure Socket Communication. Fixed some problems related to SessionID format and problems with object names like host type vs. file system backup (issue #2335). Hard-coded root home directory string (\"/root\") was replaced with $ROOT_HOME_DIR that is the eeal home directory of root user (issue #2334). Make USE_DHCLIENT and USE_STATIC_NETWORKING more fail-safe in ReaR recovery system (issue #2325). For FDR backups, if the path for $FDRUPSTREAM_DATA_PATH does not exist, then create it. This change is FDR specific for s390 and is only in effect if ZVM_NAMING is \"Y\" (issue #2320). Overhauled rescue/default/010_merge_skeletons.sh: Made 010_merge_skeletons.sh behave more reliably. Now it errors out when things really went wrong. Now is is also supported that both a $skel_dir directory (e.g. usr/share/rear/skel/default/) plus a $skel_dir.tar.gz (e.g. usr/share/rear/skel/default.tar.gz) exist and then both get copied into the recovery system, first the directory and then the tar.gz so that via the tar.gz files from the $skel_dir directory could be overwritten if needed. (issues #2307 #2317) Added $FDRUPSTREAM_DATA_PATH/rear to $COPY_AS_IS_EXCLUDE_FDRUPSTREAM (issue #2318). Added documentation about possible (dirty) workarounds for needed bind9-export libraries for CentOS 7.7 and 8.0 which is somewhat related to Rubrik-CDM (issues #2266 #2284). Enhanced recovery system BIOS boot default settings for USB and ISO: For OUTPUT=ISO the user can now explicitly specify what to boot by default when booting the ISO on BIOS systems via ISO_DEFAULT=\"boothd0\" to boot from the first disk and ISO_DEFAULT=\"boothd1\" to boot from the second disk. For OUTPUT=USB the user can now explicitly specify what to boot by default when booting the disk on BIOS systems via USB_BIOS_BOOT_DEFAULT=\"boothd0\" to boot from the first disk. The default USB_BIOS_BOOT_DEFAULT=\"\" boots the second disk. (issues #2276 #2303) Remove outdated /root/rear-DATE-TIMESTAMP.log symlinks. Before creating the current symlink to the current log file test all files that match the file name pattern of such symlinks and remove those already existing (old) symlinks where its now outdated symlink target is the current log file (issue #2301). Initial preliminary first basic support for IBM Z architecture \"s390x\" (a.k.a. \"z Systems\", formerly \"System/390\", simply called \"s390\") : Currently primarily for Red Hat and SUSE enterprise systems so that interested users can try out early how far things work in their particular IBM Z environments and provide feedback preferably plus needed fixes, adaptions, and enhancements to ReaR upstream at https://github.com/rear/rear (issues #2137 #2142). Improved 'is_multipath_path' function to be more fail safe that now tests (via \"multipath -l\" output) if multipath is used. Additionally have 'lsblk' output as disklayout.conf header comments to make it easier to understand the values in the subsequent entries. Furthermore added 'xdd' to the PROGS array because sometimes a tool to display binary files is required in the recovery system. (issue #2298). Error out during \"rear mkrescue\" in case of insufficient LVM tools: Overhauled layout/save/GNU/Linux/220_lvm_layout.sh where now the exit code of the \"lvm ...\" calls are checked and it errors out if one fails in particular to avoid that entries in disklayout.conf are missing or broken when too old LVM tools are used that do not support the needed options of those \"lvm ...\" calls. Also in layout/save/default/950_verify_disklayout_file.sh a simple test was added to verify that the 'lvm...' entries in disklayout.conf look syntactically correct. Furthermore in 06-layout-configuration.adoc in the \"Disk layout file syntax\" section the exact same syntax for the \"lvm...\" entries is now listed as the headers of the \"lvm...\" entries in disklayout.conf are. (issues #2259 #2291) Fixed missing delete_dummy_partitions_and_resize_real_ones calls: Use same code as for disks for multipath devices (these are just regular disks), including MBR erasing and partition creation and cleanup : create_multipath() cannot call create_disk() because create_disk() verifies that the device is a block device, which it isn't with multipath because it's a symlink to a device mapper instead. Make sure new code handling re-creation of partitions and cleanup is used because Software Raid can have partitions since these are virtual disks. (issue #2281) Moved 'route' back from REQUIRED_PROGS to PROGS. ReaR uses 'ip route' everywhere so 'route' is not actually required. As 'route' is no longer always installed nowadays, having it in REQUIRED_PROGS lets ReaR falsely error out on such systems (issues #1961 #1652). Update 990_verify_rootfs.sh: Use a FDRUPSTREAM-specific LD_LIBRARY_PATH to find FDR libraries (issue #2296). Do not run 'ldd' on untrusted files to mitigate possible ldd security issues because some versions of ldd may directly execute the file (see \"man ldd\") which happens as user 'root' during \"rear mkrescue\". The new TRUSTED_FILE_OWNERS user config array contains user names that are trusted owners of files where RequiredSharedObjects calls ldd (cf. COPY_AS_IS) and where a ldd test is run inside the recovery system that tests all binaries for 'not found' libraries. Furthermore use '2>>/dev/$DISPENSABLE_OUTPUT_DEV' at more places to avoid that the \"rear -D mkrescue\" log file size would grow from about 5 MiB to about 17 MiB so that now that log file size even shrinked to about 2 MiB. (issue #2279) Initial draft implementation of the new 'mountonly' workflow to use ReaR as rescue system, therein mount the filesystems of the target system so that one can manually repair it. This is described in doc/user-guide/04-scenarios.adoc (issue #2247). Feature RAWDISK and OPALPBA improvements: RAWDISK: include additional Grub modules from /boot/grub (and /boot/grub2) which had formerly been missing. OPALPBA: improve Plymouth boot animation on Ubuntu, provide integration capabilities for other distros. RAWDISK: add support for distros which use 'grub2' naming. (issue #2275) Improved check for missing libraries in 990_verify_rootfs.sh so that now also libraries are checked that are no executables plus skipped the ldd test for firmware files (issue #2279). Update default.conf: More explanatory comment in default.conf how COPY_AS_IS versus LIBS, PROGS, and REQUIRED_PROGS are meant to be used (issue #2278). Accommodate logs from multiple FDR/Upstream services. Users may run multiple FDR/Upstream services on a single machine. This code change allows ReaR to copy FDR/Upstream logs from the recovery environment to the restored system for all running services. Previously the code was expecting to find only one set of logs and reports in the FDR/Upstream installation directory. For several years now, logs and reports have been stored in a new location ($FDRUPSTREAM_DATA_PATH), so we check here instead (issue #2251). Update format-workflow.sh: Set EXIT_FAIL_MESSAGE=0 before exiting in \"rear format -- --help\" to avoid the \"rear format failed, check ...rear...log for details\" message that is pointless in this case. Added alternative for 'poweroff.com' that is 'poweroff.c32' on RHEL8 (issue #2238). Removed unnecessary line that sets NSRSERVER in layout/save/NSR/default/650_check_iso_recoverable.sh which prevented setting NSRSERVER in local.conf (issue #2162). Enhanced default AUTOEXCLUDE_PATH=( /media /run /mnt /tmp ) plus explanatory comment in default.conf how AUTOEXCLUDE_PATH works (issues #2239 #2261). Use is_true() for AUTOEXCLUDE_MULTIPATH and cleanup of the get_partition_number function that now errors out with BugError in cases that are likely a bug in ReaR (issues #2245 #2260). Do not abort in case of invalid user input but retry if possible. When input values can be (syntactically) validated there is now a retry loop until the user provided valid input (or intentionally aborts) except those cases where it was not possible to implement validation when it is unknown what is valid for third-party tools (issue #2253). Removed '2>/dev/null' redirection where possible: Some general cleanup for ReaR 2.6. in all scripts by removing '2>/dev/null' where it makes sense and replacing '&>/dev/null' by '1>/dev/null' where it makes sense or also removing '&>/dev/null' where that seems to be better (issue #1395). By the way verify/TSM/default/390_request_point_in_time_restore_parameters.sh and verify/NBU/default/390_request_point_in_time_restore_parameters.sh have been somewhat overhauled but both scripts still abort 'rear recover' when the user did an invalid date or time input (issue #2253). Fix including of multipath disks in backup: The AUTOEXCLUDE_DISKS logic traverses filesystems and tries to determine the associated underlying disks that should be kept. When having a filesystem fs:/A that is present on a multipath device MP and the root filesystem fs:/ that is present on a normal disk D, the code first established that fs:/A depends on fs:/ resulting in marking D as used and then short-circuited processing of multipath devices. This resulted in MP not being considered as a used device and removed from the backup. The problem is fxed by removing the short-circuit logic in find_disk_and_multipath() so multipath devices get processed too unless AUTOEXCLUDE_MULTIPATH is true (issue #2236). Improve handling of partition label type for multipath disks: When recording information about a multipath disk, ReaR did not store information about its partition label type in the 'multipath' entry in disklayout.conf. The recovery code tried to automatically detect the label type using a heuristic that depends on GPT partition names. The logic would incorrectly detect the device as having the MBR label type instead of GPT if one of the partition names was exactly \"primary\", \"extended\" or \"logical\". The problem is solved by explicitly storing the partition label type for multipath devices (same as is already done for normal disks) so that the syntax of the 'multipath' entries in disklayout.conf is changed and that new syntax is now documented in doc/user-guide/06-layout-configuration.adoc The recovery code is accordingly updated to utilize this information (issue #2234). In doc/user-guide/16-Rubrik-CDM.adoc updated links to SUSE documentation: Replaced the outdated link https://www.suse.com/documentation/sle-ha-12/book_sleha/data/cha_ha_rear.html that gets redirected to a not really helpful standard fallback page by the currently valid URL for the most recent SLE-HA-15-SP1 https://documentation.suse.com/sle-ha/15-SP1/html/SLE-HA-all/cha-ha-rear.html because meanwhile the SUSE documentation was moved to its own server. The more general and more comprehensive documentation URL https://en.opensuse.org/SDB:Disaster_Recovery is kept and listed topmost (issue #2255). Added explanatory comments to default.conf about backup restore that may fail for things like BACKUP_PROG_COMPRESS_OPTIONS=(\"--zstd\") due to missing zstd binaries in the ReaR recovery system probably also for --lzip --lzma --lzop (issue #2241). New BACKUP=CDM method for Rubrik Cloud Data Management (CDM) see doc/user-guide/16-Rubrik-CDM.adoc (issues #2248 #2249). In verify/NETFS/default/050_start_required_nfs_daemons.sh all kind of '2>/dev/null' (i.e. also '&>/dev/null') are removed (so that '&>/dev/null' is replaced by '1>/dev/null') because in general '2>/dev/null' is unhelpful because it needlessly suppresses error messages in the log that would be helpful to see when something fails (issues #2250 #1395). Update 06-layout-configuration.adoc: Changed section title from \"Including/Excluding components\" to only \"Excluding components\". The latter avoids possible misunderstanding that there would be a config variable to explicitly include something but \"including\" here describes only to disable autoecludes (issue #2229). Update default.conf: At AUTOEXCLUDE_DISKS removed the comment Explicitly excluding/including devices is generally a safer option because it is not acually helpful and even misleading because there is currently no config variable to explicitly include devices (issue #2229). Do not keep the build dir when ReaR is run noninteractively by additional special values for the KEEP_BUILD_DIR config variable, see its desctiption in default.conf (issue #2218). Fix LVM2 thin pool recreation logic / use of vgcfgrestore is broken: Removing forcibly (with '--force' passed twice) seems to work for now. But our use of vgcfgrestore is probably not appropriate at all. It works by chance. Typically, it works only for Linear volumes, and won't probably for Caches and Raid hierarchies or when there are existing Snapshots on the system. The only proper solution is perhaps stop relying on vgcfgrestore at all, but then we are not capable of restoring volume groups and logical volumes with all properties from original system (issue #2222). Use mountpoint instead of mount | grep (issue #2225). Updated default.conf: Replaced ARRAY=( \"${ARRAY[@]}\" additional elements ) with simpler and more fail safe ARRAY+=( additional elements ) (related to issues #2223 #2220). Append to the CLONE_USERS and CLONE_GROUPS arrays by using += instead of expanding the previous value to an empty element which then causes problems later (issues #2223 #699). Update 900_clone_users_and_groups.sh: Skip empty user and group values (issue #2220). New use-case for BLOCKCLONE backup method for complex LUKS-encrypted filesystems by usinng the \"multiple backups\" approach with a second BLOCKCLONE phase with a dd image that contains the encrypted filesystem where unmounting the encrypted filesystem before creating its image and before restoring it has to be done via the new config variable BLOCKCLONE_TRY_UNMOUNT (issue #2200). Fixed when ReaR does not detect an uncompressed kernel that is named 'vmlinux' (instead of 'vmlinuz'). Added $BACKUP_OPTIONS to the line with mount_url in 800_copy_to_tftp.sh and 810_create_pxelinux_cfg.sh otherwise in case of OUTPUT=PXE mounting the NFS will fail. UEFI: Search for Grub2 modules in /usr/lib/grub /x86_64-efi and not in /boot. On Fedora and RHEL systems, Grub2 UEFI modules live in /usr/lib/grub /x86_64-efi, not /boot, unless grub2-install is executed, but executing this tool is not needed with UEFI. On SUSE systems, Grub2 UEFI modules also live in /usr/lib/grub /x86_64-efi but there is also a copy in /boot, so it's not needed searching in /boot at all. Additionally, only UEFI modules should be looked for, so /boot cannot be searched but only /boot/grub2/x86_64-efi (similarly /usr/lib/grub /x86_64-efi, not just /usr/lib/grub*), otherwise we could get some false positives on dual boot systems (UEFI + Legacy), since modules for Legacy will also match, which is wrong (issues #2199 #2001). RAWDISK and TCG Opal 2 Self-Encrypting Disks: Add Secure Boot support (issue #2166). Avoid that disklayout.conf contains duplicate 'lvmvol' lines: Create the 'lvmvol' lines commented out when multiple segments exist for a given LV. This is not an issue unless Migration Mode is used. In such case, using 'lvcreate' commands already does best effort and loses LV information (issues #2194 #2187). Additionally do not overload the kval variable (that is intended for passing options to lvcreate) by adding extra keys to it, which are not supported by lvcreate. Introduce another variable infokval for this purpose and print those unsupported and purely informational keys only in comments (issue #2196). Apply layout mappings also to other relevant files via layout/prepare/default/320_apply_mappings.sh In migration mode apply the disk layout mappings not only to disklayout.conf but also to other files that are also used to migrate the disk layout, namely VAR_DIR/layout/config/df.txt and /etc/rear/rescue.conf Additionally re-read the BTRFS_SUBVOLUME_SLES_SETUP variable from /etc/rear/rescue.conf because its value could have been migrated to a new value (issue #2181). In the function apply_layout_mappings (therein in its \"step 3\") treat leftover temporary replacement words (like _REAR1_ ) as an error only if they are in a non-comment line (issue #2183). When 420_autoresize_last_partitions.sh resizes the last partition on a GPT disk it leaves 33 LBA blocks at the end of the disk so that 420_autoresize_last_partitions.sh produces a fully correct disklayout.conf file where no further automated adjustments by a subsequent script like 100_include_partition_code.sh are done (issue #2182). Error out when DHCLIENT_BIN and DHCLIENT6_BIN are empty and USE_DHCLIENT is set (issue #2184). In build/default/990_verify_rootfs.sh skip the ldd test for kernel modules because in general running ldd on kernel modules does not make sense and sometimes running ldd on kernel modules causes needless errors because sometimes that segfaults (issue #2177). Bacula: Fixed 'bconsole' prompt not displaying at all when doing a recover (issue #2173). Fixed that the EFI Boot Manager cannot be installed when the system has a NVMe SSD, because the device name is resolved as /dev/nvme0n1p rather than /dev/nvme0n1 so for NVMe devices the trailing 'p' in the Disk value as in /dev/nvme0n1p that is derived from /dev/nvme0n1p1 needs to be stripped to get /dev/nvme0n1 (issues #2160 #1564). Changed double quotes (\") to single quotes(') in documentation related to BORG_PASSPHRASE variable. Double quotes will not avoid expanding of variable when '$' sign is used inside pass phrase string, which can lead to unsuccessful opening of Borg archive (issue #2205). More fail safe BACKUP_PROG_CRYPT_KEY handling: Use double quotes \"$BACKUP_PROG_CRYPT_KEY\" so that the BACKUP_PROG_CRYPT_KEY value can contain spaces. Escape special regexp characters in the BACKUP_PROG_CRYPT_KEY value when it is used as a regexp in grep or sed. Use single quotes BACKUP_PROG_CRYPT_KEY='my_passphrase' in the documentation examples so that the BACKUP_PROG_CRYPT_KEY value can contain special characters (except single quote). Recommend in default.conf to not use special characters in the BACKUP_PROG_CRYPT_KEY value to be to be on the safe side against things breaking in unexpected weird ways when certain code in ReaR is not yet safe against arbitrary special characters in values (issues #2157 #1372). Avoid that the BACKUP_PROG_CRYPT_KEY value appears in a log file in particular when 'rear' is run in debugscript mode where 'set -x' is set by redirecting STDERR to /dev/null for those confidential commands that use the BACKUP_PROG_CRYPT_KEY value, cf. the comment of the UserInput function how to keep things confidential when 'rear' is run in debugscript mode (issues #2155 #2156). Fix when recovery fails on LUKS-encrypted filesystem using simple password because only the first 2 parameters in /etc/crypttab are mandatory (issue #2151). Generic enhancements for IBM Z (s390) to support 'dasd' disks and SUSE specific enhancements to install during \"rear recover\" the special GRUB2 plus ZIPL bootloader on SLES12 and later via the new finalize/SUSE_LINUX/s390/660_install_grub2_and_zipl.sh script (issues #2137 #2150). Cleanup of the OUTPUT=RAMDISK code. Overhauled 900_copy_ramdisk.sh as architecture independent new script output/RAMDISK/default/900_copy_ramdisk.sh that replaces output/RAMDISK/Linux-i386/900_copy_ramdisk.sh and overhauled conf/templates/RESULT_usage_RAMDISK.txt plus better description of OUTPUT=RAMDISK and RESULT_FILES in default.conf (issue #2148). Enable creation of non consecutive partitions (issues #2081 #1793 #1771 #1681). The new SUSE-specific script finalize/SUSE_LINUX/i386/675_install_shim.sh calls 'shim-install' inside chroot on the recreated target system and uses boot/grub2/grub.cfg as input to recreate two needed (identical) EFI files /boot/grub2/x86_64-efi/core.efi and /boot/efi/EFI/opensuse/grubx64.efi (issue #2116). Fixed that output/default/950_copy_result_files.sh falsely errors out when an output method OUTPUT=FOO is used where there is no matching usr/share/rear/conf/templates/RESULT_usage_FOO.txt because when it is missing it is no sufficient reason to error out. Furthermore now 950_copy_result_files.sh is skipped when RESULT_FILES is empty because that means there is no actual output and then it is not needed to only copy VERSION README and LOGFILE to the output location (issue #2147).","title":"Details (mostly in chronological order - newest topmost):"},{"location":"releasenotes/rear26.html#system_and_software_requirements","text":"Relax-and-Recover works on GNU/Linux kernel with version 2.6 and higher. For lower kernel versions Relax-and-Recover cannot be used, and for these systems, mkcdrec is still a good alternative. As Relax-and-Recover has been solely written in the bash language we need the bash shell which is standard available on all GNU/Linux based systems. The default backup program Relax-and-Recover uses is GNU/tar which is also standard available. Relax-and-Recover is known to work well on x86, x86_64 and ppc64(le) based architectures. Relax-and-Recover has also been ported to ia64 and arm architectures, but these are less tested. Use the ' rear validate ' command after every successful DR test please and mail us the results.","title":"System and Software Requirements"},{"location":"releasenotes/rear26.html#choosing_the_best_compression_algorithm","text":"The default backup program with Relax-and-Recover is ( BACKUP_PROG=tar ) GNU tar and the default compression used with tar is gzip . However, is using gzip the best choice? We have done some tests and published the results. See Relax-and-Recover compression tests","title":"Choosing the best compression algorithm"},{"location":"releasenotes/rear26.html#support","text":"Relax-and-Recover (ReaR) is an Open Source project under GPL v3 license which means it is free to use and modify. However, the creators of ReaR have spend many, many hours in development and support. We will only give free of charge support in our free time (and when work/home balance allows it). That does not mean we let our user basis in the cold as we do deliver support as a service (not free of charge).","title":"Support"},{"location":"releasenotes/rear26.html#supported_and_unsupported_operating_systems","text":"We try to keep our wiki page Test Matrix rear 2.6 up-to-date with feedback we receive from the community. ReaR-2.6 is supported on the following Linux based operating systems: Fedora 29, 30, 31, and 32 RHEL 6, 7, and 8 CentOS 6, 7, and 8 Scientific Linux 6 and 7 SLES 12 and 15 openSUSE Leap 15.x Debian 8, and 9 Ubuntu 16, 17, and 18 ReaR-2.6 dropped official support for the following Linux based operating systems: Fedora < 29 RHEL < 6 CentOS < 6 Scientific Linux < 6 SLES < 12 openSUSE Leap 42.x and before (i.e. openSUSE <= 13) openSUSE Tumbleweed Debian < 8 Ubuntu < 16 Usually ReaR-2.6 should also work on newer versions of the above listed supported Linux based operating systems but sometimes arbitrary failures can happen when software that is used by ReaR (like partitioning tools, filesystem tools, bootloader tools, ISO image creating tools, networking tools, and so on) changes in not fully backward compatible ways or when there are innovations of the basic system (like kernel, storage, bootloader, init, networking, and so on) that are not yet supported by ReaR. In theory ReaR-2.6 should work on openSUSE Tumbleweed but in practice arbitrary failures could happen at any time because the Tumbleweed distribution is a pure rolling release version of openSUSE containing the latest stable versions of all software (cf. https://en.opensuse.org/Portal:Tumbleweed) so arbitrary changes of any software are possible at any time that could arbitrarily break how ReaR works. ReaR-2.6 may still work for SLES 11 and openSUSE Leap 42.x or even earlier openSUSE versions but it is no longer sufficiently well tested there so arbitrary regressions could appear. ReaR 2.6, ReaR-2.5, and ReaR-2.4 (and probably also some earlier versions) are known to no longer work reasonably well for the following Linux based operating systems: RHEL 5 (and probably also CentOS 5): See issue #1766 SLES 9 and 10: See issue #1842 If you require support for unsupported Linux operating systems you must acquire a ReaR support contract . Requests to port ReaR to another operating system (not Linux) can only be achieved with serious sponsoring.","title":"Supported and Unsupported Operating Systems"},{"location":"releasenotes/rear26.html#supported_and_unsupported_architectures","text":"ReaR-2.6 is supported on: Intel x86 type of processors AMD x86 type of processors PPC64 processors PPC64LE processors ReaR-2.6 may or may not work on: Intel Itanium processors ARM type of processors IBM Z \"s390x\" type of processors ReaR-2.6 does not support: old PPC (32bit) processors If you feel the need to get a fully functional ReaR working on one of the above mentioned type of processors please buy consultancy from one of our official developers.","title":"Supported and Unsupported Architectures"},{"location":"releasenotes/rear26.html#supported_rear_versions","text":"ReaR has a long history (since 2006) and we cannot support all released versions. If you have a problem we urge you to install the latest stable ReaR version or the development version (available on GitHub) before submitting an issue. However, we do understand that it is not always possible to install on hundreds of systems the latest version so we are willing to support previous versions of ReaR if you buy a support contract. Why do we change our policy? We cannot handle the big support requests anymore and we must give paid projects priority, therefore, we urge our customers to buy a support contract for one or more systems. You buy time with our core developers.","title":"Supported ReaR versions"},{"location":"releasenotes/rear27.html","text":"Release Notes for Relax-and-Recover version 2.7 \u00b6 This document contains the release notes for the open source project Relax-and-Recover. Relax-and-Recover website GitHub project Product Features \u00b6 The following features are supported by the most recent releases of Relax-and-Recover. Anything labeled as ( New ) was added as the most recent release. New functionality for previous releases can be seen in the next chapter that details each release. The most recent release of Relax-and-Recover is supported on most GNU/Linux based systems with kernel 2.6 or higher. It provides the following functionality: Hot maintenance capability. A recovery/rescue image can be made online while the system is running Command line interface. Relax-and-Recover does not require a graphical interface to run, neither in creation mode, nor in recovery mode (console is enough) Support included for most common file systems, such as ext2, ext3, and ext4. Other filesystems like reiserfs, jfs, xfs, and btrfs are also implemented, but are less tested. (Feedback is appreciated) Selected Hardware RAID and (eg. HP SmartArray) and mirroring solutions (eg. DRBD) are supported NVME and mmcblk disks are supported LVM root volumes are supported Multipath support for SAN storage UEFI support (including UEFI USB booting) Integrates with internal backup programs such as: GNU tar (BACKUP=NETFS, BACKUP_PROG=tar) GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=incremental, FULLBACKUPDAY=\"Mon\") for using incremental backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=differential, FULLBACKUPDAY=\"Mon\") for using differential backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar with openssl encryption (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_PROG_CRYPT_ENABLED=1) rsync on local devices (BACKUP=NETFS, BACKUP_PROG=rsync), such USB and local disks rsync over the network (BACKUP=RSYNC, BACKUP_PROG=rsync) Multiple backup methods ( read the documentation ) Any partition (e.g. a Windows partition) via BACKUP=BLOCKCLONE. See the documention about BLOCKCLONE BACKUP=ZYPPER is SLES12 only ( Experimental ) BACKUP=YUM is for RedHat architectures ony ( Experimental ) Integrates with external backup solutions such as: Tivoli Storage Manager (BACKUP=TSM) Data Protector (BACKUP=DP) Symantec NetBackup (BACKUP=NBU) Galaxy 5, 6, and 7 (BACKUP=GALAXY) Galaxy 10 [Commvault Simpana] (BACKUP=GALAXY10) Bacula (BACKUP=BACULA) Bareos (BACKUP=BAREOS) (A fork of Bacula) Rsync Backup Made Easy (BACKUP=RBME) Duplicity/Duply (BACKUP=DUPLICITY) EMC Networker, also known as Legato (BACKUP=NSR) EMC Avamar (BACKUP=AVA) SEP Sesam (BACKUP=SESAM) FDR/Upstream (BACKUP=FDRUPSTREAM) Novastor NovaBACKUP DC (BACKUP=NBKDC) Borg Backup (BACKUP=BORG) Rubrik Cloud Data Management (BACKUP=CDM) ( New ) Integrates with Disaster Recovery Linux Manager (DRLM) Udev support (except for some really ancient udev versions) which is the base for many important features: kernel drivers for network cards and storage adapters are loaded via udev deal with network persistent names in udev rules firmware loading persistent storage device names (though Relax-and-Recover does nothing with this) Systemd support for the more recent Linux distributions System migration and reconfiguration ('MIGRATION_MODE') facilitate recovery on hardware, that is not the same as the original system network and storage drivers are adjusted map hard disks if they do not match (e.g. hda -> sda) remap network MAC addresses use another IP address, or using dhcp via templates or from kernel command line rebuild the initial ramdisk if needed (for new storage drivers) migration to SAN storaged Support backup software: Bacula, both locally attached tapes (with bextract) and network-based backups. Also, in combination with OBDR tapes. Create OBDR tapes with method mkbackup and put the backup onto the tape to have a single-tape bootable recovery solution Label the OBDR tape with the method format to avoid accidental overwrites with OBDR Create bootable disk (eSATA, USB ...) medium with the backup included: BACKUP_URL=usb:///dev/device Together with OUTPUT=USB we have a complete solution on hard disks (booting of it and restoring data). DHCP client support (IPv4 and IPv6). Dhcp client activation can be forced via the variable USE_DHCLIENT=yes (define in /etc/rear/local.conf ). It is also possible to force DHCP at boot time with kernel option dhcp USE_STATIC_NETWORKING=y , will cause statically configured network settings to be applied even when USE_DHCLIENT is in effect Save layout and compare layouts for automation of making Relax-and-Recover snapshots (checklayout option) External USB booting uses extlinux (instead of syslinux), and therefore, the USB disk must first be formatted with an ext2, ext3, ext4 or btrfs based file system VLAN tagging, teaming and bridge support Add timestamp of ReaR run with rc code to the syslog or messages file; sending mail report is also possible The possibility to backup any partition (in particular a Windows partition) via the BACKUP type BLOCKCLONE Unattended ReaR recovery has been improved Improved security model related to SSH keys SSH_FILES='avoid_sensitive_files' (see details in /usr/share/rear/conf/default.conf ) SSH_UNPROTECTED_PRIVATE_KEYS='no' (see details in /usr/share/rear/conf/default.conf ) LUKS2 Support Note Features marked Experimental are prone to change with future releases. ReaR release 2.7 (July 2022) \u00b6 New features, bigger enhancements, and possibly backward incompatible changes: \u00b6 ReaR's default TMPDIR is now /var/tmp (it was /tmp before) i.e. ReaR's default working area is now /var/tmp/rear.XXXXX because ReaR needs lots of space (from 300MB up to more than 1GB) to build the ReaR rescue/recovery system e.g. as ISO image and even much more space to also store the backup archive e.g. when the backup should be included in the ISO image. The system's default temporary directory /tmp is no longer suited as default temporary directory for ReaR because nowadays /tmp is often a \"tmpfs\" that is in RAM so /tmp has RAM/swap limitations and file-hierarchy(7) recommends to use /var/tmp for cases as ReaR. If the user sets TMPDIR explicitly, it still takes precedence. Stop ReaR from possibly overwriting its own disk and backup drives for OUTPUT=USB and OUTPUT=RAWDISK via new WRITE_PROTECTED_... config variables (see /usr/share/rear/conf/default.conf ) where UUIDs or filesystem labels can be specified so that disks that contain such UUIDs or filesystem labels will be 'write protected' during \"rear recover\". Added initial LUKS2 support. Overhauled RAID code with changed RAID related entries in /var/lib/rear/layout/disklayout.conf so users who use RAID and a selfmade /etc/rear/disklayout.conf must adapt their RAID related entries Initial preliminary basic support to automatically resize an active last partition on RAID0 and RAID1 disks to be able to automatically resize RAID0 and RAID1 arrays Automatically shrink LVs if needed during \"rear recover\". This enables to run \"rear recover\" with automated LVM LVs shrinking as needed on a bit smaller replacement disk (e.g. when a nominally same sized replacement disk is actually a bit smaller than the original disk). This automated LVs shrinking is not intended when disk(s) are substantially smaller. To migrate onto a substantially smaller replacement disk the user must in advance manually adapt his disklayout.conf file before he runs \"rear recover\". Support to wipe disks before recreating partitions/volumes/filesystems/... (see the new DISKS_TO_BE_WIPED in /usr/share/rear/conf/default.conf ). This is currently new and experimental functionality so that currently by default via DISKS_TO_BE_WIPED='false' no disk is wiped to avoid possible regressions until this new feature was more tested by interested users via an explicit DISKS_TO_BE_WIPED setting. Error out when files greater or equal ISO_FILE_SIZE_LIMIT should be included in the ISO: See the reasoning in /usr/share/rear/conf/default.conf why the default ISO_FILE_SIZE_LIMIT is 2GiB and why we error out when files >= ISO_FILE_SIZE_LIMIT should be included in the ISO. Rsync OUTPUT_URLs are now properly supported with BACKUP=RSYNC . Previously the output went to the location specified by BACKUP_URL and OUTPUT_URL was ignored. One exception was OUTPUT=PXE , where the output was uploaded to OUTPUT_URL in addition to BACKUP_URL , but RSYNC_PREFIX was not respected and the interpretation of the URL was different: A URL of the form rsync://[USER@]HOST[:PORT]/PATH was interpreted as using the rsync protocol, while in all other cases such URL would be interpreted as using rsync over ssh. This special handling is now removed: An rsync OUTPUT_URL with OUTPUT=PXE now creates the RSYNC_PREFIX directory at the destination and the URL is interpreted as in all other cases. RAWDISK: Add local rescue partition installation capability: Introduce a configuration variable RAWDISK_INSTALL_GPT_PARTITION_NAME , which is unset by default. When set, the rescue system will be installed to local disk partitions having the corresponding name. Allow setting a PBA-specific firmware configuration via the new OPAL_PBA_FIRMWARE_FILES configuration variable. Support OPAL 2 self-encrypting NVMe disk drives. OPALPBA : Provide a permanent unlocking mode as a workaround when the firmware did not initialize properly during a 'simple' reboot so the only reliable way to boot was a power cycle after Opal disks were unlocked. To reboot with unlocked disks there is now a new unlocking mode \"permanent\" via OPAL_PBA_UNLOCK_MODE (see default.conf). Reactivating locking is then the responsibility of the user. Additionally enhanced security by disabling shell access via keyboard interrupt and switching to a password hash for OPAL_PBA_DEBUG_PASSWORD . POWER architecture (ppc64) support for BACKUP=DP : Other platforms supporting the Data Protector Disk Agent, but not the Cell Console (GUI) that is only available on i386, x86_64 and ia64 are now supported with ReaR. This includes in particular ppc64. Checks unavailable on clients without the Data Protector Cell Console (GUI) are skipped. In such cases backup restore can be done using Data Protector GUI only. NSR enhancement for point-in-time recovery with EMC Networker client: A new variable NSR_CLIENT_REQUESTRESTORE for the BACKUP=NSR workflow has been introduced to deal with situations in which the NSR client is allowed/granted to perform its recovery action \"on its own\" but does not have full control of the EMC networker service/environment, for details see its default.conf section. BACKUP=NBKDC : Enhanced ReaR backup and restore to also work with NovaStor DataCenter 8.0 and higher plus fixed wording \"NovaBACKUP DC\" -> \"NovaStor DC\" Support for systemd and parallel restore with Data Protector BACKUP=DP : Support starting Data Protector daemon 'omni.socket' via systemd in the recovery system. Restore performance has been increased by doing parallel restores now. Now \"rear format\" has in addition to the -efi switch a -bios switch. If none is given (i.e. by default) it will now do hybrid formatting with a BIOS boot partition (on GPT) and an EFI system partition. Accordingly the USB_DEVICE_PARTED_LABEL default is no longer \"msdos\" (see the updated description in /usr/share/rear/conf/default.conf) . This is a starting point for implementing OUTPUT=USB support for UEFI and BIOS dual boot from the same medium. See issue 2698 , issue 2818 and issue 2829 Overhauled serial console support code. A serial console of the ReaR recovery system can now be specified separately for the kernel and the recovery system bootloader via the generic config variables USE_SERIAL_CONSOLE and SERIAL_CONSOLE_DEVICES and specific config variables SERIAL_CONSOLE_DEVICES_KERNEL , SERIAL_CONSOLE_DEVICE_SYSLINUX and SERIAL_CONSOLE_DEVICE_GRUB (see /usr/share/rear/conf/default.conf for details) Support for HTTP sources when using PXE: There is a new config variable PXE_HTTP_URL to specify a HTTP download source for PXE. See the PXE_HTTP_URL description in /usr/share/rear/conf/default.conf In /usr/share/rear/conf/default.conf changed ISO_VOLID from \"RELAXRECOVER\" to \"REAR-ISO\" so the first ISO has the label \"REAR-ISO\" (8 characters) and subsequent ISOs get the labels \"REAR-ISO_01\" \"REAR-ISO_02\" ... respectively that have 11 characters (the maximum length for FAT volume names) so things work now by default when the ISO image is used to (manually) create a FAT bootable USB stick Accordingly 'RELAXRECOVER' in variable names was replaced. In particular the user config variable for automated input USER_INPUT_RELAXRECOVER_SYMLINK_TARGET was renamed as USER_INPUT_ISO_SYMLINK_TARGET so only that new name will work. Details (mostly in chronological order - newest topmost): \u00b6 Refactor rsync URL support, fixes rsync OUTPUT_URL : The code to parse rsync:// URLs was BACKUP_URL specific. If one specified BACKUP=RSYNC and an OUTPUT_URL different from BACKUP_URL , the OUTPUT_URL was ignored and the output files went to BACKUP_URL. Fix by introducing generic functions for rsync URL parsing and use them for both BACKUP_URL and OUTPUT_URL, as appropriate. Replace all uses of global RSYNC_* variables derived from BACKUP_URL by those functions. There also was inconsistent special handling for OUTPUT=PXE which is now removed: An rsync OUTPUT_URL with OUTPUT=PXE now creates the RSYNC_PREFIX directory at the destination and the URL is interpreted as in all other cases. See issue 2831 and issue 2781 Support creation of EFI system partition on systems with older 'parted' that do not support the 'esp' keyword: In format/USB/default/300_format_usb_disk.sh try sgdisk ... --typecode=\"partition_number:EF00\" as fallback when parted ... set partition_number esp on failed. See issue 2830 Set USB_DEVICE_PARTED_LABEL to match format-workflow.sh : In format/USB/default/300_format_usb_disk.sh it is set depending on the format workflow option -b/--bios or -e/--efi and in in prep/USB/Linux-i386/340_find_mbr_bin.sh try to autodetect what the USB disk partition type is and use a specified USB_DEVICE_PARTED_LABEL if autodetection fails. See issue 2829 In usr/sbin/rear enhanced the check for other simultaneously running 'rear' to let it find running 'rear' instances independent of how it was called by the user in particular also when 'rear' is run from a GitHub checkout/clone cf. issue 2826 In usr/share/rear/lib/format-workflow.sh do actually recognise -b/--bios options, see issue 2828 In layout/prepare/GNU/Linux/110_include_lvm_code.sh use a fail-safe 'yes' pipe for \"lvm lvcreate\" to pipe as many 'y' as asked for into \"lvm lvcreate\" see issue 513 and issue 2820 Avoid creating a /bin/vim symlink to vi: The symlink is more confusing than helpful: If one has both vi and vim, and they are different (vi usually has less features), one expects to get the more featureful version by executing \"vim\", but one gets \"vi\". More importantly, in recent Fedora and RHEL, \"vi\" is a shell script that executes \"vim\" if found, so linking \"vim\" to \"vi\" leads to an infinite loop. See issue 2822 RPM spec: update build requirement for Fedora to unblock Packit build and run make validate after build, see issue 2816 In finalize/Linux-i386/660_install_grub2.sh explain that it is also used as fallback to install the nowadays most often used bootloader GRUB2 unless the BOOTLOADER variable tells to install another bootloader (other bootloader install scripts check the BOOTLOADER variable), cf. https://github.com/rear/rear/issues/2817#issuecomment-1148488339 Replace 'RELAXRECOVER' in variable names: In lib/global-functions.sh in the function mount_url() renamed the user config variable for automated input USER_INPUT_RELAXRECOVER_SYMLINK_TARGET as USER_INPUT_ISO_SYMLINK_TARGET because the old name contained a user config value: \"RELAXRECOVER\" was an old default value of ISO_VOLID, see https://github.com/rear/rear/pull/2457 and https://github.com/rear/rear/pull/2813#discussion_r885576867 In default.conf properly describe PRE_BACKUP_SCRIPT and POST_BACKUP_SCRIPT to match what the implementation does, see https://github.com/rear/rear/pull/2735#issuecomment-1145006984 and for special cases see https://github.com/rear/rear/pull/2735#issuecomment-1148620157 Add PRE_RECOVERY_COMMANDS and POST_RECOVERY_COMMANDS as alternative to PRE_RECOVERY_SCRIPT and POST_RECOVERY_SCRIPT see the description in default.conf how to use them and how they work. See https://github.com/rear/rear/pull/2811 and see also https://github.com/rear/rear/pull/2735 therein in particular https://github.com/rear/rear/pull/2735#issuecomment-1134686196 Additionally use LogPrint to show the user the executed commands, see https://github.com/rear/rear/pull/2789 In default.conf describe the new user config variables USB_BOOT_PART_SIZE and USB_DEVICE_BOOT_LABEL see https://github.com/rear/rear/pull/2660 Exclude dev/watchdog from the ReaR recovery system: In default.conf add dev/watchdog to COPY_AS_IS_EXCLUDE because watchdog functionality is not wanted in the recovery system because we do not want any automated reboot functionality while disaster recovery happens via \"rear recover\", see https://github.com/rear/rear/pull/2808 Furthermore having a copy of dev/watchdog* during \"rear mkrescue\" in ReaR's build area may even trigger a system crash that is caused by a buggy TrendMicro ds_am module touching dev/watchdog in ReaR's build area (/var/tmp/rear.XXX/rootfs), see https://github.com/rear/rear/issues/2798 In output/default/940_grub2_rescue.sh for GRUB_RESCUE set 'root=/dev/ram0 vga=normal rw' (the same is already done for other boot media) to avoid a \"Kernel panic ... Unable to mount root fs on unknown-block(0,0)\" that could otherwise happen in certain cases, see https://github.com/rear/rear/pull/2791 In build/GNU/Linux/400_copy_modules.sh always include loaded kernel modules i.e. also for MODULES=() or MODULES=( 'moduleX' 'moduleY' ) include the currently loaded kernel modules, cf. https://github.com/rear/rear/issues/2727#issuecomment-994731345 In layout/save/GNU/Linux/200_partition_layout.sh ensure $disk_label is one of the supported partition tables (i.e. one of 'msdos' 'gpt' 'gpt_sync_mbr' 'dasd') and ensure syntactically correct 'disk' and 'part' entries in disklayout.conf (each value must exist and each value must be a single non-blank word), see the last part about \"error out directly ... when things failed\" in https://github.com/rear/rear/issues/2801#issuecomment-1122015129 But do not error out when there is no partition label type value for a 'disk' entry in disklayout.conf because \"rear recover\" works in a special case without partition label type value when there is only a 'disk' entry but nothing else for this disk exists in disklayout.conf which can happen when /dev/sdX is an empty SD card slot without medium, see https://github.com/rear/rear/issues/2810 In default.conf explain how to use LIBS properly, see https://github.com/rear/rear/issues/2743 In the function find_syslinux_modules_dir in lib/bootloader-functions.sh the fallback 'find /usr' to find the SYSLINUX modules directory may take a very long time on some systems (up to several hours) so tell the user in debug mode what is going on, see https://github.com/rear/rear/issues/2792 and https://github.com/rear/rear/issues/624 In default.conf tell that MODULES=( 'loaded_modules' 'additional_module' ) is not supported (the generic COPY_AS_IS method can be used to include additional modules) cf. https://github.com/rear/rear/issues/2727 Use disklayout.conf keyword 'raidarray' instead of 'raid' because we have a new 'raiddisk' keyword and a keyword must not be a leading substring of another keyword so we have now 'raidarray' and 'raiddisk', see https://github.com/rear/rear/issues/2759 and https://github.com/rear/rear/commit/53757eab1447c712fb7c8e44be9c8b3b3ffd9faa In layout/save/default/450_check_bootloader_files.sh use /[e]tc/grub.cfg and /[b]oot/.../grub.cfg with '*' globbing patterns (as in the EFI|GRUB2-EFI case) to find any of grub.cgf or grub2.cfg in /etc/ or in /boot/ (e.g. in openSUSE Leap 15.3 there is /boot/grub2/grub.cfg), cf. https://github.com/rear/rear/pull/2796#issuecomment-1118387393 In default.conf added '[e]tc/crypttab' to FILES_TO_PATCH_PATTERNS, cf. https://github.com/rear/rear/pull/2795#discussion_r859670066 New FILES_TO_PATCH_PATTERNS in default.conf to verify file hashes at the end of recover after file restore from backup and show an error when config files were restored from an outdated backup so the restored files do not match the recreated system, see https://github.com/rear/rear/pull/2795 and https://github.com/rear/rear/issues/2785 and https://github.com/rear/rear/issues/2787 In backup/RSYNC/default/450_calculate_req_space.sh comment out remote space check with rsync see https://github.com/rear/rear/issues/2760 In layout/save/default/450_check_bootloader_files.sh and layout/save/default/450_check_network_files.sh added bash globbing characters [] around the first letter to ensure that with 'shopt -s nullglob' files that do not exist will not appear so nonexistent files are not appended to CHECK_CONFIG_FILES cf. https://github.com/rear/rear/pull/2796#issuecomment-1117171070 In backup/DUPLICITY/default/500_make_duplicity_backup.sh disable SC2068 cf. https://github.com/rear/rear/issues/1040 In backup/YUM/default/500_make_backup.sh and backup/NETFS/default/500_make_backup.sh and prep/NETFS/default/070_set_backup_archive.sh fixed SC2068 cf. https://github.com/rear/rear/issues/1040 In rescue/default/850_save_sysfs_uefi_vars.sh disable SC2045 cf. https://github.com/rear/rear/issues/1040 In layout/save/GNU/Linux/240_swaps_layout.sh and lib/output-functions.sh fixed SC2045 cf. https://github.com/rear/rear/issues/1040 In lib/_input-output-functions.sh disable SC2218 cf. https://github.com/rear/rear/issues/1040 In layout/save/GNU/Linux/230_filesystem_layout.sh aviod SC1087 cf. https://github.com/rear/rear/issues/1040 In default.conf tell that USB_RETAIN_BACKUP_NR is only supported when EXTLINUX is used as bootloader for USB and in output/USB/Linux-i386/300_create_extlinux.sh add an explanatory comment how that code works, cf. https://github.com/rear/rear/pull/2794#issuecomment-1106286485 In layout/save/GNU/Linux/210_raid_layout.sh fixed and overhauled the RAID10 'layout' support code (i.e. what belongs to the mdadm -layout option). This was triggered by ShellCheck SC2034 and SC2066 for the old code, see https://github.com/rear/rear/pull/2768 In finalize/Fedora/i386/550_rebuild_initramfs.sh fixed SC2068 and SC2145 via some generic code cleanup cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 and see https://github.com/rear/rear/pull/2771 In rescue/GNU/Linux/310_network_devices.sh fix SC2091 see https://github.com/rear/rear/pull/2776 In default.conf increase USB_UEFI_PART_SIZE to 1024 MiB, cf. https://github.com/rear/rear/pull/1205 in particular to also make things work by default when additional third-party kernel modules and firmware (e.g. from Nvidia) are used, cf. https://github.com/rear/rear/issues/2770#issuecomment-1068935688 In doc/rear.8 and doc/rear.8.adoc fixed typo '/dev/disk/by-path/REAR-000' -> '/dev/disk/by-label/REAR-000' In default.conf better describe USB_DEVICE cf. https://github.com/rear/rear/issues/2770#issuecomment-1068831482 In output/default/940_grub_rescue.sh removed a misleading comment that shows a wrong get_version function call and in output/USB/Linux-i386/850_make_USB_bootable.sh fixed a wrong get_version function call that is needed since the ShellCheck SC2068 fixed get_version function in lib/layout-functions.sh In layout/recreate/default/120_confirm_wipedisk_disks.sh and layout/prepare/Linux-s390/205_s390_enable_disk.sh and rescue/GNU/Linux/310_network_devices.sh and rescue/GNU/Linux/230_storage_and_network_modules.sh and restore/default/990_move_away_restored_files.sh and restore/NBU/default/300_create_nbu_restore_fs_list.sh and skel/default/etc/scripts/system-setup.d/00-functions.sh and skel/default/etc/scripts/dhcp-setup-functions.sh and wrapup/default/990_copy_logfile.sh and usr/share/rear/lib/output-functions.sh and lib/layout-functions.sh and lib/filesystems-functions.sh and lib/linux-functions.sh avoid ShellCheck SC2068 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In output/ISO/Linux-i386/800_create_isofs.sh avoid ShellCheck SC2068 and SC2145 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In output/TSM/default/960_dsmc_verify_isofile.sh avoid ShellCheck SC2068 and SC2145 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 plus better error checking and messaging and other code cleanup In output/default/940_grub2_rescue.sh and output/default/940_grub_rescue.sh avoid ShellCheck SC2068 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In output/default/950_email_result_files.sh avoid ShellCheck SC2068 and SC2145 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 and replaced ...IfError function calls by calling Error In restore/FDRUPSTREAM/default/260_copy_log_and_report.sh fixed ShellCheck reported error SC2199 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 and fixed possible \"bash: conditional binary operator expected\" error In output/USB/Linux-i386/300_create_extlinux.sh and rescue/GNU/Linux/310_network_devices.sh avoid ShellCheck reported error SC2199 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In prep/NBKDC/default/400_prep_nbkdc.s and lib/sesam-functions.sh avoid ShellCheck false error indication SC1097 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In lib/_input-output-functions.sh fixed ShellCheck reported errors SC2145 and SC2068 and avoided ShellCheck false error indication SC1087 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In usr/sbin/rear avoid ShellCheck SC1075 and fixed ShellCheck SC2145 cf. https://github.com/rear/rear/issues/1040 In output/RAWDISK/Linux-i386/260_create_syslinux_efi_bootloader.sh fixed ShellCheck SC2235 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In rear/lib/sesam-functions.sh fixed ShellCheck SC2221 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In lib/filesystems-functions.sh in function xfs_parse fixed ShellCheck SC2179 and SC2128 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 furthermore 'xfs_opts' is local in both functions xfs_parse and create_fs in layout/prepare/GNU/Linux/131_include_filesystem_code.sh In lib/layout-functions.sh fixed ShellCheck SC2178 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In skel/default/etc/scripts/system-setup.d/00-functions.sh ignore ShellCheck SC2119 and SC2120 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062703092 In restore/DUPLICITY/default/150_restore_duply.sh avoid ShellCheck SC2103 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In layout/prepare/GNU/Linux/100_include_partition_code.sh fixed ShellCheck SC2199 and SC2076 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In output/ISO/Linux-ia64/400_create_local_efi_dir.sh fixed ShellCheck SC2050 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In layout/save/GNU/Linux/230_filesystem_layout.sh fixed ShellCheck SC2030 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In verify/NBU/default/380_request_client_destination.sh fixed ShellCheck SC2018 and SC2019 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In backup/YUM/default/500_make_backup.sh fixed ShellCheck SC2000 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 Simpler code in prep/Linux-s390/305_include_s390_tools.sh to set a fixed bootdir=\"/boot\" that also fixes ShellCheck SC1066 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034890880 New GRUB2_SEARCH_ROOT_COMMAND in default.conf to overrule the setting in output/USB/Linux-i386/100_create_efiboot.sh see https://github.com/rear/rear/pull/2763 and https://github.com/rear/rear/issues/2500 New EXCLUDE_IP_ADDRESSES and EXCLUDE_NETWORK_INTERFACES directives: These new array variables enable to exclude specific IP addresses or network interfaces when building the network configuration used in the rescue environment. This is typically useful when floating IP addresses are used. Not excluding these may lead to outage if the floating IP address is used by another system at time the system is getting recovered, see https://github.com/rear/rear/pull/2736 multipath: fix exclusion of still wanted devices: The current code excluding multipath devices is broken when a device being excluded matches other devices. This leads to excluding wanted devices. This happens when having custom alias for multipath devices or there are more than 26 multipath devices and 'mpatha' is getting excluded, which leads to excluding all 'mpathaX' devices are well, see https://github.com/rear/rear/pull/2750 Update 06-layout-configuration.adoc: Enhance the \"disk layout file syntax\" description: Describe that one cannot rely on backward compatibility. Describe positional parameters vs. option=value parameters. Update default.conf: In default.conf describe that when OUTPUT_URL is set OUTPUT_OPTIONS does not inherit the BACKUP_OPTIONS value cf. https://github.com/rear/rear/issues/2753 Include dmsetup and dmeventd as PROGS in conf/GNU/Linux.conf because older releases of os-prober (1.74 and below) use dmsetup as a fallback solution for mounting when grub-mount is missing but without dmsetup and dmeventd also in the recovery system that would block indefinitely at \"Installing GRUB2 boot loader...\", for details see https://github.com/rear/rear/pull/2748 In the function cmdline_add_console in lib/serial-functions.sh add 'console=tty0' as fallback to cmdline only if no real serial device was found otherwise on a machine with e.g. ttyS0 and ttyS1 where only ttyS0 is real only kernel messages (but nothing else) would appear on ttyS0, see https://github.com/rear/rear/pull/2749 Skip unneeded /usr/lib/syslog-ng/loggen/ from recovery system: In conf/GNU/Linux.conf do no longer copy all in /usr/lib/syslog-ng/ but only copy .so files in /usr/lib/syslog-ng/ (same as for rsyslog). This skips in particular /usr/lib*/syslog-ng/loggen/ because 'loggen' is not included in the recovery system ('loggen' does not appear in any ReaR code). See https://github.com/rear/rear/issues/2743 For BACKUP=CDM removed need for the whole /usr/lib64 in the recovery system. See https://github.com/rear/rear/pull/2747 and the related issues https://github.com/rear/rear/issues/2266 https://github.com/rear/rear/issues/2314 https://github.com/rear/rear/issues/2685 https://github.com/rear/rear/issues/2700 Update 400_copy_modules.sh: Do no longer error out if 'cp -a -L' failed to to copy all contents of /lib/modules/... but only tell the user about the issue so he could inspect his system and decide, see https://github.com/rear/rear/issues/2739#issuecomment-1014304127 Support for HTTP sources when using PXE: There is a new config variable PXE_HTTP_URL to specify the HTTP download source for PXE. If the variable is set the PXE config file will generate an additional 3rd boot option (besides the unchanged standard options \"rear\" via TFTP and \"local\") namely \"rear-http\" which includes the HTTP URL information to download the kernel and initrd data. See https://github.com/rear/rear/pull/2738 Also add ssh-add prog when ssh-agent is added. Since ssh-agent gets added it makes sense to add ssh-add as well. See https://github.com/rear/rear/pull/2729 In layout/prepare/default/420_autoresize_last_partitions.sh automatically resize active last partitions on RAID0 disks, see https://github.com/rear/rear/issues/2696 Therefore in layout/save/GNU/Linux/210_raid_layout.sh a new 'raiddisk' entry that has same syntax as a 'disk' entry is written to disklayout.conf to have size (and partition label) of a RAID device like \"raiddisk /dev/md127 23599054848 gpt\" because knowing the RAID device size is a precondition to be able to automatically resize a RAID0 array. See https://github.com/rear/rear/pull/2730 In layout/prepare/default/420_autoresize_last_partitions.sh automatically resize active last partitions on RAID1 disks and fixed fallback setting so that now the user can specify AUTORESIZE_EXCLUDE_PARTITIONS=() in his local.conf. Additionally in layout/prepare/default/250_compare_disks.sh show info about old disk and sizes and new disks and sizes in case of MIGRATION_MODE to make it easier to answer the questions to which new disks old disk should be mapped. See https://github.com/rear/rear/pull/2726 Fix modinfo_filename() in build/GNU/Linux/400_copy_modules.sh Output the original $module_filename also when it is a symlink because in the code below 'cp -L' copies the symlink taget content as a new regular file with file name as the name of the symlink so the copied content can be still found under its original name, cf. https://github.com/rear/rear/issues/2677#issuecomment-997859219 Additionally in case of MODULES=( 'all_modules' ) also use 'cp -L' to copy the actual content to avoid dangling symlinks in the recovery system. See https://github.com/rear/rear/pull/2731 In usr/share/rear/output/PXE/default/800_copy_to_tftp.sh fixed pxe file cp and permissions for sshfs target to prevent cp error \"failed to preserve ownership\" for sshfs and to prevent issue with write permissions trying to override image on later runs. See https://github.com/rear/rear/pull/2723 Improved wiping disks (see https://github.com/rear/rear/pull/2721): In layout/recreate/default/120_confirm_wipedisk_disks.sh skip disks that do not exist on the bare hardware in the recovery system cf. https://github.com/rear/rear/issues/2715 and exclude disks that are write-protected cf. https://github.com/rear/rear/pull/2703#issuecomment-979928423 and show in any case a user confirmation dialog for the disks that will be wiped. In layout/recreate/default/150_wipe_disks.sh do no longer open (and close) LUKS volumes because encrypted volumes contain meaningless data unless opened and unencrypted so there is no need to wipe anything inside an encrypted LUKS container, cf. \"Regarding LUKS\" in https://github.com/rear/rear/pull/2514#issuecomment-743483945 Overhauled RAID code (see https://github.com/rear/rear/pull/2714) based on https://github.com/rear/rear/pull/2702 that is about initial software RAID IMSM support i.e. with the changes in that pull request: Completely overhauled layout/save/GNU/Linux/210_raid_layout.sh: No longer a subshell that appends all stdout to disklayout.conf but explicit append to disklayout.conf where needed to be safe against accidental things written to disklayout.conf. Handle each mdadm option in one place i.e. parse and prepare output. Handle options ordered by importance, mandatory first, then optional ones. Basic tests that mandatory options are syntactically valid plus Error if not. Overhauled layout/prepare/GNU/Linux/120_include_raid_code.sh: The FEATURE_MDADM_UUID code is meanwhile obsolete because all mdadm versions in supported ReaR Linux distributions support '-uuid'. New layout/recreate/default/220_verify_layout.sh to verify if RAID devices are recreated with the UUIDs in disklayout.conf because mdadm silently ignores this option when creating IMSM arrays (both containers and the volumes inside them) and picks a random UUID cf. https://github.com/rear/rear/pull/2702#issuecomment-970395567 Support user specified DISKS_TO_BE_WIPED to mitigate https://github.com/rear/rear/issues/2715 see the DISKS_TO_BE_WIPED description in default.conf Update 100_create_layout_file.sh: Additionally show the filesystem LABEL in the 'lsblk' output of the original system as comment in disklayout.conf to make it easier to understand subsequent data in particular for RAID where the array name is shown as LABEL in 'lsblk' for example like \"/dev/sda ... linux_raid_member any:raid1sdab\" - see also \"one cannot see ... /dev/md/ symlinks as NAME ... /dev/md/raid1sdab -> ../md127\" in https://github.com/rear/rear/pull/2702#issuecomment-951769031 and see also https://github.com/rear/rear/commit/1a8a88c20d01f01fac65e296e9481ab9172c3ac7 Update 100_create_layout_file.sh: Additionally show UUID in 'lsblk' output of the original system as comment in disklayout.conf to make it easier to compare UUIDs of the original system with what was recreated, cf. \"... shouldn't it [ReaR] restore the [RAID] arrays with the same UUIDs ...?\" in https://github.com/rear/rear/pull/2702#issuecomment-968904230 and https://github.com/rear/rear/pull/2714#issuecomment-970279152 Update 050_start_required_nfs_daemons.sh: Start rpcbind with the -s option to avoid that in some cases rpcbind is not started / not available in the recovery system cf. https://github.com/rear/rear/issues/2672 New function is_multipath_used in layout-functions.sh (see https://github.com/rear/rear/pull/2708) to get 'multipath -l' out of the function is_multipath_path by adding a separated function is_multipath_used that runs 'multipath -l' (which is expensive because it scans all devices) to check if multipath is used and remembers the result in MULTIPATH_IS_USED that is used in subsequent calls of is_multipath_used (without calling 'multipath -l') so we can call is_multipath_used many times via is_multipath_path which is called in layout/save/GNU/Linux/200_partition_layout.sh for each disk device. This should avoid long computing time when there are very may disk devices, cf. https://github.com/rear/rear/pull/2597#issuecomment-814950019 Now \"rear format\" has in addition to the -efi switch a -bios switch. If none is given (i.e. by default) it will now do hybrid formatting with a BIOS boot partition (on GPT) and an EFI system partition. This is a starting point for implementing OUTPUT=USB support for UEFI and BIOS dual boot from the same medium see https://github.com/rear/rear/issues/2698 and https://github.com/rear/rear/pull/2705 Update write-protect-functions.sh: In the function is_write_protected_by_id() assume a disk without any of UUID PTUUID PARTUUID WWN is empty and meant to be used to recreate the system so it should not be write-protected cf. https://github.com/rear/rear/pull/2703#discussion_r757393547 Enhanced disk write-protection, see https://github.com/rear/rear/pull/2703 and https://github.com/rear/rear/pull/2626 by WRITE_PROTECTED_IDS with generic functionality, cf. https://github.com/rear/rear/pull/2626#issuecomment-950953826 together with the new WRITE_PROTECTED_ID_TYPES which defaults to UUID PTUUID PARTUUID WWN so that the user can specify different lsblk columns as needed in his particular environment cf. https://github.com/rear/rear/pull/2703#issuecomment-962418441 Stop ReaR from overwriting its own disk and backup drives for OUTPUT=USB and OUTPUT=RAWDISK via new WRITE_PROTECTED_... config variables (see default.conf) where UUIDs or filesystem labels can be specified so that disks that contain such UUIDs or filesystem labels will be 'write protected' during \"rear recover\", see https://github.com/rear/rear/issues/1271 and https://github.com/rear/rear/pull/2626 Overhauled serial console support code. See https://github.com/rear/rear/pull/2699 A serial console of the ReaR recovery system can now be specified separately for the kernel and the recovery system bootloader via the generic config variables USE_SERIAL_CONSOLE and SERIAL_CONSOLE_DEVICES and specific config variables SERIAL_CONSOLE_DEVICES_KERNEL SERIAL_CONSOLE_DEVICE_SYSLINUX SERIAL_CONSOLE_DEVICE_GRUB see usr/share/rear/conf/default.conf for details cf. https://github.com/rear/rear/issues/2663 and https://github.com/rear/rear/pull/2697 More control over serial devices used for console. See https://github.com/rear/rear/pull/2697 In layout/prepare/default/300_map_disks.sh overhauled the automapping of original 'disk' devices and 'multipath' devices to current block devices in the currently running recovery system so that now it automatically finds an existing unique disk size mapping also when there is a unique mapping between more than two disks, see https://github.com/rear/rear/issues/2690 Fix multiple VG recreation, see https://github.com/rear/rear/pull/2691 Do not use global variables in diskrestore.sh: Fix a problem introduced in commits b184194f37dd22a7e55655ff388579297239e73c and 311bfb3da1d5e47a2ff144123a2457e634f67893 (PR #1806) that shows up when there are multiple VGs to restore. Using variables create_thin_volumes_only and create_logical_volumes to propagate information from VG creation to LV creation does not work well in the case of multiple VGs, because the variables are global and if there are multiple VGs, their values will leak from one VG to another. The generated diskrestore.sh script does not guarantee that the LVs of a given VG are created immediately after their VG and before creating another VG. Currently, the script first creates all VGs and then all LVs, so all the LVs in all VGs will see the value of create_logical_volumes and create_thin_volumes_only from the last VG, not from their own. This matters when different VGs behave differently (typically if one has a thin pool and the other does not). Fix by replacing the scalar values by arrays of VG names. If a given VG is in the array, it is the equivalent of the former scalar value being 1 for the given VG, if it is not in the array, it is an equivalent of a former value of 0. For the create_volume_group variable the change is not needed, but do it nevertheless for symmetry with other variables. Error out in sbin/rear when it failed to source or Source() mandatory files to make it obvious when there are syntax errors in user config files and/or when there are syntax errors in our lib/*-functions.sh code, see https://github.com/rear/rear/issues/2686 Overhauled output/USB/Linux-i386/100_create_efiboot.sh In particular no longer use \"cp -p\" because '-p' may fail because it copies to a VFAT filesystem on the EFI partition see https://github.com/rear/rear/issues/2683 and now always use \"cp -L\" to ensure the real content gets copied. See https://github.com/rear/rear/pull/2684 Overhauled the description in user-guide/05-integration.adoc what \"rear savelayout\" and \"rear checklayout\" are menat to do, cf. https://github.com/rear/rear/commit/7a3884bed1fb6cb61654c4e266ba4c35094bd9f4#r56879062 Fixed https://github.com/rear/rear/issues/2667 \"rear does not entirely remove build area any more\" by using double quotes for remove_temporary_mountpoint \"$BUILD_DIR/...\" and fixed https://github.com/rear/rear/issues/2676 \"False ERROR '.../outputfs not empty, cannot remove' when OUTPUT_URL is unset\" by making scheme_supports_filesystem() fail-safe if $1 is empty or blank and also making scheme_accepts_files() fail-safe in the same way, see https://github.com/rear/rear/pull/2675 On POWER require bootlist & ofpathname if needed: The ofpathname binary is called by grub2-install. Therefore, it is required in the rescue system in order to make the recovered system bootable, except for the PowerNV (Not Virtualized - bare metal) case. Under PowerVM, we also need the bootlist executable to make the system bootable. See https://github.com/rear/rear/pull/2665 ReaR's default TMPDIR is now /var/tmp (it was /tmp before) i.e. ReaR's default working area is now /var/tmp/rear.XXXXX ReaR needs lots of space (from 300MB up to more than 1GB) to build the ReaR rescue/recovery system e.g. as ISO image and even much more space to also store the backup archive e.g. when the backup should be included in the ISO image. The system's default temporary directory /tmp is no longer suited as default temporary directory for ReaR because nowadays /tmp is often a \"tmpfs\" that is in RAM so /tmp has RAM/swap limitations. file-hierarchy(7) recommends to use /var/tmp for such cases. If the user sets TMPDIR explicitly, it still takes precedence. See https://github.com/rear/rear/pull/2664 Cleanup of GRUB2 config code in particular for OUTPUT=USB: Cleanup of the create_grub2_cfg function: Describe its usage in a comment. Have its helper functions inside create_grub2_cfg to make them not globally accessible. Initial steps to clean up how the GRUB root device is set via one single method. DebugPrint output how GRUB2 is configured to help the user to find errors or bugs. Better GRUB2 menue entry names. Consistent calling of the create_grub2_cfg function always as create_grub2_cfg \"/path/to/kernel\" \"/path/to/initrd\" >/path/to/grub.cfg also in output/ISO/Linux-i386/250_populate_efibootimg.sh. Set GRUB2 timeout to new config variable GRUB2_TIMEOUT that is by default 300 seconds. Set GRUB2 default boot menu entry to GRUB2_DEFAULT_BOOT that is by default 'chainloader' which should usually boot the original system and reference GRUB2 boot menu entries by 'menuentry ... -id=...' to have meaningful names instead of meaningless numbers. Sleep 3 seconds exactly before GRUB2 shows its menu (it replaces what there is on the screen) so that the user could see possible GRUB2 (error) messages on the screen. Additionally cleanup of the get_root_disk_UUID function. See https://github.com/rear/rear/pull/2662 Fixed serial console for syslinux: It writes only one serial line matching the configured device (when found) to the config. It also writes it for the syslinux config in case it is used without extlinux. See https://github.com/rear/rear/pull/2650 Fix function create_grub2_cfg() for the none EFI cases and adds serial console configuration to the GRUB2 config. See https://github.com/rear/rear/pull/2661 Simplifications for USB_BOOTLOADER=\"grub\" and choose the right GRUB2 config /boot/grub/grub.cfg or /boot/grub2/grub.cfg see https://github.com/rear/rear/pull/2659 Cleanup USB format scripts and related code: Now OUTPUT=USB should behave sufficiently OK on BIOS systems with syslinux/extlinux as bootloader with a separated boot partition and without it (still the default). To use OUTPUT=USB on BIOS with syslinux/extlinux with a separated boot partition size of e.g. 1024 MiB specify in etc/rear/local.conf something like OUTPUT=USB USB_BOOT_PART_SIZE=1024 OUTPUT_URL=usb:///dev/disk/by-label/REARBOOT BACKUP=NETFS BACKUP_URL=usb:///dev/disk/by-label/REAR-000 See https://github.com/rear/rear/pull/2660 Fixed format/USB/default/300_format_usb_disk.sh for none EFI cases by adding a BIOS boot partition and setting the 'legacy_boot' flag in case of GPT partitioning. See https://github.com/rear/rear/pull/2656 Added support for GRUB2 as bootloader for OUTPUT=USB via new config variable USB_BOOTLOADER=grub see https://github.com/rear/rear/pull/2655 With the new default USER_INPUT_MAX_CHARS=0 input is not truncated and it also makes correcting the input possible (before [Enter] is pressed) see https://github.com/rear/rear/issues/2622 Update default.conf: Since https://github.com/rear/rear/pull/2633 export TMPDIR=\"...\" in ReaR config files like etc/rear/local.conf does no longer work so now export TMPDIR=\"...\" must be called before calling 'rear' cf. https://github.com/rear/rear/issues/2654 Treat RAID layout value '-unknown-' same as an empty value: In layout/save/GNU/Linux/210_raid_layout.sh treat the RAID layout value '-unknown-' same as an empty value to avoid that layout/prepare/GNU/Linux/120_include_raid_code.sh will create a 'mdadm' command in diskrestore.sh like \"mdadm ... -layout=-unknown- ...\" which would fail during \"rear recover\" with something like \"mdadm: layout -unknown- not understood for raid0\", see https://github.com/rear/rear/issues/2616 Avoid false Error() exit in copy_binaries() in build/GNU/Linux/390_copy_binaries_libraries.sh by skipping 'cp' errors in copy_binaries() (regardless what the reason was why 'cp' failed) but then add the affected binary to REQUIRED_PROGS to verify later that the binary actually exists in the recovery system which should be still sufficient to let ReaR error out if something actually went wrong with needed binaries. See https://github.com/rear/rear/pull/2643 NSR enhancement for point-in-time recovery with EMC Networker client: A new variable NSR_CLIENT_REQUESTRESTORE for the BACKUP=NSR workflow has been introduced to deal with situations in which the NSR client is allowed/granted to perform its recovery action \"on its own\" but does not have full control of the EMC networker service/environment, for details see its default.conf section. See https://github.com/rear/rear/pull/2641 Workaround against DRBD9 restore error \"refusing to be primary while peer is not outdated\" see https://github.com/rear/rear/issues/2634 Cleanup rsync and fix error reporting: See https://github.com/rear/rear/pull/2632 Cleanups of rsync code to use better variable names and local variables, stop using StopIfError, use better redirections etc. Fixed a problem with rsync error detection that caused rsync errors during backup restore to be ignored, see https://github.com/rear/rear/issues/2612 Now a warning is displayed and if BACKUP_INTEGRITY_CHECK is true, it is elevated to an error and ReaR aborts. Furthermore check fake super support only when RSYNC_PROTO=ssh and removed a broken test for -fake-super arg to rsync, cf. https://github.com/rear/rear/pull/2577 Show some stdout and stderr messages also in non-debug modes: In non-debug modes (in particular also in verbose mode) stdout and stderr are redirected to a temporary file STDOUT_STDERR_FILE=TMP_DIR/rear.WORKFLOW.stdout_stderr so in non-debug modes stdout and stderr of all programs is still available for the Error() function to extract some latest messages that get shown on the usrer's terminal and those extracted lines are also copied into the log cf. https://github.com/rear/rear/issues/2623 and https://github.com/rear/rear/issues/2416 and https://github.com/rear/rear/pull/2498 Furthermore the log files and the stdout/stderr file can now only be read by root. Additionally when there is something still mounted within the build area when rear finishes, the user is informed what is mounted and that he must manually umount it before he can (also manually) remove the build area. Finally the Error() and cleanup_build_area_and_end_program() functions are made fail-safe against not yet existing log files and not yet sourced other functions in case of early Error() exits in usr/sbin/rear see https://github.com/rear/rear/pull/2633 Fixed accidental destructive backup removal in exit task and cleanup handling of URL mountpoints: See https://github.com/rear/rear/pull/2625 Cleanup of temporary mount point handling, particularly for output. Unification of mount point umount and cleanup move to the mount_url() and umount_url() functions. Replaced the various \"rm -rf\" of the mountpoint by \"rmdir\" which fixes https://github.com/rear/rear/issues/2611 Added lazy umount in case normal umount does not succeed. If build dir is kept (cf. KEEP_BUILD_DIR), propose a safe way to remove it to the user via \"rm -Rf -one-file-system\" instead of just \"rm -Rf\" where the user risks to remove everything below that mountpoint if still mounted. Fixes also some other bugs noted in the process: Filesystem-specific umount command not called https://github.com/rear/rear/commit/20359a987662cc0c3fcfa52d62d1feac7cd55850#r51319634 Unknown schemes considered invalid, see the discussion under https://github.com/rear/rear/pull/932 Identical scripts under DUPLICITY and YUM replaced by symlinks. Reverted https://github.com/rear/rear/pull/782 that had reintroduced https://github.com/rear/rear/issues/465 which got re-reported as https://github.com/rear/rear/issues/2611 Reverted https://github.com/rear/rear/pull/578 because it is not clear how .lockfile can exist in the unmounted filesystem, and if it does, it is a bug. Reverted https://github.com/rear/rear/commit/d850c4094238a03c9b926b88d7e1582ecd28af52 because it became meanwhile obsoleted by https://github.com/rear/rear/commit/a8fdc445d0d6f7f9184dc6633817928f96aae9bc Add BACKUP_DUPLICITY_OPTIONS to restore/DUPLICITY/default/400_restore_duplicity.sh Additionnal BACKUP_DUPLICITY_OPTIONS options were missing which can cause the recover to fail (options may contain endpoint information for example), see https://github.com/rear/rear/issues/2619 In prep/default/400_save_directories.sh also exclude mountpoints that are below mountpoints of \"type autofs\": Those are below an ancestor mountpoint that is owned/created by the automounter. It is possible to create a sub-mountpoint below an automounted mountpoint but the fact that the sub-mountpoint is not local means it should be excluded (i.e. there is no need to recreate the non-local sub-mountpoint directory), see https://github.com/rear/rear/issues/2610 Better description and error checking for GRUB_RESCUE with UEFI plus some alignment with the create_grub2_cfg function, cf. https://github.com/rear/rear/issues/2545 Better describe GRUB_RESCUE with UEFI in default.conf and in output/default/940_grub2_rescue.sh better error checking plus some alignment with how create_grub2_cfg() creates a GRUB2 config file i.e. no longer \"insmod\" the GRUB2 modules efi_gop efi_uga video_bochs video_cirrus cf. https://github.com/rear/rear/pull/2609#issuecomment-831883795 and the discussion in https://github.com/rear/rear/issues/2388 see https://github.com/rear/rear/pull/2609 Fix setting boot path in case of UEFI partition (ESP) on MD RAID: The code finalize/Linux-i386/670_run_efibootmgr.sh did not support Software RAID. It has to execute the efibootmgr command on the members of the Software RAID, see https://github.com/rear/rear/issues/2595 The ESP may be located on a RAID device. In this case, we need to determine the physical RAID components and call efibootmgr on them. In addition, clean up finalize/Linux-i386/670_run_efibootmgr.sh and add more logging to ease analysis when something goes wrong, see https://github.com/rear/rear/pull/2608 In prep/RSYNC/default/050_prep_rsync.sh adding sleep period to give rsync daemon time to wake up, see https://github.com/rear/rear/pull/2599 Have unused LVM PV devices only as comment in disklayout.conf: PVs that are not part of a VG are documented as comment in disklayout.conf but they are not recreated because they were not used on the original system so there is no need to recreate them by \"rear recover\" see https://github.com/rear/rear/issues/2596 and https://github.com/rear/rear/pull/2603 Automatically shrink LVs if needed during \"rear recover\". This enables to run \"rear recover\" with automated LVM LVs shrinking as needed on a bit smaller replacement disk (e.g. when a nominally same sized replacement disk is actually a bit smaller than the original disk). This automated LVs shrinking is not intended when disk(s) are substantially smaller. To migrate onto a substantially smaller replacement disk the user must in advance manually adapt his disklayout.conf file before he runs \"rear recover\". In layout/prepare/GNU/Linux/110_include_lvm_code.sh assume the command \"lvcreate -L 123456b -n LV VG\" had failed because of \"Volume group ... has insufficient free space\" and then try as fallback attempt using all remaining free space in the VG via \"lvcreate -l 100%FREE -n LV VG\". In layout/save/GNU/Linux/220_lvm_layout.sh sort the 'lvs' output lines by size of the LVs so only some biggest LVs may get automatically shrinked (if needed) because we assume that the data of the backup can still be restored into a big LV after it was shrinked a bit. See https://github.com/rear/rear/pull/2591 Replaced possibly misleading \"USB device\" by generic \"USB or disk device\" wording in user messages (e.g. when a built-in disk /dev/sdc is used that is no USB device). The word \"USB\" indicates that those messages belong to the OUTPUT=USB method, cf. https://github.com/rear/rear/pull/2589#issuecomment-805649510 and https://github.com/rear/rear/issues/2588 and https://github.com/rear/rear/pull/2589 Wipe disks before recreating partitions/volumes/filesystems/... see https://github.com/rear/rear/issues/799 See the new DISKS_TO_BE_WIPED in default.conf and for details see usr/share/rear/layout/recreate/default/README.wipe_disks This is currently new and experimental functionality so that currently by default via DISKS_TO_BE_WIPED='false' no disk is wiped to avoid possible regressions until this new feature was more tested by interested users via an explicit DISKS_TO_BE_WIPED setting in local.conf see https://github.com/rear/rear/pull/2514 In etc/scripts/system-setup.d/41-load-special-modules.sh load the nvram kernel module if possible to make /dev/nvram appear because /dev/nvram should be there when installing GRUB, see https://github.com/rear/rear/issues/2554 and include the nvram kernel module in the recovery system because nvram could be a module in particular on POWER architecture see https://github.com/rear/rear/issues/2554#issuecomment-764720180 and https://github.com/rear/rear/pull/2580 Make 400_copy_modules.sh fail-safe for newer modinfo output (in particular modinfo in kmod-27 since SLES15-SP3) because otherwise copying builtin kernel \"modules\" would let \"rear mkrescue\" error out with e.g. \"ERROR: unix exists but no module file?\". Furthermore ensure that kernel modules that should be loaded during recovery system startup (i.e. those in MODULES_LOAD) get always copied into the recovery system. See https://github.com/rear/rear/pull/2579 In 300_format_usb_disk.sh adapt USB_UEFI_PART_SIZE fallback value to 512 to be in compliance with the new default.conf setting of 512 MiB since https://github.com/rear/rear/commit/9a6b9a109aa77afc6c96cf05bbd7988cf0310d61 that was done in relation to https://github.com/rear/rear/pull/2576 see also https://github.com/rear/rear/issues/2602 Do not specify '-F 16' for mkfs.vfat and also no '-o fat=16' when mounting it but rely on the mkfs.vfat automatic FAT type selection (which is FAT16 up to 511 MiB and FAT32 starting at 512 MiB at least on openSUSE Leap 15.2 with mkfs.vfat from dosfstools-4.1) and rely on the automatic FAT type detection when mounting, cf. https://github.com/rear/rear/issues/2575 and increase the default ESP size to USB_UEFI_PART_SIZE=\"512\" to get by default (via mkfs.vfat) a FAT32 ESP to be in compliance that \"the ESP should officially use a FAT32 filesystem\" to avoid possible FAT16 ESP issues with certain UEFI firmware. See https://github.com/rear/rear/pull/2576 Update 230_filesystem_layout.sh: Increase the 'docker info' timeout value from 5 seconds to 10 seconds because sometimes 'docker info' needs more than 5 seconds to finish, cf. https://github.com/rear/rear/pull/2572#issuecomment-784110872 Support loop devices in format_usb_disk see https://github.com/rear/rear/pull/2555 Update 110_include_lvm_code.sh: Make sure we delete the volume group before re-creating it. The issue happens in Migration mode when ReaR is not trying to use vgcfgrestore. See https://github.com/rear/rear/pull/2564 In usr/share/rear/output/ISO/Linux-i386/700_create_efibootimg.sh add 2 more 32MiB blocks to be on the safe side against inexplicable failures like \"cp: error writing '/tmp/rear.XXX/tmp/efi_virt/./EFI/BOOT/elilo.conf': No space left on device\" where the above calculated $efi_img_sz is a bit too small in practice, see https://github.com/rear/rear/issues/2552 Add terminal password check via 'TTY_ROOT_PASSWORD' and describe it in default.conf, see https://github.com/rear/rear/pull/2539 Changes for NetBackup (NBU) support: Copy NetBackup PBX related files to the rescue system and start vxpbx_exchanged on boot. Add /usr/openv/tmp directory to the NBU skeleton. See https://github.com/rear/rear/pull/2544 RAWDISK: Add local rescue partition installation capability: Introduce a configuration variable 'RAWDISK_INSTALL_GPT_PARTITION_NAME', which is unset by default. When set, the rescue system will be installed to local disk partitions having the corresponding name. RAWDISK: fix local rescue partition installs (unmount before copying): While the recently created EFI boot partition is still mounted, its file system might not be fully synced. Unmounting ensures that the underlying loop block device is up to date before possibly being copied to local disk partitions. See https://github.com/rear/rear/pull/2538 BACKUP=BACULA: Make bacula aware of different location of config files see https://github.com/rear/rear/pull/2535 In layout/prepare/GNU/Linux/131_include_filesystem_code.sh fixed vfat mkfs using uuid from layout if possible see https://github.com/rear/rear/pull/2546 Completely overhauled USB filesystem kernel module handling: In prep/USB/default/380_copy_usb_fs_module.sh do no longer unconditionally add the USB filesystem to the MODULES and MODULES_LOAD arrays because there are systems where the USB filesystem (e.g. 'ext3') is no kernel module and then (via MODULES_LOAD and /etc/modules) \"modprobe ext3\" would fail in 40-start-udev-or-load-modules.sh with a false alarm \"modprobe: FATAL: ... ext3 not found ...\" message that would appear on the user's terminal during recovery system startup. See https://github.com/rear/rear/pull/2537 Add DP_LD_LIBRARY_PATH to include shared libraries used by BACKUP=DP see https://github.com/rear/rear/pull/2549 POWER architecture (ppc64) support for BACKUP=DP: Other platforms supporting the Data Protector Disk Agent, but not the Cell Console (GUI) that is only available on i386, x86_64 and ia64 are now supported with ReaR. This includes in particular ppc64. Checks unavailable on clients without the Data Protector Cell Console (GUI) are skipped. In such cases backup restore can be done using Data Protector GUI only. BACKUP=NBKDC: Enhanced ReaR backup and restore to also work with NovaStor DataCenter 8.0 and higher plus fixed wording \"NovaBACKUP DC\" -> \"NovaStor DC\", see https://github.com/rear/rear/issues/2518 Provide final power to the user to skip the ISO_FILE_SIZE_LIMIT test: Skip the assert_ISO_FILE_SIZE_LIMIT function when there is no usable ISO_FILE_SIZE_LIMIT set so the user could specify ISO_FILE_SIZE_LIMIT=0 in his etc/rear/local.conf if he wants to skip the ISO_FILE_SIZE_LIMIT test. Aditionally enforce maximum 2GiB ISO_FILE_SIZE_LIMIT when the MODULES array contains 'loaded_modules' because MODULES+=( udf ) has no effect in this case unless it is loaded (which normally isn't). Error out when files greater or equal ISO_FILE_SIZE_LIMIT should be included in the ISO: See the reasoning in default.conf why the default ISO_FILE_SIZE_LIMIT is 2GiB and why we error out when files >= ISO_FILE_SIZE_LIMIT should be included in the ISO. It is needed to aviod possibly disastrous failures later during \"rear recover\" that users who exceed that limit in exceptional cases get a hard (error) info to thoroughly test and verify whether or not things actually work for them. See https://github.com/rear/rear/pull/2525 Completely overhauled ldd test in 990_verify_rootfs.sh: Now if needed a special LD_LIBRARY_PATH is set only in the bash that runs ldd and that bash exits after ldd finished so the special LD_LIBRARY_PATH setting is gone with it. So there is no need to remember and restore some previously set LD_LIBRARY_PATH because nothing was changed in the bash that runs rear. Furthermore reporting when a binary requires additional libraries happens now in the same 'for' loop after the ldd test was run which further simplifies the code. See https://github.com/rear/rear/pull/2523 Skip the ldd test for ReaR files: In build/default/990_verify_rootfs.sh skip the ldd test for ReaR files (mainly bash scripts) where it does not make sense, cf. https://github.com/rear/rear/issues/2519#issuecomment-731196820 In 500_clone_keyboard_mappings.sh have more neutral wording in messages about possible keyboard issues and don't be needlessly verbose: It seems newer Debian-based systems (including Ubuntu) no longer contain any keymaps directory as part of the base system by default so including multi-keyboard support into the recovery system is impossible there. If the distro provides console-multi-keyboard support, ReaR includes it (without being verbose). If the distro has decided that this is not necessary, ReaR aligns with it (without being verbose). If the user has installed multi-keyboard support, ReaR aligns with it (without being verbose). Only when including the current keyboard mapping failed (i.e. when 'dumpkeys' failed) it shows subsequent messages on the user's terminal in any case. See https://github.com/rear/rear/issues/2519 and https://github.com/rear/rear/pull/2520 Restore LD_LIBRARY_PATH after reporting binaries with 'not found' libraries: In build/default/990_verify_rootfs.sh restore the LD_LIBRARY_PATH after reporting binaries with 'not found' shared object dependencies so that results are the same for the first 'ldd' run that finds binaries with 'not found' shared objects dependencies and the second 'ldd' run that reports those 'not found' shared objects dependencies, see https://github.com/rear/rear/issues/2508#issuecomment-725914211 Improved TCG Opal 2 documentation doc/user-guide/13-tcg-opal-support.adoc cf. https://github.com/rear/rear/issues/2511 Better explained OS installation according to the suggestion in https://github.com/Drive-Trust-Alliance/sedutil/issues/301#issuecomment-723010843 Additionally some information from an article on Ask Ubuntu are included https://askubuntu.com/a/1271171/1120528 Make recreating LUKS volumes work with optional cryptsetup options: The \"cryptseup luksFormat\" command does not require any of the type, cipher, key-size, hash, uuid option values because if omitted a cryptseup default value is used, cf. https://github.com/rear/rear/pull/2504#issuecomment-720341023 The right UUID values are mandatory for LUKS volumes that will be mounted during startup of the recreated system. But this does not mean ReaR should error out when there is no cryptsetup uuid value because it is possible to run \"rear recover\" with enforced MIGRATION_MODE and manually correct the restored /mnt/local/etc/crypttab file to use the new UUIDs before the initrd is recreated and the bootloader is (re)-installed cf. https://github.com/rear/rear/issues/2509 Allow setting a PBA-specific firmware configuration via the new OPAL_PBA_FIRMWARE_FILES configuration variable. Add '.../amdgpu/*' firmware files for AMD graphics hardware (if present) on TCG Opal pre-boot authentication (PBA) images, cf. https://github.com/rear/rear/issues/2474 Support OPAL 2 self-encrypting NVMe disk drives: Normally the OPAL device itself is used directly but NVMe devices have one or more namespaces per primary device and these namespaces act as disks, cf. https://github.com/rear/rear/issues/2475 Added initial LUKS2 support, see https://github.com/rear/rear/issues/2204 Added new parameter 'type' to 'crypt' keyword used in disklayout.conf. Using this parameter allows to recreate the same version of LUKS as on the original system. Added LUKS version detection, parsing depending on version and usage of 'type' parameter. New 036_valid_output_methods.sh to error out for unsupported OUTPUT methods: For \"rear mkbackup/mkrescue/mkbackuponly/mkopalpba\" (i.e. for all workflows that run the 'prep' stage) check that the OUTPUT method is actually implemented i.e. check that a usr/share/rear/output/$OUTPUT directory exists and error out when an OUTPUT method seems to be not supported to ensure that the user cannot specify a non-working OUTPUT in etc/rear/local.conf (cf. usr/share/rear/prep/default/035_valid_backup_methods.sh) see https://github.com/rear/rear/issues/2501 Redirect stdout and stderr to the log only in debug modes. In normal modes stdout and stderr are discarded (go now to /dev/null). The reason is to get rid of messages from command stdout and stderr that don't make sense for the user on their own unless there is more information in the log that provides context about the called command (e.g. what exact command was called in debugscript mode) see https://github.com/rear/rear/issues/2416 and https://github.com/rear/rear/pull/2498 More verbose messages when components are excluded so that is is easier for the user to see directly on his terminal what the actual results are when he specified to exclude components in his etc/rear/local.conf and what components are automatically excluded by ReaR. The verbosity depends on if ReaR is run in verbose '-v' mode or even in debug '-d' or '-D' mode. Inform the user about unsupported LUKS2 volumes but do not error out see https://github.com/rear/rear/issues/2491 plus some general code cleanup and improvements in layout/save/GNU/Linux/260_crypt_layout.sh Update 05-integration.adoc: Explain that error messages in ReaR's log may not come from ReaR itself but from programs that are called by ReaR because stdout and stderr are redirected into ReaR's log file, cf. https://github.com/rear/rear/issues/2479 Have 'cd WORKING_DIR' in Source() function: Ensure that after each sourced file we are back in ReaR's usual working directory which is the current working directory when usr/sbin/rear is launched that is also the working directory of all the other scripts and config files that get sourced via the Source() function in lib/framework-functions.sh see https://github.com/rear/rear/issues/2461 In 400_copy_modules.sh skip copying kernel modules that are builtin modules. The new behaviour is that when modules are listed in modules.builtin and are also shown by modinfo then those modules are now skipped. Before for such modules the modules file(s) would have been included in the recovery system. See https://github.com/rear/rear/issues/2414 In backup/NETFS/default/500_make_backup.sh filter purely informational tar messages from output: Suppress purely informational tar messages from output like \"tar: Removing leading / from member names\" or \"tar: Removing leading / from hard link targets\" or \"tar: /path/to/socket: socket ignored\" but keep actual tar error or warning messages like \"tar: /path/to/file: file changed as we read it\" and show only messages that are prefixed with the name of the failed program (like 'tar:' or 'dd:') which works when tar or dd fail but falsely suppresses messages from openssl which needs to be fixed later, cf. https://github.com/rear/rear/pull/2466#discussion_r466347471 Fixed exit code logic in backup/NETFS/default/500_make_backup.sh: Commit https://github.com/rear/rear/commit/2674807f6ad48da80b193ae977d345ad2ef5fdd1 removed the BACKUP_PROG_CRYPT_OPTIONS=\"cat\" dummy code which broke the exit code logic because pipes_rc and backup_prog_shortnames did no longer match. Additionally ensure that the number of elements in both arrays are always the same. Use ReaR specific TMP_DIR (not TMPDIR or hardcoded /tmp) plus some general cleanup work as noticed \"by the way\" in scripts, see https://github.com/rear/rear/issues/2460 and https://github.com/rear/rear/pull/2462 Adaptions and enhancements for BACKUP=CDM because the RBS agent file name changed in Rubrik CDM v5.1 from rubrik-agent-sunos5.10.sparc.tar.gz to rubrik-agent-solaris.sparc.tar.gz see https://github.com/rear/rear/issues/2441 Let 'dd' read and write up to 1M=1024*1024 bytes at a time to speed up things cf. https://github.com/rear/rear/issues/2369 and https://github.com/rear/rear/issues/2458 In default.conf change ISO_VOLID from \"RELAXRECOVER\" to \"REAR-ISO\" so the first ISO has the label \"REAR-ISO\" (8 characters) and subsequent ISOs get the labels \"REAR-ISO_01\" \"REAR-ISO_02\" ... respectively that have 11 characters (the maximum length for FAT volume names) so things work now by default when the ISO image is used to (manually) create a FAT bootable USB stick, cf. https://github.com/rear/rear/issues/1565 and https://github.com/rear/rear/issues/2456 OPALPBA: Provide a permanent unlocking mode as a workaround because https://github.com/rear/rear/pull/2426 did not resolve the issue https://github.com/rear/rear/issues/2425 where for an HPE ML10Gen9 server it seems the firmware did not initialize properly during a 'simple' reboot so the only reliable way to boot was a power cycle after Opal disks were unlocked. To reboot with unlocked disks there is now a new unlocking mode \"permanent\" via OPAL_PBA_UNLOCK_MODE (see default.conf). Reactivating locking is then the responsibility of the user. Additionally enhanced security by disabling shell access via keyboard interrupt and switching to a password hash for OPAL_PBA_DEBUG_PASSWORD. Use single quotes in the password settings examples because single quotes avoid issues with the special bash characters like $ in the password, cf. https://github.com/rear/rear/pull/2178 Update format-workflow.sh: For \"rear format\" show \"Use 'rear format - -help' for more information\" also when a \"rear format\" argument is not accepted to help the user what the right syntax is (e.g. \"rear format help\" and \"rear format - help\" do not work, only \"rear format - -help\" works) and provide a more helpful example \"rear -v format - -efi /dev/sdX\" that is actually neded for UEFI. Support for systemd and parallel restore with Data Protector BACKUP=DP: Support starting Data Protector daemon 'omni.socket' via systemd in the recovery system. Restore performance has been increased by doing parallel restores now. Additional new script usr/share/rear/finalize/DP/default/500_restore_ssc.sh to restore the client certificate when Data Protector Secure Communication is used. Plus several general script cleanup things. See https://github.com/rear/rear/pull/2443 Supply default value for root in grub in UEFI ISO: Sometimes the search command in GRUB2 used in UEFI ISO does not find the root device. This was seen at least in Debian Buster running in Qemu (VirtualBox works fine, RHEL/CentOS in Qemu works fine as well). To make ReaR work in this case, set $root to a sensible value before trying search. The GRUB2 image created by grub-mkstandalone has $root set to memdisk, which can't work. This essentially matches how it used to work before https://github.com/rear/rear/pull/2293 and fixes https://github.com/rear/rear/issues/2434 Update 300_format_usb_disk.sh: In format/USB/default/300_format_usb_disk.sh when prompting user for size of EFI system partition on USB disk if no valid value is specified also use 400 MiB as default (same as the default value in default.conf) cf. https://github.com/rear/rear/pull/1205#issuecomment-433336977 and https://github.com/rear/rear/commit/89e6a47c82fbfe8d059a4647755f94750fe28acc Replaced $DATE usage with consistent variables START_SECONDS START_DATE_TIME_NUMBER and START_DATE_TIME_STRING see https://github.com/rear/rear/pull/2452 Various TCG Opal Improvements: OPALPBA, Ubuntu: Fix incomplete file exclusions: Fixes omissions reported in https://github.com/rear/rear/issues/2436 Uses COPY_AS_IS_EXCLUDE where possible. Removes files from the PBA system's staging directory where not copying could not be configured. OPALPBA: Improve boot splash on Ubuntu 20.04: Takes into account a change from VT1 to VT7 to hide log messages during the boot process. Improves Plymouth boot splash usage to hide log messages during the reboot after unlocking disks. opaladmin: Add sub-commands 'deactivate', 'reactivate': Makes turning on and off hardware encryption easier on provisioned drives. TCG Opal-2: simplify quoting in messages and replace 'StopIfError' use cf. https://github.com/rear/rear/commit/daf35e235d0770c663ff8dba866dddec76586a27 Explicitly issuing an unlock command before reactivating locking ensures that the device remains in an unlocked state when locking is reactivated. Add an explanatory comment in lib/_input-output-functions.sh that using the ...IfError functions can result unexpected behaviour in certain cases cf. https://github.com/rear/rear/pull/2443#pullrequestreview-440609407 and https://github.com/rear/rear/issues/534 and https://github.com/rear/rear/issues/1415#issuecomment-315692391 Migrate XFS configuration files. When in MIGRATION_MODE, migrate/rename XFS configuration files so they follow disk mapping set by user. See https://github.com/rear/rear/issues/2333 Supported and Unsupported Operating Systems \u00b6 We try to keep our wiki page Test Matrix ReaR 2.7 https://github.com/rear/rear/wiki/Test-Matrix-ReaR-2.7 up-to-date with feedback we receive from the community. ReaR 2.7 is supported on the following Linux based operating systems: Fedora 29, 30, 31, 32, 33, and 34 RHEL 6, 7, 8, and 9 CentOS 6, 7, and 8 Scientific Linux 6 and 7 SLES 12 and 15 openSUSE Leap 15.x Debian 8, and 9 Ubuntu 16, 17, 18 and 20 ReaR 2.7 dropped official support for the following Linux based operating systems: Fedora < 29 RHEL < 6 CentOS < 6 Scientific Linux < 6 SLES < 12 openSUSE Leap 42.x and before (i.e. openSUSE <= 13) openSUSE Tumbleweed Debian < 8 Ubuntu < 16 Usually ReaR 2.7 should also work on newer versions of the above listed supported Linux based operating systems but sometimes arbitrary failures can happen when software that is used by ReaR (like partitioning tools, filesystem tools, bootloader tools, ISO image creating tools, networking tools, and so on) changes in not fully backward compatible ways or when there are innovations of the basic system (like kernel, storage, bootloader, init, networking, and so on) that are not yet supported by ReaR. In theory ReaR 2.7 should work on openSUSE Tumbleweed but in practice arbitrary failures could happen at any time because the Tumbleweed distribution is a pure rolling release version of openSUSE containing the latest stable versions of all software (cf. https://en.opensuse.org/Portal:Tumbleweed) so arbitrary changes of any software are possible at any time that could arbitrarily break how ReaR works. ReaR 2.7 may still work for SLES 11 and openSUSE Leap 42.x or even earlier openSUSE versions but it is no longer sufficiently well tested there so arbitrary regressions could appear. For example recreating LUKS encrypted volumes does no longer work with SLES11 SP4 because cryptsetup 1.1.3 in SLES11 SP4 does not support UUID and some other cryptsetup options that are used by default in ReaR 2.7. ReaR 2.7 and earlier versions are known to no longer work reasonably well for the following Linux based operating systems: RHEL 5 (and probably also CentOS 5): See issue #1766 SLES 9 and 10: See issue #1842 If you require support for unsupported Linux operating systems you must acquire a ReaR support contract. Requests to port ReaR to another operating system (not Linux) can only be achieved with serious sponsoring. Supported and Unsupported Architectures ReaR 2.7 is supported on: Intel x86 type of processors AMD x86 type of processors PPC64 processors PPC64LE processors ReaR 2.7 may or may not work on: Intel Itanium processors ARM type of processors IBM Z \"s390x\" type of processors ReaR 2.7 does not support: old PPC (32bit) processors If you feel the need to get a fully functional ReaR working on one of the above mentioned types of processors please buy consultancy from one of our official developers. Supported ReaR versions \u00b6 ReaR has a long history (since 2006) and we cannot support all released versions. If you have a problem we urge you to install the latest stable ReaR version or the development version (available on GitHub) before submitting an issue. We understand that it is not always possible to install on hundreds of systems the latest version so we are willing to support previous versions of ReaR when you buy a support contract. We cannot handle the big amount of support requests anymore on a voluntary base and we must give paid projects priority, therefore, we urge our customers to buy a support contract for one or more systems. You buy time with our core developers.","title":"Release Notes ReaR 2.7"},{"location":"releasenotes/rear27.html#release_notes_for_relax-and-recover_version_27","text":"This document contains the release notes for the open source project Relax-and-Recover. Relax-and-Recover website GitHub project","title":"Release Notes for Relax-and-Recover version 2.7"},{"location":"releasenotes/rear27.html#product_features","text":"The following features are supported by the most recent releases of Relax-and-Recover. Anything labeled as ( New ) was added as the most recent release. New functionality for previous releases can be seen in the next chapter that details each release. The most recent release of Relax-and-Recover is supported on most GNU/Linux based systems with kernel 2.6 or higher. It provides the following functionality: Hot maintenance capability. A recovery/rescue image can be made online while the system is running Command line interface. Relax-and-Recover does not require a graphical interface to run, neither in creation mode, nor in recovery mode (console is enough) Support included for most common file systems, such as ext2, ext3, and ext4. Other filesystems like reiserfs, jfs, xfs, and btrfs are also implemented, but are less tested. (Feedback is appreciated) Selected Hardware RAID and (eg. HP SmartArray) and mirroring solutions (eg. DRBD) are supported NVME and mmcblk disks are supported LVM root volumes are supported Multipath support for SAN storage UEFI support (including UEFI USB booting) Integrates with internal backup programs such as: GNU tar (BACKUP=NETFS, BACKUP_PROG=tar) GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=incremental, FULLBACKUPDAY=\"Mon\") for using incremental backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_TYPE=differential, FULLBACKUPDAY=\"Mon\") for using differential backups with a weekly full backup. Be aware, old tar archives will not be removed automatically! GNU tar with openssl encryption (BACKUP=NETFS, BACKUP_PROG=tar, BACKUP_PROG_CRYPT_ENABLED=1) rsync on local devices (BACKUP=NETFS, BACKUP_PROG=rsync), such USB and local disks rsync over the network (BACKUP=RSYNC, BACKUP_PROG=rsync) Multiple backup methods ( read the documentation ) Any partition (e.g. a Windows partition) via BACKUP=BLOCKCLONE. See the documention about BLOCKCLONE BACKUP=ZYPPER is SLES12 only ( Experimental ) BACKUP=YUM is for RedHat architectures ony ( Experimental ) Integrates with external backup solutions such as: Tivoli Storage Manager (BACKUP=TSM) Data Protector (BACKUP=DP) Symantec NetBackup (BACKUP=NBU) Galaxy 5, 6, and 7 (BACKUP=GALAXY) Galaxy 10 [Commvault Simpana] (BACKUP=GALAXY10) Bacula (BACKUP=BACULA) Bareos (BACKUP=BAREOS) (A fork of Bacula) Rsync Backup Made Easy (BACKUP=RBME) Duplicity/Duply (BACKUP=DUPLICITY) EMC Networker, also known as Legato (BACKUP=NSR) EMC Avamar (BACKUP=AVA) SEP Sesam (BACKUP=SESAM) FDR/Upstream (BACKUP=FDRUPSTREAM) Novastor NovaBACKUP DC (BACKUP=NBKDC) Borg Backup (BACKUP=BORG) Rubrik Cloud Data Management (BACKUP=CDM) ( New ) Integrates with Disaster Recovery Linux Manager (DRLM) Udev support (except for some really ancient udev versions) which is the base for many important features: kernel drivers for network cards and storage adapters are loaded via udev deal with network persistent names in udev rules firmware loading persistent storage device names (though Relax-and-Recover does nothing with this) Systemd support for the more recent Linux distributions System migration and reconfiguration ('MIGRATION_MODE') facilitate recovery on hardware, that is not the same as the original system network and storage drivers are adjusted map hard disks if they do not match (e.g. hda -> sda) remap network MAC addresses use another IP address, or using dhcp via templates or from kernel command line rebuild the initial ramdisk if needed (for new storage drivers) migration to SAN storaged Support backup software: Bacula, both locally attached tapes (with bextract) and network-based backups. Also, in combination with OBDR tapes. Create OBDR tapes with method mkbackup and put the backup onto the tape to have a single-tape bootable recovery solution Label the OBDR tape with the method format to avoid accidental overwrites with OBDR Create bootable disk (eSATA, USB ...) medium with the backup included: BACKUP_URL=usb:///dev/device Together with OUTPUT=USB we have a complete solution on hard disks (booting of it and restoring data). DHCP client support (IPv4 and IPv6). Dhcp client activation can be forced via the variable USE_DHCLIENT=yes (define in /etc/rear/local.conf ). It is also possible to force DHCP at boot time with kernel option dhcp USE_STATIC_NETWORKING=y , will cause statically configured network settings to be applied even when USE_DHCLIENT is in effect Save layout and compare layouts for automation of making Relax-and-Recover snapshots (checklayout option) External USB booting uses extlinux (instead of syslinux), and therefore, the USB disk must first be formatted with an ext2, ext3, ext4 or btrfs based file system VLAN tagging, teaming and bridge support Add timestamp of ReaR run with rc code to the syslog or messages file; sending mail report is also possible The possibility to backup any partition (in particular a Windows partition) via the BACKUP type BLOCKCLONE Unattended ReaR recovery has been improved Improved security model related to SSH keys SSH_FILES='avoid_sensitive_files' (see details in /usr/share/rear/conf/default.conf ) SSH_UNPROTECTED_PRIVATE_KEYS='no' (see details in /usr/share/rear/conf/default.conf ) LUKS2 Support Note Features marked Experimental are prone to change with future releases.","title":"Product Features"},{"location":"releasenotes/rear27.html#rear_release_27_july_2022","text":"","title":"ReaR release 2.7 (July 2022)"},{"location":"releasenotes/rear27.html#new_features_bigger_enhancements_and_possibly_backward_incompatible_changes","text":"ReaR's default TMPDIR is now /var/tmp (it was /tmp before) i.e. ReaR's default working area is now /var/tmp/rear.XXXXX because ReaR needs lots of space (from 300MB up to more than 1GB) to build the ReaR rescue/recovery system e.g. as ISO image and even much more space to also store the backup archive e.g. when the backup should be included in the ISO image. The system's default temporary directory /tmp is no longer suited as default temporary directory for ReaR because nowadays /tmp is often a \"tmpfs\" that is in RAM so /tmp has RAM/swap limitations and file-hierarchy(7) recommends to use /var/tmp for cases as ReaR. If the user sets TMPDIR explicitly, it still takes precedence. Stop ReaR from possibly overwriting its own disk and backup drives for OUTPUT=USB and OUTPUT=RAWDISK via new WRITE_PROTECTED_... config variables (see /usr/share/rear/conf/default.conf ) where UUIDs or filesystem labels can be specified so that disks that contain such UUIDs or filesystem labels will be 'write protected' during \"rear recover\". Added initial LUKS2 support. Overhauled RAID code with changed RAID related entries in /var/lib/rear/layout/disklayout.conf so users who use RAID and a selfmade /etc/rear/disklayout.conf must adapt their RAID related entries Initial preliminary basic support to automatically resize an active last partition on RAID0 and RAID1 disks to be able to automatically resize RAID0 and RAID1 arrays Automatically shrink LVs if needed during \"rear recover\". This enables to run \"rear recover\" with automated LVM LVs shrinking as needed on a bit smaller replacement disk (e.g. when a nominally same sized replacement disk is actually a bit smaller than the original disk). This automated LVs shrinking is not intended when disk(s) are substantially smaller. To migrate onto a substantially smaller replacement disk the user must in advance manually adapt his disklayout.conf file before he runs \"rear recover\". Support to wipe disks before recreating partitions/volumes/filesystems/... (see the new DISKS_TO_BE_WIPED in /usr/share/rear/conf/default.conf ). This is currently new and experimental functionality so that currently by default via DISKS_TO_BE_WIPED='false' no disk is wiped to avoid possible regressions until this new feature was more tested by interested users via an explicit DISKS_TO_BE_WIPED setting. Error out when files greater or equal ISO_FILE_SIZE_LIMIT should be included in the ISO: See the reasoning in /usr/share/rear/conf/default.conf why the default ISO_FILE_SIZE_LIMIT is 2GiB and why we error out when files >= ISO_FILE_SIZE_LIMIT should be included in the ISO. Rsync OUTPUT_URLs are now properly supported with BACKUP=RSYNC . Previously the output went to the location specified by BACKUP_URL and OUTPUT_URL was ignored. One exception was OUTPUT=PXE , where the output was uploaded to OUTPUT_URL in addition to BACKUP_URL , but RSYNC_PREFIX was not respected and the interpretation of the URL was different: A URL of the form rsync://[USER@]HOST[:PORT]/PATH was interpreted as using the rsync protocol, while in all other cases such URL would be interpreted as using rsync over ssh. This special handling is now removed: An rsync OUTPUT_URL with OUTPUT=PXE now creates the RSYNC_PREFIX directory at the destination and the URL is interpreted as in all other cases. RAWDISK: Add local rescue partition installation capability: Introduce a configuration variable RAWDISK_INSTALL_GPT_PARTITION_NAME , which is unset by default. When set, the rescue system will be installed to local disk partitions having the corresponding name. Allow setting a PBA-specific firmware configuration via the new OPAL_PBA_FIRMWARE_FILES configuration variable. Support OPAL 2 self-encrypting NVMe disk drives. OPALPBA : Provide a permanent unlocking mode as a workaround when the firmware did not initialize properly during a 'simple' reboot so the only reliable way to boot was a power cycle after Opal disks were unlocked. To reboot with unlocked disks there is now a new unlocking mode \"permanent\" via OPAL_PBA_UNLOCK_MODE (see default.conf). Reactivating locking is then the responsibility of the user. Additionally enhanced security by disabling shell access via keyboard interrupt and switching to a password hash for OPAL_PBA_DEBUG_PASSWORD . POWER architecture (ppc64) support for BACKUP=DP : Other platforms supporting the Data Protector Disk Agent, but not the Cell Console (GUI) that is only available on i386, x86_64 and ia64 are now supported with ReaR. This includes in particular ppc64. Checks unavailable on clients without the Data Protector Cell Console (GUI) are skipped. In such cases backup restore can be done using Data Protector GUI only. NSR enhancement for point-in-time recovery with EMC Networker client: A new variable NSR_CLIENT_REQUESTRESTORE for the BACKUP=NSR workflow has been introduced to deal with situations in which the NSR client is allowed/granted to perform its recovery action \"on its own\" but does not have full control of the EMC networker service/environment, for details see its default.conf section. BACKUP=NBKDC : Enhanced ReaR backup and restore to also work with NovaStor DataCenter 8.0 and higher plus fixed wording \"NovaBACKUP DC\" -> \"NovaStor DC\" Support for systemd and parallel restore with Data Protector BACKUP=DP : Support starting Data Protector daemon 'omni.socket' via systemd in the recovery system. Restore performance has been increased by doing parallel restores now. Now \"rear format\" has in addition to the -efi switch a -bios switch. If none is given (i.e. by default) it will now do hybrid formatting with a BIOS boot partition (on GPT) and an EFI system partition. Accordingly the USB_DEVICE_PARTED_LABEL default is no longer \"msdos\" (see the updated description in /usr/share/rear/conf/default.conf) . This is a starting point for implementing OUTPUT=USB support for UEFI and BIOS dual boot from the same medium. See issue 2698 , issue 2818 and issue 2829 Overhauled serial console support code. A serial console of the ReaR recovery system can now be specified separately for the kernel and the recovery system bootloader via the generic config variables USE_SERIAL_CONSOLE and SERIAL_CONSOLE_DEVICES and specific config variables SERIAL_CONSOLE_DEVICES_KERNEL , SERIAL_CONSOLE_DEVICE_SYSLINUX and SERIAL_CONSOLE_DEVICE_GRUB (see /usr/share/rear/conf/default.conf for details) Support for HTTP sources when using PXE: There is a new config variable PXE_HTTP_URL to specify a HTTP download source for PXE. See the PXE_HTTP_URL description in /usr/share/rear/conf/default.conf In /usr/share/rear/conf/default.conf changed ISO_VOLID from \"RELAXRECOVER\" to \"REAR-ISO\" so the first ISO has the label \"REAR-ISO\" (8 characters) and subsequent ISOs get the labels \"REAR-ISO_01\" \"REAR-ISO_02\" ... respectively that have 11 characters (the maximum length for FAT volume names) so things work now by default when the ISO image is used to (manually) create a FAT bootable USB stick Accordingly 'RELAXRECOVER' in variable names was replaced. In particular the user config variable for automated input USER_INPUT_RELAXRECOVER_SYMLINK_TARGET was renamed as USER_INPUT_ISO_SYMLINK_TARGET so only that new name will work.","title":"New features, bigger enhancements, and possibly backward incompatible changes:"},{"location":"releasenotes/rear27.html#details_mostly_in_chronological_order_-_newest_topmost","text":"Refactor rsync URL support, fixes rsync OUTPUT_URL : The code to parse rsync:// URLs was BACKUP_URL specific. If one specified BACKUP=RSYNC and an OUTPUT_URL different from BACKUP_URL , the OUTPUT_URL was ignored and the output files went to BACKUP_URL. Fix by introducing generic functions for rsync URL parsing and use them for both BACKUP_URL and OUTPUT_URL, as appropriate. Replace all uses of global RSYNC_* variables derived from BACKUP_URL by those functions. There also was inconsistent special handling for OUTPUT=PXE which is now removed: An rsync OUTPUT_URL with OUTPUT=PXE now creates the RSYNC_PREFIX directory at the destination and the URL is interpreted as in all other cases. See issue 2831 and issue 2781 Support creation of EFI system partition on systems with older 'parted' that do not support the 'esp' keyword: In format/USB/default/300_format_usb_disk.sh try sgdisk ... --typecode=\"partition_number:EF00\" as fallback when parted ... set partition_number esp on failed. See issue 2830 Set USB_DEVICE_PARTED_LABEL to match format-workflow.sh : In format/USB/default/300_format_usb_disk.sh it is set depending on the format workflow option -b/--bios or -e/--efi and in in prep/USB/Linux-i386/340_find_mbr_bin.sh try to autodetect what the USB disk partition type is and use a specified USB_DEVICE_PARTED_LABEL if autodetection fails. See issue 2829 In usr/sbin/rear enhanced the check for other simultaneously running 'rear' to let it find running 'rear' instances independent of how it was called by the user in particular also when 'rear' is run from a GitHub checkout/clone cf. issue 2826 In usr/share/rear/lib/format-workflow.sh do actually recognise -b/--bios options, see issue 2828 In layout/prepare/GNU/Linux/110_include_lvm_code.sh use a fail-safe 'yes' pipe for \"lvm lvcreate\" to pipe as many 'y' as asked for into \"lvm lvcreate\" see issue 513 and issue 2820 Avoid creating a /bin/vim symlink to vi: The symlink is more confusing than helpful: If one has both vi and vim, and they are different (vi usually has less features), one expects to get the more featureful version by executing \"vim\", but one gets \"vi\". More importantly, in recent Fedora and RHEL, \"vi\" is a shell script that executes \"vim\" if found, so linking \"vim\" to \"vi\" leads to an infinite loop. See issue 2822 RPM spec: update build requirement for Fedora to unblock Packit build and run make validate after build, see issue 2816 In finalize/Linux-i386/660_install_grub2.sh explain that it is also used as fallback to install the nowadays most often used bootloader GRUB2 unless the BOOTLOADER variable tells to install another bootloader (other bootloader install scripts check the BOOTLOADER variable), cf. https://github.com/rear/rear/issues/2817#issuecomment-1148488339 Replace 'RELAXRECOVER' in variable names: In lib/global-functions.sh in the function mount_url() renamed the user config variable for automated input USER_INPUT_RELAXRECOVER_SYMLINK_TARGET as USER_INPUT_ISO_SYMLINK_TARGET because the old name contained a user config value: \"RELAXRECOVER\" was an old default value of ISO_VOLID, see https://github.com/rear/rear/pull/2457 and https://github.com/rear/rear/pull/2813#discussion_r885576867 In default.conf properly describe PRE_BACKUP_SCRIPT and POST_BACKUP_SCRIPT to match what the implementation does, see https://github.com/rear/rear/pull/2735#issuecomment-1145006984 and for special cases see https://github.com/rear/rear/pull/2735#issuecomment-1148620157 Add PRE_RECOVERY_COMMANDS and POST_RECOVERY_COMMANDS as alternative to PRE_RECOVERY_SCRIPT and POST_RECOVERY_SCRIPT see the description in default.conf how to use them and how they work. See https://github.com/rear/rear/pull/2811 and see also https://github.com/rear/rear/pull/2735 therein in particular https://github.com/rear/rear/pull/2735#issuecomment-1134686196 Additionally use LogPrint to show the user the executed commands, see https://github.com/rear/rear/pull/2789 In default.conf describe the new user config variables USB_BOOT_PART_SIZE and USB_DEVICE_BOOT_LABEL see https://github.com/rear/rear/pull/2660 Exclude dev/watchdog from the ReaR recovery system: In default.conf add dev/watchdog to COPY_AS_IS_EXCLUDE because watchdog functionality is not wanted in the recovery system because we do not want any automated reboot functionality while disaster recovery happens via \"rear recover\", see https://github.com/rear/rear/pull/2808 Furthermore having a copy of dev/watchdog* during \"rear mkrescue\" in ReaR's build area may even trigger a system crash that is caused by a buggy TrendMicro ds_am module touching dev/watchdog in ReaR's build area (/var/tmp/rear.XXX/rootfs), see https://github.com/rear/rear/issues/2798 In output/default/940_grub2_rescue.sh for GRUB_RESCUE set 'root=/dev/ram0 vga=normal rw' (the same is already done for other boot media) to avoid a \"Kernel panic ... Unable to mount root fs on unknown-block(0,0)\" that could otherwise happen in certain cases, see https://github.com/rear/rear/pull/2791 In build/GNU/Linux/400_copy_modules.sh always include loaded kernel modules i.e. also for MODULES=() or MODULES=( 'moduleX' 'moduleY' ) include the currently loaded kernel modules, cf. https://github.com/rear/rear/issues/2727#issuecomment-994731345 In layout/save/GNU/Linux/200_partition_layout.sh ensure $disk_label is one of the supported partition tables (i.e. one of 'msdos' 'gpt' 'gpt_sync_mbr' 'dasd') and ensure syntactically correct 'disk' and 'part' entries in disklayout.conf (each value must exist and each value must be a single non-blank word), see the last part about \"error out directly ... when things failed\" in https://github.com/rear/rear/issues/2801#issuecomment-1122015129 But do not error out when there is no partition label type value for a 'disk' entry in disklayout.conf because \"rear recover\" works in a special case without partition label type value when there is only a 'disk' entry but nothing else for this disk exists in disklayout.conf which can happen when /dev/sdX is an empty SD card slot without medium, see https://github.com/rear/rear/issues/2810 In default.conf explain how to use LIBS properly, see https://github.com/rear/rear/issues/2743 In the function find_syslinux_modules_dir in lib/bootloader-functions.sh the fallback 'find /usr' to find the SYSLINUX modules directory may take a very long time on some systems (up to several hours) so tell the user in debug mode what is going on, see https://github.com/rear/rear/issues/2792 and https://github.com/rear/rear/issues/624 In default.conf tell that MODULES=( 'loaded_modules' 'additional_module' ) is not supported (the generic COPY_AS_IS method can be used to include additional modules) cf. https://github.com/rear/rear/issues/2727 Use disklayout.conf keyword 'raidarray' instead of 'raid' because we have a new 'raiddisk' keyword and a keyword must not be a leading substring of another keyword so we have now 'raidarray' and 'raiddisk', see https://github.com/rear/rear/issues/2759 and https://github.com/rear/rear/commit/53757eab1447c712fb7c8e44be9c8b3b3ffd9faa In layout/save/default/450_check_bootloader_files.sh use /[e]tc/grub.cfg and /[b]oot/.../grub.cfg with '*' globbing patterns (as in the EFI|GRUB2-EFI case) to find any of grub.cgf or grub2.cfg in /etc/ or in /boot/ (e.g. in openSUSE Leap 15.3 there is /boot/grub2/grub.cfg), cf. https://github.com/rear/rear/pull/2796#issuecomment-1118387393 In default.conf added '[e]tc/crypttab' to FILES_TO_PATCH_PATTERNS, cf. https://github.com/rear/rear/pull/2795#discussion_r859670066 New FILES_TO_PATCH_PATTERNS in default.conf to verify file hashes at the end of recover after file restore from backup and show an error when config files were restored from an outdated backup so the restored files do not match the recreated system, see https://github.com/rear/rear/pull/2795 and https://github.com/rear/rear/issues/2785 and https://github.com/rear/rear/issues/2787 In backup/RSYNC/default/450_calculate_req_space.sh comment out remote space check with rsync see https://github.com/rear/rear/issues/2760 In layout/save/default/450_check_bootloader_files.sh and layout/save/default/450_check_network_files.sh added bash globbing characters [] around the first letter to ensure that with 'shopt -s nullglob' files that do not exist will not appear so nonexistent files are not appended to CHECK_CONFIG_FILES cf. https://github.com/rear/rear/pull/2796#issuecomment-1117171070 In backup/DUPLICITY/default/500_make_duplicity_backup.sh disable SC2068 cf. https://github.com/rear/rear/issues/1040 In backup/YUM/default/500_make_backup.sh and backup/NETFS/default/500_make_backup.sh and prep/NETFS/default/070_set_backup_archive.sh fixed SC2068 cf. https://github.com/rear/rear/issues/1040 In rescue/default/850_save_sysfs_uefi_vars.sh disable SC2045 cf. https://github.com/rear/rear/issues/1040 In layout/save/GNU/Linux/240_swaps_layout.sh and lib/output-functions.sh fixed SC2045 cf. https://github.com/rear/rear/issues/1040 In lib/_input-output-functions.sh disable SC2218 cf. https://github.com/rear/rear/issues/1040 In layout/save/GNU/Linux/230_filesystem_layout.sh aviod SC1087 cf. https://github.com/rear/rear/issues/1040 In default.conf tell that USB_RETAIN_BACKUP_NR is only supported when EXTLINUX is used as bootloader for USB and in output/USB/Linux-i386/300_create_extlinux.sh add an explanatory comment how that code works, cf. https://github.com/rear/rear/pull/2794#issuecomment-1106286485 In layout/save/GNU/Linux/210_raid_layout.sh fixed and overhauled the RAID10 'layout' support code (i.e. what belongs to the mdadm -layout option). This was triggered by ShellCheck SC2034 and SC2066 for the old code, see https://github.com/rear/rear/pull/2768 In finalize/Fedora/i386/550_rebuild_initramfs.sh fixed SC2068 and SC2145 via some generic code cleanup cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 and see https://github.com/rear/rear/pull/2771 In rescue/GNU/Linux/310_network_devices.sh fix SC2091 see https://github.com/rear/rear/pull/2776 In default.conf increase USB_UEFI_PART_SIZE to 1024 MiB, cf. https://github.com/rear/rear/pull/1205 in particular to also make things work by default when additional third-party kernel modules and firmware (e.g. from Nvidia) are used, cf. https://github.com/rear/rear/issues/2770#issuecomment-1068935688 In doc/rear.8 and doc/rear.8.adoc fixed typo '/dev/disk/by-path/REAR-000' -> '/dev/disk/by-label/REAR-000' In default.conf better describe USB_DEVICE cf. https://github.com/rear/rear/issues/2770#issuecomment-1068831482 In output/default/940_grub_rescue.sh removed a misleading comment that shows a wrong get_version function call and in output/USB/Linux-i386/850_make_USB_bootable.sh fixed a wrong get_version function call that is needed since the ShellCheck SC2068 fixed get_version function in lib/layout-functions.sh In layout/recreate/default/120_confirm_wipedisk_disks.sh and layout/prepare/Linux-s390/205_s390_enable_disk.sh and rescue/GNU/Linux/310_network_devices.sh and rescue/GNU/Linux/230_storage_and_network_modules.sh and restore/default/990_move_away_restored_files.sh and restore/NBU/default/300_create_nbu_restore_fs_list.sh and skel/default/etc/scripts/system-setup.d/00-functions.sh and skel/default/etc/scripts/dhcp-setup-functions.sh and wrapup/default/990_copy_logfile.sh and usr/share/rear/lib/output-functions.sh and lib/layout-functions.sh and lib/filesystems-functions.sh and lib/linux-functions.sh avoid ShellCheck SC2068 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In output/ISO/Linux-i386/800_create_isofs.sh avoid ShellCheck SC2068 and SC2145 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In output/TSM/default/960_dsmc_verify_isofile.sh avoid ShellCheck SC2068 and SC2145 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 plus better error checking and messaging and other code cleanup In output/default/940_grub2_rescue.sh and output/default/940_grub_rescue.sh avoid ShellCheck SC2068 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In output/default/950_email_result_files.sh avoid ShellCheck SC2068 and SC2145 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 and replaced ...IfError function calls by calling Error In restore/FDRUPSTREAM/default/260_copy_log_and_report.sh fixed ShellCheck reported error SC2199 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 and fixed possible \"bash: conditional binary operator expected\" error In output/USB/Linux-i386/300_create_extlinux.sh and rescue/GNU/Linux/310_network_devices.sh avoid ShellCheck reported error SC2199 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In prep/NBKDC/default/400_prep_nbkdc.s and lib/sesam-functions.sh avoid ShellCheck false error indication SC1097 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In lib/_input-output-functions.sh fixed ShellCheck reported errors SC2145 and SC2068 and avoided ShellCheck false error indication SC1087 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062945160 In usr/sbin/rear avoid ShellCheck SC1075 and fixed ShellCheck SC2145 cf. https://github.com/rear/rear/issues/1040 In output/RAWDISK/Linux-i386/260_create_syslinux_efi_bootloader.sh fixed ShellCheck SC2235 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In rear/lib/sesam-functions.sh fixed ShellCheck SC2221 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In lib/filesystems-functions.sh in function xfs_parse fixed ShellCheck SC2179 and SC2128 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 furthermore 'xfs_opts' is local in both functions xfs_parse and create_fs in layout/prepare/GNU/Linux/131_include_filesystem_code.sh In lib/layout-functions.sh fixed ShellCheck SC2178 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In skel/default/etc/scripts/system-setup.d/00-functions.sh ignore ShellCheck SC2119 and SC2120 cf. https://github.com/rear/rear/issues/1040#issuecomment-1062703092 In restore/DUPLICITY/default/150_restore_duply.sh avoid ShellCheck SC2103 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In layout/prepare/GNU/Linux/100_include_partition_code.sh fixed ShellCheck SC2199 and SC2076 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In output/ISO/Linux-ia64/400_create_local_efi_dir.sh fixed ShellCheck SC2050 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In layout/save/GNU/Linux/230_filesystem_layout.sh fixed ShellCheck SC2030 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In verify/NBU/default/380_request_client_destination.sh fixed ShellCheck SC2018 and SC2019 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 In backup/YUM/default/500_make_backup.sh fixed ShellCheck SC2000 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034870262 Simpler code in prep/Linux-s390/305_include_s390_tools.sh to set a fixed bootdir=\"/boot\" that also fixes ShellCheck SC1066 cf. https://github.com/rear/rear/issues/1040#issuecomment-1034890880 New GRUB2_SEARCH_ROOT_COMMAND in default.conf to overrule the setting in output/USB/Linux-i386/100_create_efiboot.sh see https://github.com/rear/rear/pull/2763 and https://github.com/rear/rear/issues/2500 New EXCLUDE_IP_ADDRESSES and EXCLUDE_NETWORK_INTERFACES directives: These new array variables enable to exclude specific IP addresses or network interfaces when building the network configuration used in the rescue environment. This is typically useful when floating IP addresses are used. Not excluding these may lead to outage if the floating IP address is used by another system at time the system is getting recovered, see https://github.com/rear/rear/pull/2736 multipath: fix exclusion of still wanted devices: The current code excluding multipath devices is broken when a device being excluded matches other devices. This leads to excluding wanted devices. This happens when having custom alias for multipath devices or there are more than 26 multipath devices and 'mpatha' is getting excluded, which leads to excluding all 'mpathaX' devices are well, see https://github.com/rear/rear/pull/2750 Update 06-layout-configuration.adoc: Enhance the \"disk layout file syntax\" description: Describe that one cannot rely on backward compatibility. Describe positional parameters vs. option=value parameters. Update default.conf: In default.conf describe that when OUTPUT_URL is set OUTPUT_OPTIONS does not inherit the BACKUP_OPTIONS value cf. https://github.com/rear/rear/issues/2753 Include dmsetup and dmeventd as PROGS in conf/GNU/Linux.conf because older releases of os-prober (1.74 and below) use dmsetup as a fallback solution for mounting when grub-mount is missing but without dmsetup and dmeventd also in the recovery system that would block indefinitely at \"Installing GRUB2 boot loader...\", for details see https://github.com/rear/rear/pull/2748 In the function cmdline_add_console in lib/serial-functions.sh add 'console=tty0' as fallback to cmdline only if no real serial device was found otherwise on a machine with e.g. ttyS0 and ttyS1 where only ttyS0 is real only kernel messages (but nothing else) would appear on ttyS0, see https://github.com/rear/rear/pull/2749 Skip unneeded /usr/lib/syslog-ng/loggen/ from recovery system: In conf/GNU/Linux.conf do no longer copy all in /usr/lib/syslog-ng/ but only copy .so files in /usr/lib/syslog-ng/ (same as for rsyslog). This skips in particular /usr/lib*/syslog-ng/loggen/ because 'loggen' is not included in the recovery system ('loggen' does not appear in any ReaR code). See https://github.com/rear/rear/issues/2743 For BACKUP=CDM removed need for the whole /usr/lib64 in the recovery system. See https://github.com/rear/rear/pull/2747 and the related issues https://github.com/rear/rear/issues/2266 https://github.com/rear/rear/issues/2314 https://github.com/rear/rear/issues/2685 https://github.com/rear/rear/issues/2700 Update 400_copy_modules.sh: Do no longer error out if 'cp -a -L' failed to to copy all contents of /lib/modules/... but only tell the user about the issue so he could inspect his system and decide, see https://github.com/rear/rear/issues/2739#issuecomment-1014304127 Support for HTTP sources when using PXE: There is a new config variable PXE_HTTP_URL to specify the HTTP download source for PXE. If the variable is set the PXE config file will generate an additional 3rd boot option (besides the unchanged standard options \"rear\" via TFTP and \"local\") namely \"rear-http\" which includes the HTTP URL information to download the kernel and initrd data. See https://github.com/rear/rear/pull/2738 Also add ssh-add prog when ssh-agent is added. Since ssh-agent gets added it makes sense to add ssh-add as well. See https://github.com/rear/rear/pull/2729 In layout/prepare/default/420_autoresize_last_partitions.sh automatically resize active last partitions on RAID0 disks, see https://github.com/rear/rear/issues/2696 Therefore in layout/save/GNU/Linux/210_raid_layout.sh a new 'raiddisk' entry that has same syntax as a 'disk' entry is written to disklayout.conf to have size (and partition label) of a RAID device like \"raiddisk /dev/md127 23599054848 gpt\" because knowing the RAID device size is a precondition to be able to automatically resize a RAID0 array. See https://github.com/rear/rear/pull/2730 In layout/prepare/default/420_autoresize_last_partitions.sh automatically resize active last partitions on RAID1 disks and fixed fallback setting so that now the user can specify AUTORESIZE_EXCLUDE_PARTITIONS=() in his local.conf. Additionally in layout/prepare/default/250_compare_disks.sh show info about old disk and sizes and new disks and sizes in case of MIGRATION_MODE to make it easier to answer the questions to which new disks old disk should be mapped. See https://github.com/rear/rear/pull/2726 Fix modinfo_filename() in build/GNU/Linux/400_copy_modules.sh Output the original $module_filename also when it is a symlink because in the code below 'cp -L' copies the symlink taget content as a new regular file with file name as the name of the symlink so the copied content can be still found under its original name, cf. https://github.com/rear/rear/issues/2677#issuecomment-997859219 Additionally in case of MODULES=( 'all_modules' ) also use 'cp -L' to copy the actual content to avoid dangling symlinks in the recovery system. See https://github.com/rear/rear/pull/2731 In usr/share/rear/output/PXE/default/800_copy_to_tftp.sh fixed pxe file cp and permissions for sshfs target to prevent cp error \"failed to preserve ownership\" for sshfs and to prevent issue with write permissions trying to override image on later runs. See https://github.com/rear/rear/pull/2723 Improved wiping disks (see https://github.com/rear/rear/pull/2721): In layout/recreate/default/120_confirm_wipedisk_disks.sh skip disks that do not exist on the bare hardware in the recovery system cf. https://github.com/rear/rear/issues/2715 and exclude disks that are write-protected cf. https://github.com/rear/rear/pull/2703#issuecomment-979928423 and show in any case a user confirmation dialog for the disks that will be wiped. In layout/recreate/default/150_wipe_disks.sh do no longer open (and close) LUKS volumes because encrypted volumes contain meaningless data unless opened and unencrypted so there is no need to wipe anything inside an encrypted LUKS container, cf. \"Regarding LUKS\" in https://github.com/rear/rear/pull/2514#issuecomment-743483945 Overhauled RAID code (see https://github.com/rear/rear/pull/2714) based on https://github.com/rear/rear/pull/2702 that is about initial software RAID IMSM support i.e. with the changes in that pull request: Completely overhauled layout/save/GNU/Linux/210_raid_layout.sh: No longer a subshell that appends all stdout to disklayout.conf but explicit append to disklayout.conf where needed to be safe against accidental things written to disklayout.conf. Handle each mdadm option in one place i.e. parse and prepare output. Handle options ordered by importance, mandatory first, then optional ones. Basic tests that mandatory options are syntactically valid plus Error if not. Overhauled layout/prepare/GNU/Linux/120_include_raid_code.sh: The FEATURE_MDADM_UUID code is meanwhile obsolete because all mdadm versions in supported ReaR Linux distributions support '-uuid'. New layout/recreate/default/220_verify_layout.sh to verify if RAID devices are recreated with the UUIDs in disklayout.conf because mdadm silently ignores this option when creating IMSM arrays (both containers and the volumes inside them) and picks a random UUID cf. https://github.com/rear/rear/pull/2702#issuecomment-970395567 Support user specified DISKS_TO_BE_WIPED to mitigate https://github.com/rear/rear/issues/2715 see the DISKS_TO_BE_WIPED description in default.conf Update 100_create_layout_file.sh: Additionally show the filesystem LABEL in the 'lsblk' output of the original system as comment in disklayout.conf to make it easier to understand subsequent data in particular for RAID where the array name is shown as LABEL in 'lsblk' for example like \"/dev/sda ... linux_raid_member any:raid1sdab\" - see also \"one cannot see ... /dev/md/ symlinks as NAME ... /dev/md/raid1sdab -> ../md127\" in https://github.com/rear/rear/pull/2702#issuecomment-951769031 and see also https://github.com/rear/rear/commit/1a8a88c20d01f01fac65e296e9481ab9172c3ac7 Update 100_create_layout_file.sh: Additionally show UUID in 'lsblk' output of the original system as comment in disklayout.conf to make it easier to compare UUIDs of the original system with what was recreated, cf. \"... shouldn't it [ReaR] restore the [RAID] arrays with the same UUIDs ...?\" in https://github.com/rear/rear/pull/2702#issuecomment-968904230 and https://github.com/rear/rear/pull/2714#issuecomment-970279152 Update 050_start_required_nfs_daemons.sh: Start rpcbind with the -s option to avoid that in some cases rpcbind is not started / not available in the recovery system cf. https://github.com/rear/rear/issues/2672 New function is_multipath_used in layout-functions.sh (see https://github.com/rear/rear/pull/2708) to get 'multipath -l' out of the function is_multipath_path by adding a separated function is_multipath_used that runs 'multipath -l' (which is expensive because it scans all devices) to check if multipath is used and remembers the result in MULTIPATH_IS_USED that is used in subsequent calls of is_multipath_used (without calling 'multipath -l') so we can call is_multipath_used many times via is_multipath_path which is called in layout/save/GNU/Linux/200_partition_layout.sh for each disk device. This should avoid long computing time when there are very may disk devices, cf. https://github.com/rear/rear/pull/2597#issuecomment-814950019 Now \"rear format\" has in addition to the -efi switch a -bios switch. If none is given (i.e. by default) it will now do hybrid formatting with a BIOS boot partition (on GPT) and an EFI system partition. This is a starting point for implementing OUTPUT=USB support for UEFI and BIOS dual boot from the same medium see https://github.com/rear/rear/issues/2698 and https://github.com/rear/rear/pull/2705 Update write-protect-functions.sh: In the function is_write_protected_by_id() assume a disk without any of UUID PTUUID PARTUUID WWN is empty and meant to be used to recreate the system so it should not be write-protected cf. https://github.com/rear/rear/pull/2703#discussion_r757393547 Enhanced disk write-protection, see https://github.com/rear/rear/pull/2703 and https://github.com/rear/rear/pull/2626 by WRITE_PROTECTED_IDS with generic functionality, cf. https://github.com/rear/rear/pull/2626#issuecomment-950953826 together with the new WRITE_PROTECTED_ID_TYPES which defaults to UUID PTUUID PARTUUID WWN so that the user can specify different lsblk columns as needed in his particular environment cf. https://github.com/rear/rear/pull/2703#issuecomment-962418441 Stop ReaR from overwriting its own disk and backup drives for OUTPUT=USB and OUTPUT=RAWDISK via new WRITE_PROTECTED_... config variables (see default.conf) where UUIDs or filesystem labels can be specified so that disks that contain such UUIDs or filesystem labels will be 'write protected' during \"rear recover\", see https://github.com/rear/rear/issues/1271 and https://github.com/rear/rear/pull/2626 Overhauled serial console support code. See https://github.com/rear/rear/pull/2699 A serial console of the ReaR recovery system can now be specified separately for the kernel and the recovery system bootloader via the generic config variables USE_SERIAL_CONSOLE and SERIAL_CONSOLE_DEVICES and specific config variables SERIAL_CONSOLE_DEVICES_KERNEL SERIAL_CONSOLE_DEVICE_SYSLINUX SERIAL_CONSOLE_DEVICE_GRUB see usr/share/rear/conf/default.conf for details cf. https://github.com/rear/rear/issues/2663 and https://github.com/rear/rear/pull/2697 More control over serial devices used for console. See https://github.com/rear/rear/pull/2697 In layout/prepare/default/300_map_disks.sh overhauled the automapping of original 'disk' devices and 'multipath' devices to current block devices in the currently running recovery system so that now it automatically finds an existing unique disk size mapping also when there is a unique mapping between more than two disks, see https://github.com/rear/rear/issues/2690 Fix multiple VG recreation, see https://github.com/rear/rear/pull/2691 Do not use global variables in diskrestore.sh: Fix a problem introduced in commits b184194f37dd22a7e55655ff388579297239e73c and 311bfb3da1d5e47a2ff144123a2457e634f67893 (PR #1806) that shows up when there are multiple VGs to restore. Using variables create_thin_volumes_only and create_logical_volumes to propagate information from VG creation to LV creation does not work well in the case of multiple VGs, because the variables are global and if there are multiple VGs, their values will leak from one VG to another. The generated diskrestore.sh script does not guarantee that the LVs of a given VG are created immediately after their VG and before creating another VG. Currently, the script first creates all VGs and then all LVs, so all the LVs in all VGs will see the value of create_logical_volumes and create_thin_volumes_only from the last VG, not from their own. This matters when different VGs behave differently (typically if one has a thin pool and the other does not). Fix by replacing the scalar values by arrays of VG names. If a given VG is in the array, it is the equivalent of the former scalar value being 1 for the given VG, if it is not in the array, it is an equivalent of a former value of 0. For the create_volume_group variable the change is not needed, but do it nevertheless for symmetry with other variables. Error out in sbin/rear when it failed to source or Source() mandatory files to make it obvious when there are syntax errors in user config files and/or when there are syntax errors in our lib/*-functions.sh code, see https://github.com/rear/rear/issues/2686 Overhauled output/USB/Linux-i386/100_create_efiboot.sh In particular no longer use \"cp -p\" because '-p' may fail because it copies to a VFAT filesystem on the EFI partition see https://github.com/rear/rear/issues/2683 and now always use \"cp -L\" to ensure the real content gets copied. See https://github.com/rear/rear/pull/2684 Overhauled the description in user-guide/05-integration.adoc what \"rear savelayout\" and \"rear checklayout\" are menat to do, cf. https://github.com/rear/rear/commit/7a3884bed1fb6cb61654c4e266ba4c35094bd9f4#r56879062 Fixed https://github.com/rear/rear/issues/2667 \"rear does not entirely remove build area any more\" by using double quotes for remove_temporary_mountpoint \"$BUILD_DIR/...\" and fixed https://github.com/rear/rear/issues/2676 \"False ERROR '.../outputfs not empty, cannot remove' when OUTPUT_URL is unset\" by making scheme_supports_filesystem() fail-safe if $1 is empty or blank and also making scheme_accepts_files() fail-safe in the same way, see https://github.com/rear/rear/pull/2675 On POWER require bootlist & ofpathname if needed: The ofpathname binary is called by grub2-install. Therefore, it is required in the rescue system in order to make the recovered system bootable, except for the PowerNV (Not Virtualized - bare metal) case. Under PowerVM, we also need the bootlist executable to make the system bootable. See https://github.com/rear/rear/pull/2665 ReaR's default TMPDIR is now /var/tmp (it was /tmp before) i.e. ReaR's default working area is now /var/tmp/rear.XXXXX ReaR needs lots of space (from 300MB up to more than 1GB) to build the ReaR rescue/recovery system e.g. as ISO image and even much more space to also store the backup archive e.g. when the backup should be included in the ISO image. The system's default temporary directory /tmp is no longer suited as default temporary directory for ReaR because nowadays /tmp is often a \"tmpfs\" that is in RAM so /tmp has RAM/swap limitations. file-hierarchy(7) recommends to use /var/tmp for such cases. If the user sets TMPDIR explicitly, it still takes precedence. See https://github.com/rear/rear/pull/2664 Cleanup of GRUB2 config code in particular for OUTPUT=USB: Cleanup of the create_grub2_cfg function: Describe its usage in a comment. Have its helper functions inside create_grub2_cfg to make them not globally accessible. Initial steps to clean up how the GRUB root device is set via one single method. DebugPrint output how GRUB2 is configured to help the user to find errors or bugs. Better GRUB2 menue entry names. Consistent calling of the create_grub2_cfg function always as create_grub2_cfg \"/path/to/kernel\" \"/path/to/initrd\" >/path/to/grub.cfg also in output/ISO/Linux-i386/250_populate_efibootimg.sh. Set GRUB2 timeout to new config variable GRUB2_TIMEOUT that is by default 300 seconds. Set GRUB2 default boot menu entry to GRUB2_DEFAULT_BOOT that is by default 'chainloader' which should usually boot the original system and reference GRUB2 boot menu entries by 'menuentry ... -id=...' to have meaningful names instead of meaningless numbers. Sleep 3 seconds exactly before GRUB2 shows its menu (it replaces what there is on the screen) so that the user could see possible GRUB2 (error) messages on the screen. Additionally cleanup of the get_root_disk_UUID function. See https://github.com/rear/rear/pull/2662 Fixed serial console for syslinux: It writes only one serial line matching the configured device (when found) to the config. It also writes it for the syslinux config in case it is used without extlinux. See https://github.com/rear/rear/pull/2650 Fix function create_grub2_cfg() for the none EFI cases and adds serial console configuration to the GRUB2 config. See https://github.com/rear/rear/pull/2661 Simplifications for USB_BOOTLOADER=\"grub\" and choose the right GRUB2 config /boot/grub/grub.cfg or /boot/grub2/grub.cfg see https://github.com/rear/rear/pull/2659 Cleanup USB format scripts and related code: Now OUTPUT=USB should behave sufficiently OK on BIOS systems with syslinux/extlinux as bootloader with a separated boot partition and without it (still the default). To use OUTPUT=USB on BIOS with syslinux/extlinux with a separated boot partition size of e.g. 1024 MiB specify in etc/rear/local.conf something like OUTPUT=USB USB_BOOT_PART_SIZE=1024 OUTPUT_URL=usb:///dev/disk/by-label/REARBOOT BACKUP=NETFS BACKUP_URL=usb:///dev/disk/by-label/REAR-000 See https://github.com/rear/rear/pull/2660 Fixed format/USB/default/300_format_usb_disk.sh for none EFI cases by adding a BIOS boot partition and setting the 'legacy_boot' flag in case of GPT partitioning. See https://github.com/rear/rear/pull/2656 Added support for GRUB2 as bootloader for OUTPUT=USB via new config variable USB_BOOTLOADER=grub see https://github.com/rear/rear/pull/2655 With the new default USER_INPUT_MAX_CHARS=0 input is not truncated and it also makes correcting the input possible (before [Enter] is pressed) see https://github.com/rear/rear/issues/2622 Update default.conf: Since https://github.com/rear/rear/pull/2633 export TMPDIR=\"...\" in ReaR config files like etc/rear/local.conf does no longer work so now export TMPDIR=\"...\" must be called before calling 'rear' cf. https://github.com/rear/rear/issues/2654 Treat RAID layout value '-unknown-' same as an empty value: In layout/save/GNU/Linux/210_raid_layout.sh treat the RAID layout value '-unknown-' same as an empty value to avoid that layout/prepare/GNU/Linux/120_include_raid_code.sh will create a 'mdadm' command in diskrestore.sh like \"mdadm ... -layout=-unknown- ...\" which would fail during \"rear recover\" with something like \"mdadm: layout -unknown- not understood for raid0\", see https://github.com/rear/rear/issues/2616 Avoid false Error() exit in copy_binaries() in build/GNU/Linux/390_copy_binaries_libraries.sh by skipping 'cp' errors in copy_binaries() (regardless what the reason was why 'cp' failed) but then add the affected binary to REQUIRED_PROGS to verify later that the binary actually exists in the recovery system which should be still sufficient to let ReaR error out if something actually went wrong with needed binaries. See https://github.com/rear/rear/pull/2643 NSR enhancement for point-in-time recovery with EMC Networker client: A new variable NSR_CLIENT_REQUESTRESTORE for the BACKUP=NSR workflow has been introduced to deal with situations in which the NSR client is allowed/granted to perform its recovery action \"on its own\" but does not have full control of the EMC networker service/environment, for details see its default.conf section. See https://github.com/rear/rear/pull/2641 Workaround against DRBD9 restore error \"refusing to be primary while peer is not outdated\" see https://github.com/rear/rear/issues/2634 Cleanup rsync and fix error reporting: See https://github.com/rear/rear/pull/2632 Cleanups of rsync code to use better variable names and local variables, stop using StopIfError, use better redirections etc. Fixed a problem with rsync error detection that caused rsync errors during backup restore to be ignored, see https://github.com/rear/rear/issues/2612 Now a warning is displayed and if BACKUP_INTEGRITY_CHECK is true, it is elevated to an error and ReaR aborts. Furthermore check fake super support only when RSYNC_PROTO=ssh and removed a broken test for -fake-super arg to rsync, cf. https://github.com/rear/rear/pull/2577 Show some stdout and stderr messages also in non-debug modes: In non-debug modes (in particular also in verbose mode) stdout and stderr are redirected to a temporary file STDOUT_STDERR_FILE=TMP_DIR/rear.WORKFLOW.stdout_stderr so in non-debug modes stdout and stderr of all programs is still available for the Error() function to extract some latest messages that get shown on the usrer's terminal and those extracted lines are also copied into the log cf. https://github.com/rear/rear/issues/2623 and https://github.com/rear/rear/issues/2416 and https://github.com/rear/rear/pull/2498 Furthermore the log files and the stdout/stderr file can now only be read by root. Additionally when there is something still mounted within the build area when rear finishes, the user is informed what is mounted and that he must manually umount it before he can (also manually) remove the build area. Finally the Error() and cleanup_build_area_and_end_program() functions are made fail-safe against not yet existing log files and not yet sourced other functions in case of early Error() exits in usr/sbin/rear see https://github.com/rear/rear/pull/2633 Fixed accidental destructive backup removal in exit task and cleanup handling of URL mountpoints: See https://github.com/rear/rear/pull/2625 Cleanup of temporary mount point handling, particularly for output. Unification of mount point umount and cleanup move to the mount_url() and umount_url() functions. Replaced the various \"rm -rf\" of the mountpoint by \"rmdir\" which fixes https://github.com/rear/rear/issues/2611 Added lazy umount in case normal umount does not succeed. If build dir is kept (cf. KEEP_BUILD_DIR), propose a safe way to remove it to the user via \"rm -Rf -one-file-system\" instead of just \"rm -Rf\" where the user risks to remove everything below that mountpoint if still mounted. Fixes also some other bugs noted in the process: Filesystem-specific umount command not called https://github.com/rear/rear/commit/20359a987662cc0c3fcfa52d62d1feac7cd55850#r51319634 Unknown schemes considered invalid, see the discussion under https://github.com/rear/rear/pull/932 Identical scripts under DUPLICITY and YUM replaced by symlinks. Reverted https://github.com/rear/rear/pull/782 that had reintroduced https://github.com/rear/rear/issues/465 which got re-reported as https://github.com/rear/rear/issues/2611 Reverted https://github.com/rear/rear/pull/578 because it is not clear how .lockfile can exist in the unmounted filesystem, and if it does, it is a bug. Reverted https://github.com/rear/rear/commit/d850c4094238a03c9b926b88d7e1582ecd28af52 because it became meanwhile obsoleted by https://github.com/rear/rear/commit/a8fdc445d0d6f7f9184dc6633817928f96aae9bc Add BACKUP_DUPLICITY_OPTIONS to restore/DUPLICITY/default/400_restore_duplicity.sh Additionnal BACKUP_DUPLICITY_OPTIONS options were missing which can cause the recover to fail (options may contain endpoint information for example), see https://github.com/rear/rear/issues/2619 In prep/default/400_save_directories.sh also exclude mountpoints that are below mountpoints of \"type autofs\": Those are below an ancestor mountpoint that is owned/created by the automounter. It is possible to create a sub-mountpoint below an automounted mountpoint but the fact that the sub-mountpoint is not local means it should be excluded (i.e. there is no need to recreate the non-local sub-mountpoint directory), see https://github.com/rear/rear/issues/2610 Better description and error checking for GRUB_RESCUE with UEFI plus some alignment with the create_grub2_cfg function, cf. https://github.com/rear/rear/issues/2545 Better describe GRUB_RESCUE with UEFI in default.conf and in output/default/940_grub2_rescue.sh better error checking plus some alignment with how create_grub2_cfg() creates a GRUB2 config file i.e. no longer \"insmod\" the GRUB2 modules efi_gop efi_uga video_bochs video_cirrus cf. https://github.com/rear/rear/pull/2609#issuecomment-831883795 and the discussion in https://github.com/rear/rear/issues/2388 see https://github.com/rear/rear/pull/2609 Fix setting boot path in case of UEFI partition (ESP) on MD RAID: The code finalize/Linux-i386/670_run_efibootmgr.sh did not support Software RAID. It has to execute the efibootmgr command on the members of the Software RAID, see https://github.com/rear/rear/issues/2595 The ESP may be located on a RAID device. In this case, we need to determine the physical RAID components and call efibootmgr on them. In addition, clean up finalize/Linux-i386/670_run_efibootmgr.sh and add more logging to ease analysis when something goes wrong, see https://github.com/rear/rear/pull/2608 In prep/RSYNC/default/050_prep_rsync.sh adding sleep period to give rsync daemon time to wake up, see https://github.com/rear/rear/pull/2599 Have unused LVM PV devices only as comment in disklayout.conf: PVs that are not part of a VG are documented as comment in disklayout.conf but they are not recreated because they were not used on the original system so there is no need to recreate them by \"rear recover\" see https://github.com/rear/rear/issues/2596 and https://github.com/rear/rear/pull/2603 Automatically shrink LVs if needed during \"rear recover\". This enables to run \"rear recover\" with automated LVM LVs shrinking as needed on a bit smaller replacement disk (e.g. when a nominally same sized replacement disk is actually a bit smaller than the original disk). This automated LVs shrinking is not intended when disk(s) are substantially smaller. To migrate onto a substantially smaller replacement disk the user must in advance manually adapt his disklayout.conf file before he runs \"rear recover\". In layout/prepare/GNU/Linux/110_include_lvm_code.sh assume the command \"lvcreate -L 123456b -n LV VG\" had failed because of \"Volume group ... has insufficient free space\" and then try as fallback attempt using all remaining free space in the VG via \"lvcreate -l 100%FREE -n LV VG\". In layout/save/GNU/Linux/220_lvm_layout.sh sort the 'lvs' output lines by size of the LVs so only some biggest LVs may get automatically shrinked (if needed) because we assume that the data of the backup can still be restored into a big LV after it was shrinked a bit. See https://github.com/rear/rear/pull/2591 Replaced possibly misleading \"USB device\" by generic \"USB or disk device\" wording in user messages (e.g. when a built-in disk /dev/sdc is used that is no USB device). The word \"USB\" indicates that those messages belong to the OUTPUT=USB method, cf. https://github.com/rear/rear/pull/2589#issuecomment-805649510 and https://github.com/rear/rear/issues/2588 and https://github.com/rear/rear/pull/2589 Wipe disks before recreating partitions/volumes/filesystems/... see https://github.com/rear/rear/issues/799 See the new DISKS_TO_BE_WIPED in default.conf and for details see usr/share/rear/layout/recreate/default/README.wipe_disks This is currently new and experimental functionality so that currently by default via DISKS_TO_BE_WIPED='false' no disk is wiped to avoid possible regressions until this new feature was more tested by interested users via an explicit DISKS_TO_BE_WIPED setting in local.conf see https://github.com/rear/rear/pull/2514 In etc/scripts/system-setup.d/41-load-special-modules.sh load the nvram kernel module if possible to make /dev/nvram appear because /dev/nvram should be there when installing GRUB, see https://github.com/rear/rear/issues/2554 and include the nvram kernel module in the recovery system because nvram could be a module in particular on POWER architecture see https://github.com/rear/rear/issues/2554#issuecomment-764720180 and https://github.com/rear/rear/pull/2580 Make 400_copy_modules.sh fail-safe for newer modinfo output (in particular modinfo in kmod-27 since SLES15-SP3) because otherwise copying builtin kernel \"modules\" would let \"rear mkrescue\" error out with e.g. \"ERROR: unix exists but no module file?\". Furthermore ensure that kernel modules that should be loaded during recovery system startup (i.e. those in MODULES_LOAD) get always copied into the recovery system. See https://github.com/rear/rear/pull/2579 In 300_format_usb_disk.sh adapt USB_UEFI_PART_SIZE fallback value to 512 to be in compliance with the new default.conf setting of 512 MiB since https://github.com/rear/rear/commit/9a6b9a109aa77afc6c96cf05bbd7988cf0310d61 that was done in relation to https://github.com/rear/rear/pull/2576 see also https://github.com/rear/rear/issues/2602 Do not specify '-F 16' for mkfs.vfat and also no '-o fat=16' when mounting it but rely on the mkfs.vfat automatic FAT type selection (which is FAT16 up to 511 MiB and FAT32 starting at 512 MiB at least on openSUSE Leap 15.2 with mkfs.vfat from dosfstools-4.1) and rely on the automatic FAT type detection when mounting, cf. https://github.com/rear/rear/issues/2575 and increase the default ESP size to USB_UEFI_PART_SIZE=\"512\" to get by default (via mkfs.vfat) a FAT32 ESP to be in compliance that \"the ESP should officially use a FAT32 filesystem\" to avoid possible FAT16 ESP issues with certain UEFI firmware. See https://github.com/rear/rear/pull/2576 Update 230_filesystem_layout.sh: Increase the 'docker info' timeout value from 5 seconds to 10 seconds because sometimes 'docker info' needs more than 5 seconds to finish, cf. https://github.com/rear/rear/pull/2572#issuecomment-784110872 Support loop devices in format_usb_disk see https://github.com/rear/rear/pull/2555 Update 110_include_lvm_code.sh: Make sure we delete the volume group before re-creating it. The issue happens in Migration mode when ReaR is not trying to use vgcfgrestore. See https://github.com/rear/rear/pull/2564 In usr/share/rear/output/ISO/Linux-i386/700_create_efibootimg.sh add 2 more 32MiB blocks to be on the safe side against inexplicable failures like \"cp: error writing '/tmp/rear.XXX/tmp/efi_virt/./EFI/BOOT/elilo.conf': No space left on device\" where the above calculated $efi_img_sz is a bit too small in practice, see https://github.com/rear/rear/issues/2552 Add terminal password check via 'TTY_ROOT_PASSWORD' and describe it in default.conf, see https://github.com/rear/rear/pull/2539 Changes for NetBackup (NBU) support: Copy NetBackup PBX related files to the rescue system and start vxpbx_exchanged on boot. Add /usr/openv/tmp directory to the NBU skeleton. See https://github.com/rear/rear/pull/2544 RAWDISK: Add local rescue partition installation capability: Introduce a configuration variable 'RAWDISK_INSTALL_GPT_PARTITION_NAME', which is unset by default. When set, the rescue system will be installed to local disk partitions having the corresponding name. RAWDISK: fix local rescue partition installs (unmount before copying): While the recently created EFI boot partition is still mounted, its file system might not be fully synced. Unmounting ensures that the underlying loop block device is up to date before possibly being copied to local disk partitions. See https://github.com/rear/rear/pull/2538 BACKUP=BACULA: Make bacula aware of different location of config files see https://github.com/rear/rear/pull/2535 In layout/prepare/GNU/Linux/131_include_filesystem_code.sh fixed vfat mkfs using uuid from layout if possible see https://github.com/rear/rear/pull/2546 Completely overhauled USB filesystem kernel module handling: In prep/USB/default/380_copy_usb_fs_module.sh do no longer unconditionally add the USB filesystem to the MODULES and MODULES_LOAD arrays because there are systems where the USB filesystem (e.g. 'ext3') is no kernel module and then (via MODULES_LOAD and /etc/modules) \"modprobe ext3\" would fail in 40-start-udev-or-load-modules.sh with a false alarm \"modprobe: FATAL: ... ext3 not found ...\" message that would appear on the user's terminal during recovery system startup. See https://github.com/rear/rear/pull/2537 Add DP_LD_LIBRARY_PATH to include shared libraries used by BACKUP=DP see https://github.com/rear/rear/pull/2549 POWER architecture (ppc64) support for BACKUP=DP: Other platforms supporting the Data Protector Disk Agent, but not the Cell Console (GUI) that is only available on i386, x86_64 and ia64 are now supported with ReaR. This includes in particular ppc64. Checks unavailable on clients without the Data Protector Cell Console (GUI) are skipped. In such cases backup restore can be done using Data Protector GUI only. BACKUP=NBKDC: Enhanced ReaR backup and restore to also work with NovaStor DataCenter 8.0 and higher plus fixed wording \"NovaBACKUP DC\" -> \"NovaStor DC\", see https://github.com/rear/rear/issues/2518 Provide final power to the user to skip the ISO_FILE_SIZE_LIMIT test: Skip the assert_ISO_FILE_SIZE_LIMIT function when there is no usable ISO_FILE_SIZE_LIMIT set so the user could specify ISO_FILE_SIZE_LIMIT=0 in his etc/rear/local.conf if he wants to skip the ISO_FILE_SIZE_LIMIT test. Aditionally enforce maximum 2GiB ISO_FILE_SIZE_LIMIT when the MODULES array contains 'loaded_modules' because MODULES+=( udf ) has no effect in this case unless it is loaded (which normally isn't). Error out when files greater or equal ISO_FILE_SIZE_LIMIT should be included in the ISO: See the reasoning in default.conf why the default ISO_FILE_SIZE_LIMIT is 2GiB and why we error out when files >= ISO_FILE_SIZE_LIMIT should be included in the ISO. It is needed to aviod possibly disastrous failures later during \"rear recover\" that users who exceed that limit in exceptional cases get a hard (error) info to thoroughly test and verify whether or not things actually work for them. See https://github.com/rear/rear/pull/2525 Completely overhauled ldd test in 990_verify_rootfs.sh: Now if needed a special LD_LIBRARY_PATH is set only in the bash that runs ldd and that bash exits after ldd finished so the special LD_LIBRARY_PATH setting is gone with it. So there is no need to remember and restore some previously set LD_LIBRARY_PATH because nothing was changed in the bash that runs rear. Furthermore reporting when a binary requires additional libraries happens now in the same 'for' loop after the ldd test was run which further simplifies the code. See https://github.com/rear/rear/pull/2523 Skip the ldd test for ReaR files: In build/default/990_verify_rootfs.sh skip the ldd test for ReaR files (mainly bash scripts) where it does not make sense, cf. https://github.com/rear/rear/issues/2519#issuecomment-731196820 In 500_clone_keyboard_mappings.sh have more neutral wording in messages about possible keyboard issues and don't be needlessly verbose: It seems newer Debian-based systems (including Ubuntu) no longer contain any keymaps directory as part of the base system by default so including multi-keyboard support into the recovery system is impossible there. If the distro provides console-multi-keyboard support, ReaR includes it (without being verbose). If the distro has decided that this is not necessary, ReaR aligns with it (without being verbose). If the user has installed multi-keyboard support, ReaR aligns with it (without being verbose). Only when including the current keyboard mapping failed (i.e. when 'dumpkeys' failed) it shows subsequent messages on the user's terminal in any case. See https://github.com/rear/rear/issues/2519 and https://github.com/rear/rear/pull/2520 Restore LD_LIBRARY_PATH after reporting binaries with 'not found' libraries: In build/default/990_verify_rootfs.sh restore the LD_LIBRARY_PATH after reporting binaries with 'not found' shared object dependencies so that results are the same for the first 'ldd' run that finds binaries with 'not found' shared objects dependencies and the second 'ldd' run that reports those 'not found' shared objects dependencies, see https://github.com/rear/rear/issues/2508#issuecomment-725914211 Improved TCG Opal 2 documentation doc/user-guide/13-tcg-opal-support.adoc cf. https://github.com/rear/rear/issues/2511 Better explained OS installation according to the suggestion in https://github.com/Drive-Trust-Alliance/sedutil/issues/301#issuecomment-723010843 Additionally some information from an article on Ask Ubuntu are included https://askubuntu.com/a/1271171/1120528 Make recreating LUKS volumes work with optional cryptsetup options: The \"cryptseup luksFormat\" command does not require any of the type, cipher, key-size, hash, uuid option values because if omitted a cryptseup default value is used, cf. https://github.com/rear/rear/pull/2504#issuecomment-720341023 The right UUID values are mandatory for LUKS volumes that will be mounted during startup of the recreated system. But this does not mean ReaR should error out when there is no cryptsetup uuid value because it is possible to run \"rear recover\" with enforced MIGRATION_MODE and manually correct the restored /mnt/local/etc/crypttab file to use the new UUIDs before the initrd is recreated and the bootloader is (re)-installed cf. https://github.com/rear/rear/issues/2509 Allow setting a PBA-specific firmware configuration via the new OPAL_PBA_FIRMWARE_FILES configuration variable. Add '.../amdgpu/*' firmware files for AMD graphics hardware (if present) on TCG Opal pre-boot authentication (PBA) images, cf. https://github.com/rear/rear/issues/2474 Support OPAL 2 self-encrypting NVMe disk drives: Normally the OPAL device itself is used directly but NVMe devices have one or more namespaces per primary device and these namespaces act as disks, cf. https://github.com/rear/rear/issues/2475 Added initial LUKS2 support, see https://github.com/rear/rear/issues/2204 Added new parameter 'type' to 'crypt' keyword used in disklayout.conf. Using this parameter allows to recreate the same version of LUKS as on the original system. Added LUKS version detection, parsing depending on version and usage of 'type' parameter. New 036_valid_output_methods.sh to error out for unsupported OUTPUT methods: For \"rear mkbackup/mkrescue/mkbackuponly/mkopalpba\" (i.e. for all workflows that run the 'prep' stage) check that the OUTPUT method is actually implemented i.e. check that a usr/share/rear/output/$OUTPUT directory exists and error out when an OUTPUT method seems to be not supported to ensure that the user cannot specify a non-working OUTPUT in etc/rear/local.conf (cf. usr/share/rear/prep/default/035_valid_backup_methods.sh) see https://github.com/rear/rear/issues/2501 Redirect stdout and stderr to the log only in debug modes. In normal modes stdout and stderr are discarded (go now to /dev/null). The reason is to get rid of messages from command stdout and stderr that don't make sense for the user on their own unless there is more information in the log that provides context about the called command (e.g. what exact command was called in debugscript mode) see https://github.com/rear/rear/issues/2416 and https://github.com/rear/rear/pull/2498 More verbose messages when components are excluded so that is is easier for the user to see directly on his terminal what the actual results are when he specified to exclude components in his etc/rear/local.conf and what components are automatically excluded by ReaR. The verbosity depends on if ReaR is run in verbose '-v' mode or even in debug '-d' or '-D' mode. Inform the user about unsupported LUKS2 volumes but do not error out see https://github.com/rear/rear/issues/2491 plus some general code cleanup and improvements in layout/save/GNU/Linux/260_crypt_layout.sh Update 05-integration.adoc: Explain that error messages in ReaR's log may not come from ReaR itself but from programs that are called by ReaR because stdout and stderr are redirected into ReaR's log file, cf. https://github.com/rear/rear/issues/2479 Have 'cd WORKING_DIR' in Source() function: Ensure that after each sourced file we are back in ReaR's usual working directory which is the current working directory when usr/sbin/rear is launched that is also the working directory of all the other scripts and config files that get sourced via the Source() function in lib/framework-functions.sh see https://github.com/rear/rear/issues/2461 In 400_copy_modules.sh skip copying kernel modules that are builtin modules. The new behaviour is that when modules are listed in modules.builtin and are also shown by modinfo then those modules are now skipped. Before for such modules the modules file(s) would have been included in the recovery system. See https://github.com/rear/rear/issues/2414 In backup/NETFS/default/500_make_backup.sh filter purely informational tar messages from output: Suppress purely informational tar messages from output like \"tar: Removing leading / from member names\" or \"tar: Removing leading / from hard link targets\" or \"tar: /path/to/socket: socket ignored\" but keep actual tar error or warning messages like \"tar: /path/to/file: file changed as we read it\" and show only messages that are prefixed with the name of the failed program (like 'tar:' or 'dd:') which works when tar or dd fail but falsely suppresses messages from openssl which needs to be fixed later, cf. https://github.com/rear/rear/pull/2466#discussion_r466347471 Fixed exit code logic in backup/NETFS/default/500_make_backup.sh: Commit https://github.com/rear/rear/commit/2674807f6ad48da80b193ae977d345ad2ef5fdd1 removed the BACKUP_PROG_CRYPT_OPTIONS=\"cat\" dummy code which broke the exit code logic because pipes_rc and backup_prog_shortnames did no longer match. Additionally ensure that the number of elements in both arrays are always the same. Use ReaR specific TMP_DIR (not TMPDIR or hardcoded /tmp) plus some general cleanup work as noticed \"by the way\" in scripts, see https://github.com/rear/rear/issues/2460 and https://github.com/rear/rear/pull/2462 Adaptions and enhancements for BACKUP=CDM because the RBS agent file name changed in Rubrik CDM v5.1 from rubrik-agent-sunos5.10.sparc.tar.gz to rubrik-agent-solaris.sparc.tar.gz see https://github.com/rear/rear/issues/2441 Let 'dd' read and write up to 1M=1024*1024 bytes at a time to speed up things cf. https://github.com/rear/rear/issues/2369 and https://github.com/rear/rear/issues/2458 In default.conf change ISO_VOLID from \"RELAXRECOVER\" to \"REAR-ISO\" so the first ISO has the label \"REAR-ISO\" (8 characters) and subsequent ISOs get the labels \"REAR-ISO_01\" \"REAR-ISO_02\" ... respectively that have 11 characters (the maximum length for FAT volume names) so things work now by default when the ISO image is used to (manually) create a FAT bootable USB stick, cf. https://github.com/rear/rear/issues/1565 and https://github.com/rear/rear/issues/2456 OPALPBA: Provide a permanent unlocking mode as a workaround because https://github.com/rear/rear/pull/2426 did not resolve the issue https://github.com/rear/rear/issues/2425 where for an HPE ML10Gen9 server it seems the firmware did not initialize properly during a 'simple' reboot so the only reliable way to boot was a power cycle after Opal disks were unlocked. To reboot with unlocked disks there is now a new unlocking mode \"permanent\" via OPAL_PBA_UNLOCK_MODE (see default.conf). Reactivating locking is then the responsibility of the user. Additionally enhanced security by disabling shell access via keyboard interrupt and switching to a password hash for OPAL_PBA_DEBUG_PASSWORD. Use single quotes in the password settings examples because single quotes avoid issues with the special bash characters like $ in the password, cf. https://github.com/rear/rear/pull/2178 Update format-workflow.sh: For \"rear format\" show \"Use 'rear format - -help' for more information\" also when a \"rear format\" argument is not accepted to help the user what the right syntax is (e.g. \"rear format help\" and \"rear format - help\" do not work, only \"rear format - -help\" works) and provide a more helpful example \"rear -v format - -efi /dev/sdX\" that is actually neded for UEFI. Support for systemd and parallel restore with Data Protector BACKUP=DP: Support starting Data Protector daemon 'omni.socket' via systemd in the recovery system. Restore performance has been increased by doing parallel restores now. Additional new script usr/share/rear/finalize/DP/default/500_restore_ssc.sh to restore the client certificate when Data Protector Secure Communication is used. Plus several general script cleanup things. See https://github.com/rear/rear/pull/2443 Supply default value for root in grub in UEFI ISO: Sometimes the search command in GRUB2 used in UEFI ISO does not find the root device. This was seen at least in Debian Buster running in Qemu (VirtualBox works fine, RHEL/CentOS in Qemu works fine as well). To make ReaR work in this case, set $root to a sensible value before trying search. The GRUB2 image created by grub-mkstandalone has $root set to memdisk, which can't work. This essentially matches how it used to work before https://github.com/rear/rear/pull/2293 and fixes https://github.com/rear/rear/issues/2434 Update 300_format_usb_disk.sh: In format/USB/default/300_format_usb_disk.sh when prompting user for size of EFI system partition on USB disk if no valid value is specified also use 400 MiB as default (same as the default value in default.conf) cf. https://github.com/rear/rear/pull/1205#issuecomment-433336977 and https://github.com/rear/rear/commit/89e6a47c82fbfe8d059a4647755f94750fe28acc Replaced $DATE usage with consistent variables START_SECONDS START_DATE_TIME_NUMBER and START_DATE_TIME_STRING see https://github.com/rear/rear/pull/2452 Various TCG Opal Improvements: OPALPBA, Ubuntu: Fix incomplete file exclusions: Fixes omissions reported in https://github.com/rear/rear/issues/2436 Uses COPY_AS_IS_EXCLUDE where possible. Removes files from the PBA system's staging directory where not copying could not be configured. OPALPBA: Improve boot splash on Ubuntu 20.04: Takes into account a change from VT1 to VT7 to hide log messages during the boot process. Improves Plymouth boot splash usage to hide log messages during the reboot after unlocking disks. opaladmin: Add sub-commands 'deactivate', 'reactivate': Makes turning on and off hardware encryption easier on provisioned drives. TCG Opal-2: simplify quoting in messages and replace 'StopIfError' use cf. https://github.com/rear/rear/commit/daf35e235d0770c663ff8dba866dddec76586a27 Explicitly issuing an unlock command before reactivating locking ensures that the device remains in an unlocked state when locking is reactivated. Add an explanatory comment in lib/_input-output-functions.sh that using the ...IfError functions can result unexpected behaviour in certain cases cf. https://github.com/rear/rear/pull/2443#pullrequestreview-440609407 and https://github.com/rear/rear/issues/534 and https://github.com/rear/rear/issues/1415#issuecomment-315692391 Migrate XFS configuration files. When in MIGRATION_MODE, migrate/rename XFS configuration files so they follow disk mapping set by user. See https://github.com/rear/rear/issues/2333","title":"Details (mostly in chronological order - newest topmost):"},{"location":"releasenotes/rear27.html#supported_and_unsupported_operating_systems","text":"We try to keep our wiki page Test Matrix ReaR 2.7 https://github.com/rear/rear/wiki/Test-Matrix-ReaR-2.7 up-to-date with feedback we receive from the community. ReaR 2.7 is supported on the following Linux based operating systems: Fedora 29, 30, 31, 32, 33, and 34 RHEL 6, 7, 8, and 9 CentOS 6, 7, and 8 Scientific Linux 6 and 7 SLES 12 and 15 openSUSE Leap 15.x Debian 8, and 9 Ubuntu 16, 17, 18 and 20 ReaR 2.7 dropped official support for the following Linux based operating systems: Fedora < 29 RHEL < 6 CentOS < 6 Scientific Linux < 6 SLES < 12 openSUSE Leap 42.x and before (i.e. openSUSE <= 13) openSUSE Tumbleweed Debian < 8 Ubuntu < 16 Usually ReaR 2.7 should also work on newer versions of the above listed supported Linux based operating systems but sometimes arbitrary failures can happen when software that is used by ReaR (like partitioning tools, filesystem tools, bootloader tools, ISO image creating tools, networking tools, and so on) changes in not fully backward compatible ways or when there are innovations of the basic system (like kernel, storage, bootloader, init, networking, and so on) that are not yet supported by ReaR. In theory ReaR 2.7 should work on openSUSE Tumbleweed but in practice arbitrary failures could happen at any time because the Tumbleweed distribution is a pure rolling release version of openSUSE containing the latest stable versions of all software (cf. https://en.opensuse.org/Portal:Tumbleweed) so arbitrary changes of any software are possible at any time that could arbitrarily break how ReaR works. ReaR 2.7 may still work for SLES 11 and openSUSE Leap 42.x or even earlier openSUSE versions but it is no longer sufficiently well tested there so arbitrary regressions could appear. For example recreating LUKS encrypted volumes does no longer work with SLES11 SP4 because cryptsetup 1.1.3 in SLES11 SP4 does not support UUID and some other cryptsetup options that are used by default in ReaR 2.7. ReaR 2.7 and earlier versions are known to no longer work reasonably well for the following Linux based operating systems: RHEL 5 (and probably also CentOS 5): See issue #1766 SLES 9 and 10: See issue #1842 If you require support for unsupported Linux operating systems you must acquire a ReaR support contract. Requests to port ReaR to another operating system (not Linux) can only be achieved with serious sponsoring. Supported and Unsupported Architectures ReaR 2.7 is supported on: Intel x86 type of processors AMD x86 type of processors PPC64 processors PPC64LE processors ReaR 2.7 may or may not work on: Intel Itanium processors ARM type of processors IBM Z \"s390x\" type of processors ReaR 2.7 does not support: old PPC (32bit) processors If you feel the need to get a fully functional ReaR working on one of the above mentioned types of processors please buy consultancy from one of our official developers.","title":"Supported and Unsupported Operating Systems"},{"location":"releasenotes/rear27.html#supported_rear_versions","text":"ReaR has a long history (since 2006) and we cannot support all released versions. If you have a problem we urge you to install the latest stable ReaR version or the development version (available on GitHub) before submitting an issue. We understand that it is not always possible to install on hundreds of systems the latest version so we are willing to support previous versions of ReaR when you buy a support contract. We cannot handle the big amount of support requests anymore on a voluntary base and we must give paid projects priority, therefore, we urge our customers to buy a support contract for one or more systems. You buy time with our core developers.","title":"Supported ReaR versions"},{"location":"scenarios/index.html","text":"Scenarios Overview \u00b6 In this chapter will be go over some simple and more complex examples used with ReaR.","title":"Scenarios Overview"},{"location":"scenarios/index.html#scenarios_overview","text":"In this chapter will be go over some simple and more complex examples used with ReaR.","title":"Scenarios Overview"},{"location":"welcome/index.html","text":"Welcome to the Relax-and-Recover (ReaR) User Guide Documention pages \u00b6 This is the home for the Relax-and-Recover (ReaR) User Guide Documention and everybody is welcome to improve the documentation. This is a sub-project of Relax-and-Recover (ReaR) to finally get a decent ReaR User Guide using: all pages are stored on GitHub use mkDocs to create the site use the ReadTheDocs theme supported by mkdocs use docker to automatically build the site on the fly (while we edit the content before we publish) use GitHub Pages to automatically build the site and publish on https://relax-and-recover.org/rear-user-guide/ anybody can provide comments and/or ideas via GitHub issues by clicking on the feedback link on the bottom of each page will bring you to a new GitHub issue anybody may create pull request which may (or may not) be accepted However, there is a catch, as with the main project we work on this voluntarily (for free), but the progress may be really slow due to the fact we still have to work for a living. Faster creation of documentation Buy a ReaR Subscription to guarantee a couple of hours a week to be spent on writing documentation and updating these web pages.","title":"Get started!"},{"location":"welcome/index.html#welcome_to_the_relax-and-recover_rear_user_guide_documention_pages","text":"This is the home for the Relax-and-Recover (ReaR) User Guide Documention and everybody is welcome to improve the documentation. This is a sub-project of Relax-and-Recover (ReaR) to finally get a decent ReaR User Guide using: all pages are stored on GitHub use mkDocs to create the site use the ReadTheDocs theme supported by mkdocs use docker to automatically build the site on the fly (while we edit the content before we publish) use GitHub Pages to automatically build the site and publish on https://relax-and-recover.org/rear-user-guide/ anybody can provide comments and/or ideas via GitHub issues by clicking on the feedback link on the bottom of each page will bring you to a new GitHub issue anybody may create pull request which may (or may not) be accepted However, there is a catch, as with the main project we work on this voluntarily (for free), but the progress may be really slow due to the fact we still have to work for a living. Faster creation of documentation Buy a ReaR Subscription to guarantee a couple of hours a week to be spent on writing documentation and updating these web pages.","title":"Welcome to the Relax-and-Recover (ReaR) User Guide Documention pages"}]}